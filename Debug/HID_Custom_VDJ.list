
HID_Custom_VDJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad28  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800af1c  0800af1c  0001af1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800affc  0800affc  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800affc  0800affc  0001affc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b004  0800b004  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b004  0800b004  0001b004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b008  0800b008  0001b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800b00c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  2000015c  0800b168  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  200008fc  0800b168  000208fc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024ce4  00000000  00000000  00020192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004820  00000000  00000000  00044e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  00049698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  0004afe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030d31  00000000  00000000  0004c770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d517  00000000  00000000  0007d4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012cad1  00000000  00000000  0009a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c7489  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a40  00000000  00000000  001c74dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000015c 	.word	0x2000015c
 8000210:	00000000 	.word	0x00000000
 8000214:	0800af04 	.word	0x0800af04

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000160 	.word	0x20000160
 8000230:	0800af04 	.word	0x0800af04

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b980 	b.w	800054c <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	4688      	mov	r8, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 8084 	bne.w	800037c <__udivmoddi4+0x118>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d943      	bls.n	8000302 <__udivmoddi4+0x9e>
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	b142      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 8000280:	f1c2 0020 	rsb	r0, r2, #32
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4094      	lsls	r4, r2
 800028e:	ea40 0801 	orr.w	r8, r0, r1
 8000292:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fbb8 f6fc 	udiv	r6, r8, ip
 80002a0:	fb0c 8116 	mls	r1, ip, r6, r8
 80002a4:	fb06 f00e 	mul.w	r0, r6, lr
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	4298      	cmp	r0, r3
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	f106 31ff 	add.w	r1, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4298      	cmp	r0, r3
 80002ba:	f200 8131 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002be:	460e      	mov	r6, r1
 80002c0:	1a19      	subs	r1, r3, r0
 80002c2:	b2a3      	uxth	r3, r4
 80002c4:	fbb1 f0fc 	udiv	r0, r1, ip
 80002c8:	fb0c 1110 	mls	r1, ip, r0, r1
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0x84>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x82>
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	f200 811a 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80002e6:	4618      	mov	r0, r3
 80002e8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ec:	eba4 040e 	sub.w	r4, r4, lr
 80002f0:	2600      	movs	r6, #0
 80002f2:	b11d      	cbz	r5, 80002fc <__udivmoddi4+0x98>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c5 4300 	strd	r4, r3, [r5]
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xa2>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	2a00      	cmp	r2, #0
 800030c:	d152      	bne.n	80003b4 <__udivmoddi4+0x150>
 800030e:	1bcb      	subs	r3, r1, r7
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f f887 	uxth.w	r8, r7
 8000318:	2601      	movs	r6, #1
 800031a:	0c21      	lsrs	r1, r4, #16
 800031c:	fbb3 fcfe 	udiv	ip, r3, lr
 8000320:	fb0e 301c 	mls	r0, lr, ip, r3
 8000324:	fb08 f90c 	mul.w	r9, r8, ip
 8000328:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800032c:	4589      	cmp	r9, r1
 800032e:	d90b      	bls.n	8000348 <__udivmoddi4+0xe4>
 8000330:	1879      	adds	r1, r7, r1
 8000332:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000336:	bf2c      	ite	cs
 8000338:	2001      	movcs	r0, #1
 800033a:	2000      	movcc	r0, #0
 800033c:	4589      	cmp	r9, r1
 800033e:	d902      	bls.n	8000346 <__udivmoddi4+0xe2>
 8000340:	2800      	cmp	r0, #0
 8000342:	f000 80f0 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000346:	469c      	mov	ip, r3
 8000348:	eba1 0109 	sub.w	r1, r1, r9
 800034c:	b2a3      	uxth	r3, r4
 800034e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000352:	fb0e 1110 	mls	r1, lr, r0, r1
 8000356:	fb08 f800 	mul.w	r8, r8, r0
 800035a:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035e:	45a0      	cmp	r8, r4
 8000360:	d907      	bls.n	8000372 <__udivmoddi4+0x10e>
 8000362:	193c      	adds	r4, r7, r4
 8000364:	f100 33ff 	add.w	r3, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x10c>
 800036a:	45a0      	cmp	r8, r4
 800036c:	f200 80d2 	bhi.w	8000514 <__udivmoddi4+0x2b0>
 8000370:	4618      	mov	r0, r3
 8000372:	eba4 0408 	sub.w	r4, r4, r8
 8000376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037a:	e7ba      	b.n	80002f2 <__udivmoddi4+0x8e>
 800037c:	428b      	cmp	r3, r1
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x130>
 8000380:	2d00      	cmp	r5, #0
 8000382:	f000 80be 	beq.w	8000502 <__udivmoddi4+0x29e>
 8000386:	2600      	movs	r6, #0
 8000388:	e9c5 0100 	strd	r0, r1, [r5]
 800038c:	4630      	mov	r0, r6
 800038e:	4631      	mov	r1, r6
 8000390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000394:	fab3 f683 	clz	r6, r3
 8000398:	2e00      	cmp	r6, #0
 800039a:	d14d      	bne.n	8000438 <__udivmoddi4+0x1d4>
 800039c:	428b      	cmp	r3, r1
 800039e:	f0c0 80b3 	bcc.w	8000508 <__udivmoddi4+0x2a4>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f240 80b0 	bls.w	8000508 <__udivmoddi4+0x2a4>
 80003a8:	4630      	mov	r0, r6
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a6      	beq.n	80002fc <__udivmoddi4+0x98>
 80003ae:	e9c5 4800 	strd	r4, r8, [r5]
 80003b2:	e7a3      	b.n	80002fc <__udivmoddi4+0x98>
 80003b4:	4097      	lsls	r7, r2
 80003b6:	f1c2 0320 	rsb	r3, r2, #32
 80003ba:	fa01 f002 	lsl.w	r0, r1, r2
 80003be:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c2:	40d9      	lsrs	r1, r3
 80003c4:	fa24 f303 	lsr.w	r3, r4, r3
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	4094      	lsls	r4, r2
 80003ce:	4303      	orrs	r3, r0
 80003d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d4:	0c1e      	lsrs	r6, r3, #16
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 fc08 	mul.w	ip, r0, r8
 80003de:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80003e2:	458c      	cmp	ip, r1
 80003e4:	d90e      	bls.n	8000404 <__udivmoddi4+0x1a0>
 80003e6:	1879      	adds	r1, r7, r1
 80003e8:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ec:	bf2c      	ite	cs
 80003ee:	f04f 0901 	movcs.w	r9, #1
 80003f2:	f04f 0900 	movcc.w	r9, #0
 80003f6:	458c      	cmp	ip, r1
 80003f8:	d903      	bls.n	8000402 <__udivmoddi4+0x19e>
 80003fa:	f1b9 0f00 	cmp.w	r9, #0
 80003fe:	f000 8096 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000402:	4630      	mov	r0, r6
 8000404:	eba1 010c 	sub.w	r1, r1, ip
 8000408:	b29b      	uxth	r3, r3
 800040a:	fbb1 f6fe 	udiv	r6, r1, lr
 800040e:	fb0e 1116 	mls	r1, lr, r6, r1
 8000412:	fb06 fc08 	mul.w	ip, r6, r8
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	458c      	cmp	ip, r1
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x1ca>
 800041e:	1879      	adds	r1, r7, r1
 8000420:	f106 33ff 	add.w	r3, r6, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x1c8>
 8000426:	458c      	cmp	ip, r1
 8000428:	f200 8088 	bhi.w	800053c <__udivmoddi4+0x2d8>
 800042c:	461e      	mov	r6, r3
 800042e:	eba1 030c 	sub.w	r3, r1, ip
 8000432:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000436:	e770      	b.n	800031a <__udivmoddi4+0xb6>
 8000438:	f1c6 0720 	rsb	r7, r6, #32
 800043c:	fa03 f406 	lsl.w	r4, r3, r6
 8000440:	fa02 fc06 	lsl.w	ip, r2, r6
 8000444:	fa01 fe06 	lsl.w	lr, r1, r6
 8000448:	40fa      	lsrs	r2, r7
 800044a:	fa20 f807 	lsr.w	r8, r0, r7
 800044e:	40f9      	lsrs	r1, r7
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	4322      	orrs	r2, r4
 8000456:	ea48 040e 	orr.w	r4, r8, lr
 800045a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800045e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000462:	fa1f f982 	uxth.w	r9, r2
 8000466:	fbb1 faf8 	udiv	sl, r1, r8
 800046a:	fb08 111a 	mls	r1, r8, sl, r1
 800046e:	fb0a f009 	mul.w	r0, sl, r9
 8000472:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8000476:	4570      	cmp	r0, lr
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x234>
 800047a:	eb12 0e0e 	adds.w	lr, r2, lr
 800047e:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000482:	bf2c      	ite	cs
 8000484:	f04f 0b01 	movcs.w	fp, #1
 8000488:	f04f 0b00 	movcc.w	fp, #0
 800048c:	4570      	cmp	r0, lr
 800048e:	d902      	bls.n	8000496 <__udivmoddi4+0x232>
 8000490:	f1bb 0f00 	cmp.w	fp, #0
 8000494:	d04e      	beq.n	8000534 <__udivmoddi4+0x2d0>
 8000496:	468a      	mov	sl, r1
 8000498:	ebae 0e00 	sub.w	lr, lr, r0
 800049c:	b2a4      	uxth	r4, r4
 800049e:	fbbe f0f8 	udiv	r0, lr, r8
 80004a2:	fb08 ee10 	mls	lr, r8, r0, lr
 80004a6:	fb00 f909 	mul.w	r9, r0, r9
 80004aa:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x25e>
 80004b2:	eb12 0e0e 	adds.w	lr, r2, lr
 80004b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ba:	d201      	bcs.n	80004c0 <__udivmoddi4+0x25c>
 80004bc:	45f1      	cmp	r9, lr
 80004be:	d840      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004c0:	4608      	mov	r0, r1
 80004c2:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80004c6:	ebae 0e09 	sub.w	lr, lr, r9
 80004ca:	fba0 890c 	umull	r8, r9, r0, ip
 80004ce:	45ce      	cmp	lr, r9
 80004d0:	4641      	mov	r1, r8
 80004d2:	464c      	mov	r4, r9
 80004d4:	d302      	bcc.n	80004dc <__udivmoddi4+0x278>
 80004d6:	d106      	bne.n	80004e6 <__udivmoddi4+0x282>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d204      	bcs.n	80004e6 <__udivmoddi4+0x282>
 80004dc:	3801      	subs	r0, #1
 80004de:	ebb8 010c 	subs.w	r1, r8, ip
 80004e2:	eb69 0402 	sbc.w	r4, r9, r2
 80004e6:	b37d      	cbz	r5, 8000548 <__udivmoddi4+0x2e4>
 80004e8:	1a5a      	subs	r2, r3, r1
 80004ea:	eb6e 0e04 	sbc.w	lr, lr, r4
 80004ee:	40f2      	lsrs	r2, r6
 80004f0:	fa0e f707 	lsl.w	r7, lr, r7
 80004f4:	fa2e f306 	lsr.w	r3, lr, r6
 80004f8:	2600      	movs	r6, #0
 80004fa:	4317      	orrs	r7, r2
 80004fc:	e9c5 7300 	strd	r7, r3, [r5]
 8000500:	e6fc      	b.n	80002fc <__udivmoddi4+0x98>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e6f9      	b.n	80002fc <__udivmoddi4+0x98>
 8000508:	1a84      	subs	r4, r0, r2
 800050a:	eb61 0103 	sbc.w	r1, r1, r3
 800050e:	2001      	movs	r0, #1
 8000510:	4688      	mov	r8, r1
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x146>
 8000514:	3802      	subs	r0, #2
 8000516:	443c      	add	r4, r7
 8000518:	e72b      	b.n	8000372 <__udivmoddi4+0x10e>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	e6e3      	b.n	80002e8 <__udivmoddi4+0x84>
 8000520:	3e02      	subs	r6, #2
 8000522:	443b      	add	r3, r7
 8000524:	e6cc      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000526:	f1ac 0c02 	sub.w	ip, ip, #2
 800052a:	4439      	add	r1, r7
 800052c:	e70c      	b.n	8000348 <__udivmoddi4+0xe4>
 800052e:	3802      	subs	r0, #2
 8000530:	4439      	add	r1, r7
 8000532:	e767      	b.n	8000404 <__udivmoddi4+0x1a0>
 8000534:	f1aa 0a02 	sub.w	sl, sl, #2
 8000538:	4496      	add	lr, r2
 800053a:	e7ad      	b.n	8000498 <__udivmoddi4+0x234>
 800053c:	3e02      	subs	r6, #2
 800053e:	4439      	add	r1, r7
 8000540:	e775      	b.n	800042e <__udivmoddi4+0x1ca>
 8000542:	3802      	subs	r0, #2
 8000544:	4496      	add	lr, r2
 8000546:	e7bc      	b.n	80004c2 <__udivmoddi4+0x25e>
 8000548:	462e      	mov	r6, r5
 800054a:	e6d7      	b.n	80002fc <__udivmoddi4+0x98>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	4b08      	ldr	r3, [pc, #32]	; (800057c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055c:	4907      	ldr	r1, [pc, #28]	; (800057c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4313      	orrs	r3, r2
 8000562:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000566:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4013      	ands	r3, r2
 800056c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056e:	68fb      	ldr	r3, [r7, #12]
}
 8000570:	bf00      	nop
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000

08000580 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <LL_APB1_GRP2_EnableClock+0x2c>)
 800058a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800058c:	4907      	ldr	r1, [pc, #28]	; (80005ac <LL_APB1_GRP2_EnableClock+0x2c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4313      	orrs	r3, r2
 8000592:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <LL_APB1_GRP2_EnableClock+0x2c>)
 8000596:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4013      	ands	r3, r2
 800059c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059e:	68fb      	ldr	r3, [r7, #12]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	40021000 	.word	0x40021000

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fc9f 	bl	8000ef6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f810 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f9c8 	bl	8000950 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c0:	f000 f86e 	bl	80006a0 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 80005c4:	f000 f8f6 	bl	80007b4 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80005c8:	f000 f942 	bl	8000850 <MX_RTC_Init>
  MX_UCPD1_Init();
 80005cc:	f000 f98a 	bl	80008e4 <MX_UCPD1_Init>
  MX_USB_Device_Init();
 80005d0:	f009 fff4 	bl	800a5bc <MX_USB_Device_Init>
  MX_ICACHE_Init();
 80005d4:	f000 f8da 	bl	800078c <MX_ICACHE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x28>
	...

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	; 0x60
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	2248      	movs	r2, #72	; 0x48
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f00a fc82 	bl	800aef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80005fe:	2000      	movs	r0, #0
 8000600:	f003 fc08 	bl	8003e14 <HAL_PWREx_ControlVoltageScaling>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800060a:	f000 fa35 	bl	8000a78 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800060e:	f003 fbe3 	bl	8003dd8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000612:	4b22      	ldr	r3, [pc, #136]	; (800069c <SystemClock_Config+0xc0>)
 8000614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000618:	4a20      	ldr	r2, [pc, #128]	; (800069c <SystemClock_Config+0xc0>)
 800061a:	f023 0318 	bic.w	r3, r3, #24
 800061e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8000622:	2334      	movs	r3, #52	; 0x34
 8000624:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000626:	2381      	movs	r3, #129	; 0x81
 8000628:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800062a:	2301      	movs	r3, #1
 800062c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800062e:	2301      	movs	r3, #1
 8000630:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000632:	2300      	movs	r3, #0
 8000634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000636:	2360      	movs	r3, #96	; 0x60
 8000638:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800063e:	2301      	movs	r3, #1
 8000640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000646:	2337      	movs	r3, #55	; 0x37
 8000648:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800064a:	2307      	movs	r3, #7
 800064c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0318 	add.w	r3, r7, #24
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fc7a 	bl	8003f54 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000666:	f000 fa07 	bl	8000a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2303      	movs	r3, #3
 8000670:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2105      	movs	r1, #5
 8000682:	4618      	mov	r0, r3
 8000684:	f004 f948 	bl	8004918 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800068e:	f000 f9f3 	bl	8000a78 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3760      	adds	r7, #96	; 0x60
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000

080006a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006c2:	4b2f      	ldr	r3, [pc, #188]	; (8000780 <MX_ADC1_Init+0xe0>)
 80006c4:	4a2f      	ldr	r2, [pc, #188]	; (8000784 <MX_ADC1_Init+0xe4>)
 80006c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006c8:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <MX_ADC1_Init+0xe0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ce:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <MX_ADC1_Init+0xe0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d4:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <MX_ADC1_Init+0xe0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006da:	4b29      	ldr	r3, [pc, #164]	; (8000780 <MX_ADC1_Init+0xe0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <MX_ADC1_Init+0xe0>)
 80006e2:	2204      	movs	r2, #4
 80006e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MX_ADC1_Init+0xe0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ec:	4b24      	ldr	r3, [pc, #144]	; (8000780 <MX_ADC1_Init+0xe0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <MX_ADC1_Init+0xe0>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_ADC1_Init+0xe0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_ADC1_Init+0xe0>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_ADC1_Init+0xe0>)
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_ADC1_Init+0xe0>)
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_ADC1_Init+0xe0>)
 8000716:	2200      	movs	r2, #0
 8000718:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_ADC1_Init+0xe0>)
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000722:	4817      	ldr	r0, [pc, #92]	; (8000780 <MX_ADC1_Init+0xe0>)
 8000724:	f000 fdfe 	bl	8001324 <HAL_ADC_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800072e:	f000 f9a3 	bl	8000a78 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4619      	mov	r1, r3
 800073c:	4810      	ldr	r0, [pc, #64]	; (8000780 <MX_ADC1_Init+0xe0>)
 800073e:	f001 fb53 	bl	8001de8 <HAL_ADCEx_MultiModeConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000748:	f000 f996 	bl	8000a78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_ADC1_Init+0xe8>)
 800074e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000750:	2306      	movs	r3, #6
 8000752:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000758:	237f      	movs	r3, #127	; 0x7f
 800075a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075c:	2304      	movs	r3, #4
 800075e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_ADC1_Init+0xe0>)
 800076a:	f000 ff2d 	bl	80015c8 <HAL_ADC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000774:	f000 f980 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3728      	adds	r7, #40	; 0x28
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000264 	.word	0x20000264
 8000784:	42028000 	.word	0x42028000
 8000788:	0c900008 	.word	0x0c900008

0800078c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_Init 1 */

  /* USER CODE END ICACHE_Init 1 */
  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000790:	2000      	movs	r0, #0
 8000792:	f001 fe75 	bl	8002480 <HAL_ICACHE_ConfigAssociativityMode>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800079c:	f000 f96c 	bl	8000a78 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007a0:	f001 fe8e 	bl	80024c0 <HAL_ICACHE_Enable>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80007aa:	f000 f965 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007ba:	4a23      	ldr	r2, [pc, #140]	; (8000848 <MX_LPUART1_UART_Init+0x94>)
 80007bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007c0:	4a22      	ldr	r2, [pc, #136]	; (800084c <MX_LPUART1_UART_Init+0x98>)
 80007c2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007d8:	220c      	movs	r2, #12
 80007da:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007fa:	4812      	ldr	r0, [pc, #72]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007fc:	f005 f9b4 	bl	8005b68 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000806:	f000 f937 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 800080e:	f005 fe6f 	bl	80064f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000818:	f000 f92e 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	4809      	ldr	r0, [pc, #36]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 8000820:	f005 fea4 	bl	800656c <HAL_UARTEx_SetRxFifoThreshold>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800082a:	f000 f925 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 8000830:	f005 fe25 	bl	800647e <HAL_UARTEx_DisableFifoMode>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800083a:	f000 f91d 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200001d4 	.word	0x200001d4
 8000848:	40008000 	.word	0x40008000
 800084c:	00033324 	.word	0x00033324

08000850 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
 8000864:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_RTC_Init+0x8c>)
 8000868:	4a1d      	ldr	r2, [pc, #116]	; (80008e0 <MX_RTC_Init+0x90>)
 800086a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_RTC_Init+0x8c>)
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_RTC_Init+0x8c>)
 8000874:	227f      	movs	r2, #127	; 0x7f
 8000876:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_RTC_Init+0x8c>)
 800087a:	22ff      	movs	r2, #255	; 0xff
 800087c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_RTC_Init+0x8c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_RTC_Init+0x8c>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_RTC_Init+0x8c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_RTC_Init+0x8c>)
 8000892:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000896:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_RTC_Init+0x8c>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800089e:	480f      	ldr	r0, [pc, #60]	; (80008dc <MX_RTC_Init+0x8c>)
 80008a0:	f005 f830 	bl	8005904 <HAL_RTC_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80008aa:	f000 f8e5 	bl	8000a78 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <MX_RTC_Init+0x8c>)
 80008c4:	f005 f924 	bl	8005b10 <HAL_RTCEx_PrivilegeModeSet>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80008ce:	f000 f8d3 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200002cc 	.word	0x200002cc
 80008e0:	40002800 	.word	0x40002800

080008e4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
 80008f8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80008fa:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80008fe:	f7ff fe3f 	bl	8000580 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000902:	2002      	movs	r0, #2
 8000904:	f7ff fe24 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000908:	2001      	movs	r0, #1
 800090a:	f7ff fe21 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800090e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000912:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000914:	2303      	movs	r3, #3
 8000916:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	463b      	mov	r3, r7
 800091e:	4619      	mov	r1, r3
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <MX_UCPD1_Init+0x64>)
 8000922:	f005 fffa 	bl	800691a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800092a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800092c:	2303      	movs	r3, #3
 800092e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_UCPD1_Init+0x68>)
 800093a:	f005 ffee 	bl	800691a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	42020400 	.word	0x42020400
 800094c:	42020000 	.word	0x42020000

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b3f      	ldr	r3, [pc, #252]	; (8000a64 <MX_GPIO_Init+0x114>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a3e      	ldr	r2, [pc, #248]	; (8000a64 <MX_GPIO_Init+0x114>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b3c      	ldr	r3, [pc, #240]	; (8000a64 <MX_GPIO_Init+0x114>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b39      	ldr	r3, [pc, #228]	; (8000a64 <MX_GPIO_Init+0x114>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4a38      	ldr	r2, [pc, #224]	; (8000a64 <MX_GPIO_Init+0x114>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4b36      	ldr	r3, [pc, #216]	; (8000a64 <MX_GPIO_Init+0x114>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000996:	4b33      	ldr	r3, [pc, #204]	; (8000a64 <MX_GPIO_Init+0x114>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	4a32      	ldr	r2, [pc, #200]	; (8000a64 <MX_GPIO_Init+0x114>)
 800099c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a2:	4b30      	ldr	r3, [pc, #192]	; (8000a64 <MX_GPIO_Init+0x114>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80009ae:	f003 fa9d 	bl	8003eec <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b2c      	ldr	r3, [pc, #176]	; (8000a64 <MX_GPIO_Init+0x114>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a2b      	ldr	r2, [pc, #172]	; (8000a64 <MX_GPIO_Init+0x114>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <MX_GPIO_Init+0x114>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	4826      	ldr	r0, [pc, #152]	; (8000a68 <MX_GPIO_Init+0x118>)
 80009d0:	f001 fd3e 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009da:	4824      	ldr	r0, [pc, #144]	; (8000a6c <MX_GPIO_Init+0x11c>)
 80009dc:	f001 fd38 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	21a0      	movs	r1, #160	; 0xa0
 80009e4:	4822      	ldr	r0, [pc, #136]	; (8000a70 <MX_GPIO_Init+0x120>)
 80009e6:	f001 fd33 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80009ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f0:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <MX_GPIO_Init+0x124>)
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	481c      	ldr	r0, [pc, #112]	; (8000a70 <MX_GPIO_Init+0x120>)
 8000a00:	f001 fba6 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4813      	ldr	r0, [pc, #76]	; (8000a68 <MX_GPIO_Init+0x118>)
 8000a1c:	f001 fb98 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <MX_GPIO_Init+0x11c>)
 8000a3a:	f001 fb89 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000a3e:	23a0      	movs	r3, #160	; 0xa0
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <MX_GPIO_Init+0x120>)
 8000a56:	f001 fb7b 	bl	8002150 <HAL_GPIO_Init>

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000
 8000a68:	42020800 	.word	0x42020800
 8000a6c:	42020000 	.word	0x42020000
 8000a70:	42020400 	.word	0x42020400
 8000a74:	10110000 	.word	0x10110000

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6613      	str	r3, [r2, #96]	; 0x60
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_MspInit+0x44>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_MspInit+0x44>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6593      	str	r3, [r2, #88]	; 0x58
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x44>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b0ae      	sub	sp, #184	; 0xb8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	2294      	movs	r2, #148	; 0x94
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f00a fa01 	bl	800aef4 <memset>
  if(hadc->Instance==ADC1)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a1f      	ldr	r2, [pc, #124]	; (8000b74 <HAL_ADC_MspInit+0xa8>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d137      	bne.n	8000b6c <HAL_ADC_MspInit+0xa0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000afc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b00:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000b02:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f004 f9e2 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000b1a:	f7ff ffad 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_ADC_MspInit+0xac>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0xac>)
 8000b24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0xac>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0xac>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <HAL_ADC_MspInit+0xac>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <HAL_ADC_MspInit+0xac>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b54:	2303      	movs	r3, #3
 8000b56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b64:	4619      	mov	r1, r3
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <HAL_ADC_MspInit+0xb0>)
 8000b68:	f001 faf2 	bl	8002150 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b6c:	bf00      	nop
 8000b6e:	37b8      	adds	r7, #184	; 0xb8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	42028000 	.word	0x42028000
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	42020800 	.word	0x42020800

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b0ae      	sub	sp, #184	; 0xb8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	2294      	movs	r2, #148	; 0x94
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f00a f9a7 	bl	800aef4 <memset>
  if(huart->Instance==LPUART1)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a22      	ldr	r2, [pc, #136]	; (8000c34 <HAL_UART_MspInit+0xb4>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d13d      	bne.n	8000c2c <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bb0:	2320      	movs	r3, #32
 8000bb2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f004 f98b 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bc8:	f7ff ff56 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <HAL_UART_MspInit+0xb8>)
 8000bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd0:	4a19      	ldr	r2, [pc, #100]	; (8000c38 <HAL_UART_MspInit+0xb8>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_UART_MspInit+0xb8>)
 8000bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_UART_MspInit+0xb8>)
 8000be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be8:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <HAL_UART_MspInit+0xb8>)
 8000bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_UART_MspInit+0xb8>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000bfc:	f003 f976 	bl	8003eec <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000c00:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c24:	4619      	mov	r1, r3
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <HAL_UART_MspInit+0xbc>)
 8000c28:	f001 fa92 	bl	8002150 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	37b8      	adds	r7, #184	; 0xb8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40008000 	.word	0x40008000
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	42021800 	.word	0x42021800

08000c40 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b0a8      	sub	sp, #160	; 0xa0
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	2294      	movs	r2, #148	; 0x94
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f00a f94f 	bl	800aef4 <memset>
  if(hrtc->Instance==RTC)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a16      	ldr	r2, [pc, #88]	; (8000cb4 <HAL_RTC_MspInit+0x74>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d124      	bne.n	8000caa <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c64:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4618      	mov	r0, r3
 8000c74:	f004 f930 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000c7e:	f7ff fefb 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <HAL_RTC_MspInit+0x78>)
 8000c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c88:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <HAL_RTC_MspInit+0x78>)
 8000c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HAL_RTC_MspInit+0x78>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c96:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <HAL_RTC_MspInit+0x78>)
 8000c98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_RTC_MspInit+0x78>)
 8000ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	37a0      	adds	r7, #160	; 0xa0
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40002800 	.word	0x40002800
 8000cb8:	40021000 	.word	0x40021000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <MemManage_Handler+0x4>

08000cce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d08:	f000 f94c 	bl	8000fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <USB_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt / USB FS wake-up interrupt through EXTI line 34.
  */
void USB_FS_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_FS_IRQn 0 */

  /* USER CODE END USB_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <USB_FS_IRQHandler+0x10>)
 8000d16:	f001 fcea 	bl	80026ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_FS_IRQn 1 */

  /* USER CODE END USB_FS_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000608 	.word	0x20000608

08000d24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <SystemInit+0x20>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <SystemInit+0x20>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000d4e:	4b4f      	ldr	r3, [pc, #316]	; (8000e8c <SystemCoreClockUpdate+0x144>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d107      	bne.n	8000d6a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000d5a:	4b4c      	ldr	r3, [pc, #304]	; (8000e8c <SystemCoreClockUpdate+0x144>)
 8000d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	e005      	b.n	8000d76 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000d6a:	4b48      	ldr	r3, [pc, #288]	; (8000e8c <SystemCoreClockUpdate+0x144>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	f003 030f 	and.w	r3, r3, #15
 8000d74:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000d76:	4a46      	ldr	r2, [pc, #280]	; (8000e90 <SystemCoreClockUpdate+0x148>)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d80:	4b42      	ldr	r3, [pc, #264]	; (8000e8c <SystemCoreClockUpdate+0x144>)
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	2b0c      	cmp	r3, #12
 8000d8a:	d866      	bhi.n	8000e5a <SystemCoreClockUpdate+0x112>
 8000d8c:	a201      	add	r2, pc, #4	; (adr r2, 8000d94 <SystemCoreClockUpdate+0x4c>)
 8000d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d92:	bf00      	nop
 8000d94:	08000dc9 	.word	0x08000dc9
 8000d98:	08000e5b 	.word	0x08000e5b
 8000d9c:	08000e5b 	.word	0x08000e5b
 8000da0:	08000e5b 	.word	0x08000e5b
 8000da4:	08000dd1 	.word	0x08000dd1
 8000da8:	08000e5b 	.word	0x08000e5b
 8000dac:	08000e5b 	.word	0x08000e5b
 8000db0:	08000e5b 	.word	0x08000e5b
 8000db4:	08000dd9 	.word	0x08000dd9
 8000db8:	08000e5b 	.word	0x08000e5b
 8000dbc:	08000e5b 	.word	0x08000e5b
 8000dc0:	08000e5b 	.word	0x08000e5b
 8000dc4:	08000de1 	.word	0x08000de1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000dc8:	4a32      	ldr	r2, [pc, #200]	; (8000e94 <SystemCoreClockUpdate+0x14c>)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	6013      	str	r3, [r2, #0]
      break;
 8000dce:	e048      	b.n	8000e62 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000dd0:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <SystemCoreClockUpdate+0x14c>)
 8000dd2:	4a31      	ldr	r2, [pc, #196]	; (8000e98 <SystemCoreClockUpdate+0x150>)
 8000dd4:	601a      	str	r2, [r3, #0]
      break;
 8000dd6:	e044      	b.n	8000e62 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <SystemCoreClockUpdate+0x14c>)
 8000dda:	4a30      	ldr	r2, [pc, #192]	; (8000e9c <SystemCoreClockUpdate+0x154>)
 8000ddc:	601a      	str	r2, [r3, #0]
      break;
 8000dde:	e040      	b.n	8000e62 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000de0:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <SystemCoreClockUpdate+0x144>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000dea:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <SystemCoreClockUpdate+0x144>)
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	091b      	lsrs	r3, r3, #4
 8000df0:	f003 030f 	and.w	r3, r3, #15
 8000df4:	3301      	adds	r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d003      	beq.n	8000e06 <SystemCoreClockUpdate+0xbe>
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d006      	beq.n	8000e12 <SystemCoreClockUpdate+0xca>
 8000e04:	e00b      	b.n	8000e1e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000e06:	4a24      	ldr	r2, [pc, #144]	; (8000e98 <SystemCoreClockUpdate+0x150>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	613b      	str	r3, [r7, #16]
          break;
 8000e10:	e00b      	b.n	8000e2a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000e12:	4a22      	ldr	r2, [pc, #136]	; (8000e9c <SystemCoreClockUpdate+0x154>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	613b      	str	r3, [r7, #16]
          break;
 8000e1c:	e005      	b.n	8000e2a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	613b      	str	r3, [r7, #16]
          break;
 8000e28:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <SystemCoreClockUpdate+0x144>)
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	0a1b      	lsrs	r3, r3, #8
 8000e30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	fb02 f303 	mul.w	r3, r2, r3
 8000e3a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <SystemCoreClockUpdate+0x144>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0e5b      	lsrs	r3, r3, #25
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	3301      	adds	r3, #1
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e54:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <SystemCoreClockUpdate+0x14c>)
 8000e56:	6013      	str	r3, [r2, #0]
      break;
 8000e58:	e003      	b.n	8000e62 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <SystemCoreClockUpdate+0x14c>)
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	6013      	str	r3, [r2, #0]
      break;
 8000e60:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <SystemCoreClockUpdate+0x144>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	091b      	lsrs	r3, r3, #4
 8000e68:	f003 030f 	and.w	r3, r3, #15
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <SystemCoreClockUpdate+0x158>)
 8000e6e:	5cd3      	ldrb	r3, [r2, r3]
 8000e70:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <SystemCoreClockUpdate+0x14c>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	fa22 f303 	lsr.w	r3, r2, r3
 8000e7c:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <SystemCoreClockUpdate+0x14c>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	371c      	adds	r7, #28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	0800af94 	.word	0x0800af94
 8000e94:	20000000 	.word	0x20000000
 8000e98:	00f42400 	.word	0x00f42400
 8000e9c:	007a1200 	.word	0x007a1200
 8000ea0:	0800af7c 	.word	0x0800af7c

08000ea4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000edc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea8:	f7ff ff3c 	bl	8000d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000eac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000eae:	e003      	b.n	8000eb8 <LoopCopyDataInit>

08000eb0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000eb2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000eb4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000eb6:	3104      	adds	r1, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000eb8:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ebc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ebe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ec0:	d3f6      	bcc.n	8000eb0 <CopyDataInit>
	ldr	r2, =_sbss
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ec4:	e002      	b.n	8000ecc <LoopFillZerobss>

08000ec6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ec6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ec8:	f842 3b04 	str.w	r3, [r2], #4

08000ecc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <LoopForever+0x16>)
	cmp	r2, r3
 8000ece:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ed0:	d3f9      	bcc.n	8000ec6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ed2:	f009 ffeb 	bl	800aeac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ed6:	f7ff fb6b 	bl	80005b0 <main>

08000eda <LoopForever>:

LoopForever:
    b LoopForever
 8000eda:	e7fe      	b.n	8000eda <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000edc:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8000ee0:	0800b00c 	.word	0x0800b00c
	ldr	r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ee8:	2000015c 	.word	0x2000015c
	ldr	r2, =_sbss
 8000eec:	2000015c 	.word	0x2000015c
	ldr	r3, = _ebss
 8000ef0:	200008fc 	.word	0x200008fc

08000ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC1_2_IRQHandler>

08000ef6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000f00:	2004      	movs	r0, #4
 8000f02:	f001 f8e5 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000f06:	f7ff ff1f 	bl	8000d48 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f000 f80e 	bl	8000f2c <HAL_InitTick>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d002      	beq.n	8000f1c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	71fb      	strb	r3, [r7, #7]
 8000f1a:	e001      	b.n	8000f20 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f1c:	f7ff fdb2 	bl	8000a84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f20:	79fb      	ldrb	r3, [r7, #7]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_InitTick+0x6c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d023      	beq.n	8000f88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <HAL_InitTick+0x70>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_InitTick+0x6c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 f8ed 	bl	8002136 <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10f      	bne.n	8000f82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b07      	cmp	r3, #7
 8000f66:	d809      	bhi.n	8000f7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f001 f8b9 	bl	80020e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f74:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <HAL_InitTick+0x74>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e007      	b.n	8000f8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e004      	b.n	8000f8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	73fb      	strb	r3, [r7, #15]
 8000f86:	e001      	b.n	8000f8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x20>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	200002f4 	.word	0x200002f4

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	200002f4 	.word	0x200002f4

08000fe4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	609a      	str	r2, [r3, #8]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3360      	adds	r3, #96	; 0x60
 800105e:	461a      	mov	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <LL_ADC_SetOffset+0x44>)
 800106e:	4013      	ands	r3, r2
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	430a      	orrs	r2, r1
 800107a:	4313      	orrs	r3, r2
 800107c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001084:	bf00      	nop
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	03fff000 	.word	0x03fff000

08001094 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3360      	adds	r3, #96	; 0x60
 80010a2:	461a      	mov	r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3360      	adds	r3, #96	; 0x60
 80010d0:	461a      	mov	r2, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	431a      	orrs	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010ea:	bf00      	nop
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	615a      	str	r2, [r3, #20]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800111c:	b480      	push	{r7}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3330      	adds	r3, #48	; 0x30
 800112c:	461a      	mov	r2, r3
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	4413      	add	r3, r2
 800113a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	f003 031f 	and.w	r3, r3, #31
 8001146:	211f      	movs	r1, #31
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	401a      	ands	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	0e9b      	lsrs	r3, r3, #26
 8001154:	f003 011f 	and.w	r1, r3, #31
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	431a      	orrs	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001168:	bf00      	nop
 800116a:	371c      	adds	r7, #28
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3314      	adds	r3, #20
 8001184:	461a      	mov	r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	0e5b      	lsrs	r3, r3, #25
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	4413      	add	r3, r2
 8001192:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	0d1b      	lsrs	r3, r3, #20
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	2107      	movs	r1, #7
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	401a      	ands	r2, r3
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	0d1b      	lsrs	r3, r3, #20
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	431a      	orrs	r2, r3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011be:	bf00      	nop
 80011c0:	371c      	adds	r7, #28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e4:	43db      	mvns	r3, r3
 80011e6:	401a      	ands	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0318 	and.w	r3, r3, #24
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011f0:	40d9      	lsrs	r1, r3
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	400b      	ands	r3, r1
 80011f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011fa:	431a      	orrs	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	0007ffff 	.word	0x0007ffff

08001214 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001224:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6093      	str	r3, [r2, #8]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800124c:	d101      	bne.n	8001252 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001274:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800129c:	d101      	bne.n	80012a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <LL_ADC_IsEnabled+0x18>
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <LL_ADC_IsEnabled+0x1a>
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d101      	bne.n	80012ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	2b08      	cmp	r3, #8
 800130e:	d101      	bne.n	8001314 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e134      	b.n	80015a8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001348:	2b00      	cmp	r3, #0
 800134a:	d109      	bne.n	8001360 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff fbbd 	bl	8000acc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff67 	bl	8001238 <LL_ADC_IsDeepPowerDownEnabled>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff4d 	bl	8001214 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff82 	bl	8001288 <LL_ADC_IsInternalRegulatorEnabled>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d115      	bne.n	80013b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff66 	bl	8001260 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001394:	4b86      	ldr	r3, [pc, #536]	; (80015b0 <HAL_ADC_Init+0x28c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	099b      	lsrs	r3, r3, #6
 800139a:	4a86      	ldr	r2, [pc, #536]	; (80015b4 <HAL_ADC_Init+0x290>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	3301      	adds	r3, #1
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013a8:	e002      	b.n	80013b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f9      	bne.n	80013aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff64 	bl	8001288 <LL_ADC_IsInternalRegulatorEnabled>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10d      	bne.n	80013e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	f043 0210 	orr.w	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d6:	f043 0201 	orr.w	r2, r3, #1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff75 	bl	80012d6 <LL_ADC_REG_IsConversionOngoing>
 80013ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 80cd 	bne.w	8001596 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f040 80c9 	bne.w	8001596 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001408:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800140c:	f043 0202 	orr.w	r2, r3, #2
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff49 	bl	80012b0 <LL_ADC_IsEnabled>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d110      	bne.n	8001446 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001424:	4864      	ldr	r0, [pc, #400]	; (80015b8 <HAL_ADC_Init+0x294>)
 8001426:	f7ff ff43 	bl	80012b0 <LL_ADC_IsEnabled>
 800142a:	4604      	mov	r4, r0
 800142c:	4863      	ldr	r0, [pc, #396]	; (80015bc <HAL_ADC_Init+0x298>)
 800142e:	f7ff ff3f 	bl	80012b0 <LL_ADC_IsEnabled>
 8001432:	4603      	mov	r3, r0
 8001434:	4323      	orrs	r3, r4
 8001436:	2b00      	cmp	r3, #0
 8001438:	d105      	bne.n	8001446 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4619      	mov	r1, r3
 8001440:	485f      	ldr	r0, [pc, #380]	; (80015c0 <HAL_ADC_Init+0x29c>)
 8001442:	f7ff fdcf 	bl	8000fe4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7e5b      	ldrb	r3, [r3, #25]
 800144a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001450:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001456:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800145c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001464:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d106      	bne.n	8001482 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	3b01      	subs	r3, #1
 800147a:	045b      	lsls	r3, r3, #17
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	2b00      	cmp	r3, #0
 8001488:	d009      	beq.n	800149e <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001496:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <HAL_ADC_Init+0x2a0>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	69b9      	ldr	r1, [r7, #24]
 80014ae:	430b      	orrs	r3, r1
 80014b0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff0d 	bl	80012d6 <LL_ADC_REG_IsConversionOngoing>
 80014bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff1a 	bl	80012fc <LL_ADC_INJ_IsConversionOngoing>
 80014c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d140      	bne.n	8001552 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d13d      	bne.n	8001552 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7e1b      	ldrb	r3, [r3, #24]
 80014de:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014e0:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014e8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014f8:	f023 0306 	bic.w	r3, r3, #6
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	69b9      	ldr	r1, [r7, #24]
 8001502:	430b      	orrs	r3, r1
 8001504:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800150c:	2b01      	cmp	r3, #1
 800150e:	d118      	bne.n	8001542 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800151a:	f023 0304 	bic.w	r3, r3, #4
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001526:	4311      	orrs	r1, r2
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800152c:	4311      	orrs	r1, r2
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001532:	430a      	orrs	r2, r1
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0201 	orr.w	r2, r2, #1
 800153e:	611a      	str	r2, [r3, #16]
 8001540:	e007      	b.n	8001552 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0201 	bic.w	r2, r2, #1
 8001550:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d10c      	bne.n	8001574 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	f023 010f 	bic.w	r1, r3, #15
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	1e5a      	subs	r2, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	631a      	str	r2, [r3, #48]	; 0x30
 8001572:	e007      	b.n	8001584 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 020f 	bic.w	r2, r2, #15
 8001582:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001588:	f023 0303 	bic.w	r3, r3, #3
 800158c:	f043 0201 	orr.w	r2, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	659a      	str	r2, [r3, #88]	; 0x58
 8001594:	e007      	b.n	80015a6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	f043 0210 	orr.w	r2, r3, #16
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3724      	adds	r7, #36	; 0x24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd90      	pop	{r4, r7, pc}
 80015b0:	20000000 	.word	0x20000000
 80015b4:	053e2d63 	.word	0x053e2d63
 80015b8:	42028000 	.word	0x42028000
 80015bc:	42028100 	.word	0x42028100
 80015c0:	42028300 	.word	0x42028300
 80015c4:	fff0c007 	.word	0xfff0c007

080015c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b0b7      	sub	sp, #220	; 0xdc
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x22>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e3c1      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x7a6>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fe6d 	bl	80012d6 <LL_ADC_REG_IsConversionOngoing>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 83a6 	bne.w	8001d50 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	f7ff fd83 	bl	800111c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fe5b 	bl	80012d6 <LL_ADC_REG_IsConversionOngoing>
 8001620:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fe67 	bl	80012fc <LL_ADC_INJ_IsConversionOngoing>
 800162e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001632:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001636:	2b00      	cmp	r3, #0
 8001638:	f040 81c1 	bne.w	80019be <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800163c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001640:	2b00      	cmp	r3, #0
 8001642:	f040 81bc 	bne.w	80019be <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800164e:	d10f      	bne.n	8001670 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff fd8a 	bl	8001174 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fd44 	bl	80010f6 <LL_ADC_SetSamplingTimeCommonConfig>
 800166e:	e00e      	b.n	800168e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	6819      	ldr	r1, [r3, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	461a      	mov	r2, r3
 800167e:	f7ff fd79 	bl	8001174 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fd34 	bl	80010f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	08db      	lsrs	r3, r3, #3
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d00a      	beq.n	80016c6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	6919      	ldr	r1, [r3, #16]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016c0:	f7ff fcc4 	bl	800104c <LL_ADC_SetOffset>
 80016c4:	e17b      	b.n	80019be <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fce1 	bl	8001094 <LL_ADC_GetOffsetChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10a      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x12a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fcd6 	bl	8001094 <LL_ADC_GetOffsetChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	0e9b      	lsrs	r3, r3, #26
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	e01e      	b.n	8001730 <HAL_ADC_ConfigChannel+0x168>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fccb 	bl	8001094 <LL_ADC_GetOffsetChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001710:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001714:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001718:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001720:	2320      	movs	r3, #32
 8001722:	e004      	b.n	800172e <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001724:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001728:	fab3 f383 	clz	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001738:	2b00      	cmp	r3, #0
 800173a:	d105      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x180>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0e9b      	lsrs	r3, r3, #26
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	e018      	b.n	800177a <HAL_ADC_ConfigChannel+0x1b2>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800175c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001764:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 800176c:	2320      	movs	r3, #32
 800176e:	e004      	b.n	800177a <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001770:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001774:	fab3 f383 	clz	r3, r3
 8001778:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800177a:	429a      	cmp	r2, r3
 800177c:	d106      	bne.n	800178c <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fc9a 	bl	80010c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2101      	movs	r1, #1
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fc7e 	bl	8001094 <LL_ADC_GetOffsetChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10a      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x1f0>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2101      	movs	r1, #1
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fc73 	bl	8001094 <LL_ADC_GetOffsetChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	0e9b      	lsrs	r3, r3, #26
 80017b2:	f003 021f 	and.w	r2, r3, #31
 80017b6:	e01e      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x22e>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2101      	movs	r1, #1
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fc68 	bl	8001094 <LL_ADC_GetOffsetChannel>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80017d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80017de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80017e6:	2320      	movs	r3, #32
 80017e8:	e004      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80017ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017ee:	fab3 f383 	clz	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <HAL_ADC_ConfigChannel+0x246>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	0e9b      	lsrs	r3, r3, #26
 8001808:	f003 031f 	and.w	r3, r3, #31
 800180c:	e018      	b.n	8001840 <HAL_ADC_ConfigChannel+0x278>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001822:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800182a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001832:	2320      	movs	r3, #32
 8001834:	e004      	b.n	8001840 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001836:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001840:	429a      	cmp	r2, r3
 8001842:	d106      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2200      	movs	r2, #0
 800184a:	2101      	movs	r1, #1
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fc37 	bl	80010c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2102      	movs	r1, #2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fc1b 	bl	8001094 <LL_ADC_GetOffsetChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10a      	bne.n	800187e <HAL_ADC_ConfigChannel+0x2b6>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2102      	movs	r1, #2
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fc10 	bl	8001094 <LL_ADC_GetOffsetChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	0e9b      	lsrs	r3, r3, #26
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	e01e      	b.n	80018bc <HAL_ADC_ConfigChannel+0x2f4>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2102      	movs	r1, #2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fc05 	bl	8001094 <LL_ADC_GetOffsetChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800189c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80018a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80018ac:	2320      	movs	r3, #32
 80018ae:	e004      	b.n	80018ba <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80018b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d105      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x30c>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0e9b      	lsrs	r3, r3, #26
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	e016      	b.n	8001902 <HAL_ADC_ConfigChannel+0x33a>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80018e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80018ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80018f4:	2320      	movs	r3, #32
 80018f6:	e004      	b.n	8001902 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80018f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018fc:	fab3 f383 	clz	r3, r3
 8001900:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001902:	429a      	cmp	r2, r3
 8001904:	d106      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2200      	movs	r2, #0
 800190c:	2102      	movs	r1, #2
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fbd6 	bl	80010c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2103      	movs	r1, #3
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fbba 	bl	8001094 <LL_ADC_GetOffsetChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10a      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x378>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2103      	movs	r1, #3
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fbaf 	bl	8001094 <LL_ADC_GetOffsetChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	0e9b      	lsrs	r3, r3, #26
 800193a:	f003 021f 	and.w	r2, r3, #31
 800193e:	e017      	b.n	8001970 <HAL_ADC_ConfigChannel+0x3a8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2103      	movs	r1, #3
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fba4 	bl	8001094 <LL_ADC_GetOffsetChannel>
 800194c:	4603      	mov	r3, r0
 800194e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001952:	fa93 f3a3 	rbit	r3, r3
 8001956:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800195a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800195c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001962:	2320      	movs	r3, #32
 8001964:	e003      	b.n	800196e <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x3c0>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0e9b      	lsrs	r3, r3, #26
 8001982:	f003 031f 	and.w	r3, r3, #31
 8001986:	e011      	b.n	80019ac <HAL_ADC_ConfigChannel+0x3e4>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001996:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001998:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800199a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80019a0:	2320      	movs	r3, #32
 80019a2:	e003      	b.n	80019ac <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80019a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019a6:	fab3 f383 	clz	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d106      	bne.n	80019be <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2200      	movs	r2, #0
 80019b6:	2103      	movs	r1, #3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fb81 	bl	80010c0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fc74 	bl	80012b0 <LL_ADC_IsEnabled>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f040 81c9 	bne.w	8001d62 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	6819      	ldr	r1, [r3, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	461a      	mov	r2, r3
 80019de:	f7ff fbf5 	bl	80011cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	4a8f      	ldr	r2, [pc, #572]	; (8001c24 <HAL_ADC_ConfigChannel+0x65c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	f040 8131 	bne.w	8001c50 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10b      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x44e>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	0e9b      	lsrs	r3, r3, #26
 8001a04:	3301      	adds	r3, #1
 8001a06:	f003 031f 	and.w	r3, r3, #31
 8001a0a:	2b09      	cmp	r3, #9
 8001a0c:	bf94      	ite	ls
 8001a0e:	2301      	movls	r3, #1
 8001a10:	2300      	movhi	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	e019      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x482>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a26:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001a2e:	2320      	movs	r3, #32
 8001a30:	e003      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a34:	fab3 f383 	clz	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f003 031f 	and.w	r3, r3, #31
 8001a40:	2b09      	cmp	r3, #9
 8001a42:	bf94      	ite	ls
 8001a44:	2301      	movls	r3, #1
 8001a46:	2300      	movhi	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d079      	beq.n	8001b42 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d107      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x4a2>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	0e9b      	lsrs	r3, r3, #26
 8001a60:	3301      	adds	r3, #1
 8001a62:	069b      	lsls	r3, r3, #26
 8001a64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a68:	e015      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x4ce>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001a82:	2320      	movs	r3, #32
 8001a84:	e003      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	069b      	lsls	r3, r3, #26
 8001a92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x4ee>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	0e9b      	lsrs	r3, r3, #26
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	2101      	movs	r1, #1
 8001ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab4:	e017      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0x51e>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8001ace:	2320      	movs	r3, #32
 8001ad0:	e003      	b.n	8001ada <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8001ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ad4:	fab3 f383 	clz	r3, r3
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	3301      	adds	r3, #1
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	ea42 0103 	orr.w	r1, r2, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10a      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x544>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	0e9b      	lsrs	r3, r3, #26
 8001afc:	3301      	adds	r3, #1
 8001afe:	f003 021f 	and.w	r2, r3, #31
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	051b      	lsls	r3, r3, #20
 8001b0a:	e018      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x576>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001b24:	2320      	movs	r3, #32
 8001b26:	e003      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	3301      	adds	r3, #1
 8001b32:	f003 021f 	and.w	r2, r3, #31
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	e081      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d107      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x596>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	0e9b      	lsrs	r3, r3, #26
 8001b54:	3301      	adds	r3, #1
 8001b56:	069b      	lsls	r3, r3, #26
 8001b58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b5c:	e015      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x5c2>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8001b76:	2320      	movs	r3, #32
 8001b78:	e003      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8001b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	3301      	adds	r3, #1
 8001b84:	069b      	lsls	r3, r3, #26
 8001b86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x5e2>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	0e9b      	lsrs	r3, r3, #26
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	e017      	b.n	8001bda <HAL_ADC_ConfigChannel+0x612>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	61fb      	str	r3, [r7, #28]
  return result;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e003      	b.n	8001bce <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	ea42 0103 	orr.w	r1, r2, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10d      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x63e>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	0e9b      	lsrs	r3, r3, #26
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f003 021f 	and.w	r2, r3, #31
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3b1e      	subs	r3, #30
 8001bfe:	051b      	lsls	r3, r3, #20
 8001c00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c04:	e01e      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x67c>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	613b      	str	r3, [r7, #16]
  return result;
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d104      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8001c1e:	2320      	movs	r3, #32
 8001c20:	e006      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x668>
 8001c22:	bf00      	nop
 8001c24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	3301      	adds	r3, #1
 8001c32:	f003 021f 	and.w	r2, r3, #31
 8001c36:	4613      	mov	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3b1e      	subs	r3, #30
 8001c3e:	051b      	lsls	r3, r3, #20
 8001c40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c44:	430b      	orrs	r3, r1
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	6892      	ldr	r2, [r2, #8]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7ff fa92 	bl	8001174 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b48      	ldr	r3, [pc, #288]	; (8001d78 <HAL_ADC_ConfigChannel+0x7b0>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 8082 	beq.w	8001d62 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c5e:	4847      	ldr	r0, [pc, #284]	; (8001d7c <HAL_ADC_ConfigChannel+0x7b4>)
 8001c60:	f7ff f9e6 	bl	8001030 <LL_ADC_GetCommonPathInternalCh>
 8001c64:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c68:	4845      	ldr	r0, [pc, #276]	; (8001d80 <HAL_ADC_ConfigChannel+0x7b8>)
 8001c6a:	f7ff fb21 	bl	80012b0 <LL_ADC_IsEnabled>
 8001c6e:	4604      	mov	r4, r0
 8001c70:	4844      	ldr	r0, [pc, #272]	; (8001d84 <HAL_ADC_ConfigChannel+0x7bc>)
 8001c72:	f7ff fb1d 	bl	80012b0 <LL_ADC_IsEnabled>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4323      	orrs	r3, r4
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d15e      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a41      	ldr	r2, [pc, #260]	; (8001d88 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d127      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d121      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a39      	ldr	r2, [pc, #228]	; (8001d80 <HAL_ADC_ConfigChannel+0x7b8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d161      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001c9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ca2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4834      	ldr	r0, [pc, #208]	; (8001d7c <HAL_ADC_ConfigChannel+0x7b4>)
 8001caa:	f7ff f9ae 	bl	800100a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cae:	4b37      	ldr	r3, [pc, #220]	; (8001d8c <HAL_ADC_ConfigChannel+0x7c4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	099b      	lsrs	r3, r3, #6
 8001cb4:	4a36      	ldr	r2, [pc, #216]	; (8001d90 <HAL_ADC_ConfigChannel+0x7c8>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	099b      	lsrs	r3, r3, #6
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001cc8:	e002      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f9      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cd6:	e044      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a2d      	ldr	r2, [pc, #180]	; (8001d94 <HAL_ADC_ConfigChannel+0x7cc>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d113      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x742>
 8001ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10d      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a23      	ldr	r2, [pc, #140]	; (8001d80 <HAL_ADC_ConfigChannel+0x7b8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d134      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001cf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d00:	4619      	mov	r1, r3
 8001d02:	481e      	ldr	r0, [pc, #120]	; (8001d7c <HAL_ADC_ConfigChannel+0x7b4>)
 8001d04:	f7ff f981 	bl	800100a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d08:	e02b      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x79a>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <HAL_ADC_ConfigChannel+0x7d0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d126      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x79a>
 8001d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d120      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a16      	ldr	r2, [pc, #88]	; (8001d80 <HAL_ADC_ConfigChannel+0x7b8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d11b      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001d2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d32:	4619      	mov	r1, r3
 8001d34:	4811      	ldr	r0, [pc, #68]	; (8001d7c <HAL_ADC_ConfigChannel+0x7b4>)
 8001d36:	f7ff f968 	bl	800100a <LL_ADC_SetCommonPathInternalCh>
 8001d3a:	e012      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	f043 0220 	orr.w	r2, r3, #32
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001d4e:	e008      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	f043 0220 	orr.w	r2, r3, #32
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001d6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	37dc      	adds	r7, #220	; 0xdc
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd90      	pop	{r4, r7, pc}
 8001d76:	bf00      	nop
 8001d78:	80080000 	.word	0x80080000
 8001d7c:	42028300 	.word	0x42028300
 8001d80:	42028000 	.word	0x42028000
 8001d84:	42028100 	.word	0x42028100
 8001d88:	c7520000 	.word	0xc7520000
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	053e2d63 	.word	0x053e2d63
 8001d94:	cb840000 	.word	0xcb840000
 8001d98:	80000001 	.word	0x80000001

08001d9c <LL_ADC_IsEnabled>:
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <LL_ADC_IsEnabled+0x18>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <LL_ADC_IsEnabled+0x1a>
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d101      	bne.n	8001dda <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b0a1      	sub	sp, #132	; 0x84
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e089      	b.n	8001f1a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001e0e:	2300      	movs	r3, #0
 8001e10:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001e12:	2300      	movs	r3, #0
 8001e14:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a42      	ldr	r2, [pc, #264]	; (8001f24 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d102      	bne.n	8001e26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e20:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	e001      	b.n	8001e2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10b      	bne.n	8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	f043 0220 	orr.w	r2, r3, #32
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e068      	b.n	8001f1a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ffb9 	bl	8001dc2 <LL_ADC_REG_IsConversionOngoing>
 8001e50:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ffb3 	bl	8001dc2 <LL_ADC_REG_IsConversionOngoing>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d14a      	bne.n	8001ef8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001e62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d147      	bne.n	8001ef8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e68:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001e6a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d027      	beq.n	8001ec4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e86:	035b      	lsls	r3, r3, #13
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e90:	4824      	ldr	r0, [pc, #144]	; (8001f24 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001e92:	f7ff ff83 	bl	8001d9c <LL_ADC_IsEnabled>
 8001e96:	4604      	mov	r4, r0
 8001e98:	4823      	ldr	r0, [pc, #140]	; (8001f28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001e9a:	f7ff ff7f 	bl	8001d9c <LL_ADC_IsEnabled>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4323      	orrs	r3, r4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d132      	bne.n	8001f0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001eae:	f023 030f 	bic.w	r3, r3, #15
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	6811      	ldr	r1, [r2, #0]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	6892      	ldr	r2, [r2, #8]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ec0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ec2:	e023      	b.n	8001f0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ece:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ed0:	4814      	ldr	r0, [pc, #80]	; (8001f24 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001ed2:	f7ff ff63 	bl	8001d9c <LL_ADC_IsEnabled>
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	4813      	ldr	r0, [pc, #76]	; (8001f28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001eda:	f7ff ff5f 	bl	8001d9c <LL_ADC_IsEnabled>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4323      	orrs	r3, r4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d112      	bne.n	8001f0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001eee:	f023 030f 	bic.w	r3, r3, #15
 8001ef2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ef4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ef6:	e009      	b.n	8001f0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f043 0220 	orr.w	r2, r3, #32
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001f0a:	e000      	b.n	8001f0e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3784      	adds	r7, #132	; 0x84
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd90      	pop	{r4, r7, pc}
 8001f22:	bf00      	nop
 8001f24:	42028000 	.word	0x42028000
 8001f28:	42028100 	.word	0x42028100
 8001f2c:	42028300 	.word	0x42028300

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db0b      	blt.n	8001fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	4907      	ldr	r1, [pc, #28]	; (8001fcc <__NVIC_EnableIRQ+0x38>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	490c      	ldr	r1, [pc, #48]	; (800201c <__NVIC_SetPriority+0x4c>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	0152      	lsls	r2, r2, #5
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4908      	ldr	r1, [pc, #32]	; (8002020 <__NVIC_SetPriority+0x50>)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3b04      	subs	r3, #4
 8002008:	0152      	lsls	r2, r2, #5
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b03      	cmp	r3, #3
 8002040:	bf28      	it	cs
 8002042:	2303      	movcs	r3, #3
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3303      	adds	r3, #3
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b04      	subs	r3, #4
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	f04f 32ff 	mov.w	r2, #4294967295
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	4313      	orrs	r3, r2
         );
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	; 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	2107      	movs	r1, #7
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f7ff ff8e 	bl	8001fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff29 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020f4:	f7ff ff40 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f7ff ff90 	bl	8002024 <NVIC_EncodePriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff5f 	bl	8001fd0 <__NVIC_SetPriority>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff33 	bl	8001f94 <__NVIC_EnableIRQ>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ffa4 	bl	800208c <SysTick_Config>
 8002144:	4603      	mov	r3, r0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800215e:	e158      	b.n	8002412 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2101      	movs	r1, #1
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	4013      	ands	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 814a 	beq.w	800240c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d00b      	beq.n	8002198 <HAL_GPIO_Init+0x48>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d007      	beq.n	8002198 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800218c:	2b11      	cmp	r3, #17
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b12      	cmp	r3, #18
 8002196:	d130      	bne.n	80021fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ce:	2201      	movs	r2, #1
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	f003 0201 	and.w	r2, r3, #1
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	2203      	movs	r2, #3
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0xea>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b12      	cmp	r3, #18
 8002238:	d123      	bne.n	8002282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	08da      	lsrs	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3208      	adds	r2, #8
 8002242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	220f      	movs	r2, #15
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	08da      	lsrs	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3208      	adds	r2, #8
 800227c:	6939      	ldr	r1, [r7, #16]
 800227e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0203 	and.w	r2, r3, #3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80a4 	beq.w	800240c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80022c4:	4a5a      	ldr	r2, [pc, #360]	; (8002430 <HAL_GPIO_Init+0x2e0>)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	3318      	adds	r3, #24
 80022cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	220f      	movs	r2, #15
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a52      	ldr	r2, [pc, #328]	; (8002434 <HAL_GPIO_Init+0x2e4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d025      	beq.n	800233c <HAL_GPIO_Init+0x1ec>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a51      	ldr	r2, [pc, #324]	; (8002438 <HAL_GPIO_Init+0x2e8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d01f      	beq.n	8002338 <HAL_GPIO_Init+0x1e8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a50      	ldr	r2, [pc, #320]	; (800243c <HAL_GPIO_Init+0x2ec>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d019      	beq.n	8002334 <HAL_GPIO_Init+0x1e4>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a4f      	ldr	r2, [pc, #316]	; (8002440 <HAL_GPIO_Init+0x2f0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d013      	beq.n	8002330 <HAL_GPIO_Init+0x1e0>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a4e      	ldr	r2, [pc, #312]	; (8002444 <HAL_GPIO_Init+0x2f4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d00d      	beq.n	800232c <HAL_GPIO_Init+0x1dc>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a4d      	ldr	r2, [pc, #308]	; (8002448 <HAL_GPIO_Init+0x2f8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d007      	beq.n	8002328 <HAL_GPIO_Init+0x1d8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a4c      	ldr	r2, [pc, #304]	; (800244c <HAL_GPIO_Init+0x2fc>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d101      	bne.n	8002324 <HAL_GPIO_Init+0x1d4>
 8002320:	2306      	movs	r3, #6
 8002322:	e00c      	b.n	800233e <HAL_GPIO_Init+0x1ee>
 8002324:	2307      	movs	r3, #7
 8002326:	e00a      	b.n	800233e <HAL_GPIO_Init+0x1ee>
 8002328:	2305      	movs	r3, #5
 800232a:	e008      	b.n	800233e <HAL_GPIO_Init+0x1ee>
 800232c:	2304      	movs	r3, #4
 800232e:	e006      	b.n	800233e <HAL_GPIO_Init+0x1ee>
 8002330:	2303      	movs	r3, #3
 8002332:	e004      	b.n	800233e <HAL_GPIO_Init+0x1ee>
 8002334:	2302      	movs	r3, #2
 8002336:	e002      	b.n	800233e <HAL_GPIO_Init+0x1ee>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_GPIO_Init+0x1ee>
 800233c:	2300      	movs	r3, #0
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	f002 0203 	and.w	r2, r2, #3
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	4093      	lsls	r3, r2
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800234e:	4938      	ldr	r1, [pc, #224]	; (8002430 <HAL_GPIO_Init+0x2e0>)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	3318      	adds	r3, #24
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800235c:	4b34      	ldr	r3, [pc, #208]	; (8002430 <HAL_GPIO_Init+0x2e0>)
 800235e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002382:	4a2b      	ldr	r2, [pc, #172]	; (8002430 <HAL_GPIO_Init+0x2e0>)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800238a:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_GPIO_Init+0x2e0>)
 800238c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023b0:	4a1f      	ldr	r2, [pc, #124]	; (8002430 <HAL_GPIO_Init+0x2e0>)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023b8:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_GPIO_Init+0x2e0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023dc:	4a14      	ldr	r2, [pc, #80]	; (8002430 <HAL_GPIO_Init+0x2e0>)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023e2:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_GPIO_Init+0x2e0>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002406:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <HAL_GPIO_Init+0x2e0>)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	3301      	adds	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	f47f ae9f 	bne.w	8002160 <HAL_GPIO_Init+0x10>
  }
}
 8002422:	bf00      	nop
 8002424:	bf00      	nop
 8002426:	371c      	adds	r7, #28
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	4002f400 	.word	0x4002f400
 8002434:	42020000 	.word	0x42020000
 8002438:	42020400 	.word	0x42020400
 800243c:	42020800 	.word	0x42020800
 8002440:	42020c00 	.word	0x42020c00
 8002444:	42021000 	.word	0x42021000
 8002448:	42021400 	.word	0x42021400
 800244c:	42021800 	.word	0x42021800

08002450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
 800245c:	4613      	mov	r3, r2
 800245e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002460:	787b      	ldrb	r3, [r7, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800246c:	e002      	b.n	8002474 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800246e:	887a      	ldrh	r2, [r7, #2]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	e007      	b.n	80024ae <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 0204 	bic.w	r2, r3, #4
 80024a6:	4905      	ldr	r1, [pc, #20]	; (80024bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]
  }

  return status;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	40030400 	.word	0x40030400

080024c0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_ICACHE_Enable+0x1c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <HAL_ICACHE_Enable+0x1c>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40030400 	.word	0x40030400

080024e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e2:	b08b      	sub	sp, #44	; 0x2c
 80024e4:	af06      	add	r7, sp, #24
 80024e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0d7      	b.n	80026a2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f008 f9ba 	bl	800a880 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2203      	movs	r2, #3
 8002510:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f004 fa82 	bl	8006a22 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
 8002522:	e04c      	b.n	80025be <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	3301      	adds	r3, #1
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	440b      	add	r3, r1
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	b298      	uxth	r0, r3
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	440b      	add	r3, r1
 8002560:	3336      	adds	r3, #54	; 0x36
 8002562:	4602      	mov	r2, r0
 8002564:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	440b      	add	r3, r1
 8002576:	3303      	adds	r3, #3
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	3338      	adds	r3, #56	; 0x38
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	333c      	adds	r3, #60	; 0x3c
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	440b      	add	r3, r1
 80025b2:	3340      	adds	r3, #64	; 0x40
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	3301      	adds	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d3ad      	bcc.n	8002524 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c8:	2300      	movs	r3, #0
 80025ca:	73fb      	strb	r3, [r7, #15]
 80025cc:	e044      	b.n	8002658 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	440b      	add	r3, r1
 80025dc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025e4:	7bfa      	ldrb	r2, [r7, #15]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002610:	7bfa      	ldrb	r2, [r7, #15]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	440b      	add	r3, r1
 8002634:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	3301      	adds	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	429a      	cmp	r2, r3
 8002660:	d3b5      	bcc.n	80025ce <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	687e      	ldr	r6, [r7, #4]
 800266a:	466d      	mov	r5, sp
 800266c:	f106 0410 	add.w	r4, r6, #16
 8002670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	602b      	str	r3, [r5, #0]
 8002678:	1d33      	adds	r3, r6, #4
 800267a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800267c:	6838      	ldr	r0, [r7, #0]
 800267e:	f004 f9eb 	bl	8006a58 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d102      	bne.n	80026a0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f001 fb72 	bl	8003d84 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_PCD_Start+0x16>
 80026bc:	2302      	movs	r3, #2
 80026be:	e012      	b.n	80026e6 <HAL_PCD_Start+0x3c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f004 f991 	bl	80069f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f006 fb45 	bl	8008d66 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f006 fb4a 	bl	8008d94 <USB_ReadInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800270a:	d102      	bne.n	8002712 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fb35 	bl	8002d7c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f006 fb3c 	bl	8008d94 <USB_ReadInterrupts>
 800271c:	4603      	mov	r3, r0
 800271e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002726:	d112      	bne.n	800274e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002730:	b29a      	uxth	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800273a:	b292      	uxth	r2, r2
 800273c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f008 f95a 	bl	800a9fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002746:	2100      	movs	r1, #0
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f91e 	bl	800298a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f006 fb1e 	bl	8008d94 <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002762:	d10b      	bne.n	800277c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800276c:	b29a      	uxth	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002776:	b292      	uxth	r2, r2
 8002778:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f006 fb07 	bl	8008d94 <USB_ReadInterrupts>
 8002786:	4603      	mov	r3, r0
 8002788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800278c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002790:	d10b      	bne.n	80027aa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800279a:	b29a      	uxth	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027a4:	b292      	uxth	r2, r2
 80027a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f006 faf0 	bl	8008d94 <USB_ReadInterrupts>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027be:	d133      	bne.n	8002828 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0204 	bic.w	r2, r2, #4
 80027d2:	b292      	uxth	r2, r2
 80027d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0208 	bic.w	r2, r2, #8
 80027ea:	b292      	uxth	r2, r2
 80027ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d107      	bne.n	800280a <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002802:	2100      	movs	r1, #0
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f008 fad1 	bl	800adac <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f008 f92e 	bl	800aa6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002818:	b29a      	uxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002822:	b292      	uxth	r2, r2
 8002824:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f006 fab1 	bl	8008d94 <USB_ReadInterrupts>
 8002832:	4603      	mov	r3, r0
 8002834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800283c:	d126      	bne.n	800288c <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002846:	b29a      	uxth	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0208 	orr.w	r2, r2, #8
 8002850:	b292      	uxth	r2, r2
 8002852:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800285e:	b29a      	uxth	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002868:	b292      	uxth	r2, r2
 800286a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002876:	b29a      	uxth	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0204 	orr.w	r2, r2, #4
 8002880:	b292      	uxth	r2, r2
 8002882:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f008 f8d6 	bl	800aa38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f006 fa7f 	bl	8008d94 <USB_ReadInterrupts>
 8002896:	4603      	mov	r3, r0
 8002898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289c:	2b80      	cmp	r3, #128	; 0x80
 800289e:	d13f      	bne.n	8002920 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028b2:	b292      	uxth	r2, r2
 80028b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d12b      	bne.n	800291a <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0204 	orr.w	r2, r2, #4
 80028d4:	b292      	uxth	r2, r2
 80028d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0208 	orr.w	r2, r2, #8
 80028ec:	b292      	uxth	r2, r2
 80028ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002902:	b29b      	uxth	r3, r3
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002910:	2101      	movs	r1, #1
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f008 fa4a 	bl	800adac <HAL_PCDEx_LPM_Callback>
 8002918:	e002      	b.n	8002920 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f008 f88c 	bl	800aa38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f006 fa35 	bl	8008d94 <USB_ReadInterrupts>
 800292a:	4603      	mov	r3, r0
 800292c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002934:	d10e      	bne.n	8002954 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002948:	b292      	uxth	r2, r2
 800294a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f008 f845 	bl	800a9de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f006 fa1b 	bl	8008d94 <USB_ReadInterrupts>
 800295e:	4603      	mov	r3, r0
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002968:	d10b      	bne.n	8002982 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002972:	b29a      	uxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800297c:	b292      	uxth	r2, r2
 800297e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	460b      	mov	r3, r1
 8002994:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_PCD_SetAddress+0x1a>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e013      	b.n	80029cc <HAL_PCD_SetAddress+0x42>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f006 f9be 	bl	8008d3e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	4608      	mov	r0, r1
 80029de:	4611      	mov	r1, r2
 80029e0:	461a      	mov	r2, r3
 80029e2:	4603      	mov	r3, r0
 80029e4:	70fb      	strb	r3, [r7, #3]
 80029e6:	460b      	mov	r3, r1
 80029e8:	803b      	strh	r3, [r7, #0]
 80029ea:	4613      	mov	r3, r2
 80029ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	da0e      	bge.n	8002a18 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2201      	movs	r2, #1
 8002a14:	705a      	strb	r2, [r3, #1]
 8002a16:	e00e      	b.n	8002a36 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	f003 0207 	and.w	r2, r3, #7
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a42:	883a      	ldrh	r2, [r7, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	78ba      	ldrb	r2, [r7, #2]
 8002a4c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	785b      	ldrb	r3, [r3, #1]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a60:	78bb      	ldrb	r3, [r7, #2]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d102      	bne.n	8002a6c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_PCD_EP_Open+0xa6>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e00e      	b.n	8002a98 <HAL_PCD_EP_Open+0xc4>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68f9      	ldr	r1, [r7, #12]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f004 f807 	bl	8006a9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002a96:	7afb      	ldrb	r3, [r7, #11]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	da0e      	bge.n	8002ad2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	705a      	strb	r2, [r3, #1]
 8002ad0:	e00e      	b.n	8002af0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	f003 0207 	and.w	r2, r3, #7
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_PCD_EP_Close+0x6a>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e00e      	b.n	8002b28 <HAL_PCD_EP_Close+0x88>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68f9      	ldr	r1, [r7, #12]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f004 fb2d 	bl	8007178 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b40:	7afb      	ldrb	r3, [r7, #11]
 8002b42:	f003 0207 	and.w	r2, r3, #7
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4413      	add	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2200      	movs	r2, #0
 8002b68:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b70:	7afb      	ldrb	r3, [r7, #11]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b7c:	7afb      	ldrb	r3, [r7, #11]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6979      	ldr	r1, [r7, #20]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f004 fce0 	bl	8007552 <USB_EPStartXfer>
 8002b92:	e005      	b.n	8002ba0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6979      	ldr	r1, [r7, #20]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 fcd9 	bl	8007552 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b086      	sub	sp, #24
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bba:	7afb      	ldrb	r3, [r7, #11]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2200      	movs	r2, #0
 8002bee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bf6:	7afb      	ldrb	r3, [r7, #11]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c02:	7afb      	ldrb	r3, [r7, #11]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d106      	bne.n	8002c1a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6979      	ldr	r1, [r7, #20]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f004 fc9d 	bl	8007552 <USB_EPStartXfer>
 8002c18:	e005      	b.n	8002c26 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6979      	ldr	r1, [r7, #20]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f004 fc96 	bl	8007552 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	f003 0207 	and.w	r2, r3, #7
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d901      	bls.n	8002c4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e03e      	b.n	8002ccc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	da0e      	bge.n	8002c74 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	705a      	strb	r2, [r3, #1]
 8002c72:	e00c      	b.n	8002c8e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_PCD_EP_SetStall+0x7e>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e00e      	b.n	8002ccc <HAL_PCD_EP_SetStall+0x9c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f005 ff3f 	bl	8008b40 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	f003 020f 	and.w	r2, r3, #15
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d901      	bls.n	8002cf2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e040      	b.n	8002d74 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	da0e      	bge.n	8002d18 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	705a      	strb	r2, [r3, #1]
 8002d16:	e00e      	b.n	8002d36 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	f003 0207 	and.w	r2, r3, #7
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_PCD_EP_ClrStall+0x82>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e00e      	b.n	8002d74 <HAL_PCD_EP_ClrStall+0xa0>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68f9      	ldr	r1, [r7, #12]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f005 ff3c 	bl	8008be2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08e      	sub	sp, #56	; 0x38
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d84:	e2d6      	b.n	8003334 <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d8e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002d9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f040 815b 	bne.w	800305c <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002da6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d150      	bne.n	8002e52 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc0:	81fb      	strh	r3, [r7, #14]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	89fb      	ldrh	r3, [r7, #14]
 8002dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3328      	adds	r3, #40	; 0x28
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4413      	add	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	441a      	add	r2, r3
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002e10:	2100      	movs	r1, #0
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f007 fdc9 	bl	800a9aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8287 	beq.w	8003334 <PCD_EP_ISR_Handler+0x5b8>
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f040 8282 	bne.w	8003334 <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	b292      	uxth	r2, r2
 8002e44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e50:	e270      	b.n	8003334 <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d032      	beq.n	8002ed2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4413      	add	r3, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	4413      	add	r3, r2
 8002e86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	f005 ffc6 	bl	8008e38 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002eb8:	4013      	ands	r3, r2
 8002eba:	823b      	strh	r3, [r7, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	8a3a      	ldrh	r2, [r7, #16]
 8002ec2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ec6:	b292      	uxth	r2, r2
 8002ec8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f007 fd40 	bl	800a950 <HAL_PCD_SetupStageCallback>
 8002ed0:	e230      	b.n	8003334 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ed2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f280 822c 	bge.w	8003334 <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ee8:	4013      	ands	r3, r2
 8002eea:	83bb      	strh	r3, [r7, #28]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	8bba      	ldrh	r2, [r7, #28]
 8002ef2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ef6:	b292      	uxth	r2, r2
 8002ef8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6812      	ldr	r2, [r2, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d019      	beq.n	8002f5e <PCD_EP_ISR_Handler+0x1e2>
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d015      	beq.n	8002f5e <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	6959      	ldr	r1, [r3, #20]
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f005 ff78 	bl	8008e38 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	441a      	add	r2, r3
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002f56:	2100      	movs	r1, #0
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f007 fd0b 	bl	800a974 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f040 81e2 	bne.w	8003334 <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	4413      	add	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d112      	bne.n	8002fbe <PCD_EP_ISR_Handler+0x242>
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	801a      	strh	r2, [r3, #0]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	801a      	strh	r2, [r3, #0]
 8002fbc:	e02f      	b.n	800301e <PCD_EP_ISR_Handler+0x2a2>
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b3e      	cmp	r3, #62	; 0x3e
 8002fc4:	d813      	bhi.n	8002fee <PCD_EP_ISR_Handler+0x272>
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	085b      	lsrs	r3, r3, #1
 8002fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <PCD_EP_ISR_Handler+0x264>
 8002fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fdc:	3301      	adds	r3, #1
 8002fde:	633b      	str	r3, [r7, #48]	; 0x30
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	029b      	lsls	r3, r3, #10
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	801a      	strh	r2, [r3, #0]
 8002fec:	e017      	b.n	800301e <PCD_EP_ISR_Handler+0x2a2>
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d102      	bne.n	8003008 <PCD_EP_ISR_Handler+0x28c>
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	3b01      	subs	r3, #1
 8003006:	633b      	str	r3, [r7, #48]	; 0x30
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	b29b      	uxth	r3, r3
 800300c:	029b      	lsls	r3, r3, #10
 800300e:	b29b      	uxth	r3, r3
 8003010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003018:	b29a      	uxth	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	b29b      	uxth	r3, r3
 8003026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800302a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302e:	827b      	strh	r3, [r7, #18]
 8003030:	8a7b      	ldrh	r3, [r7, #18]
 8003032:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003036:	827b      	strh	r3, [r7, #18]
 8003038:	8a7b      	ldrh	r3, [r7, #18]
 800303a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800303e:	827b      	strh	r3, [r7, #18]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	8a7b      	ldrh	r3, [r7, #18]
 8003046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800304a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800304e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003056:	b29b      	uxth	r3, r3
 8003058:	8013      	strh	r3, [r2, #0]
 800305a:	e16b      	b.n	8003334 <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800306e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003072:	2b00      	cmp	r3, #0
 8003074:	f280 80e4 	bge.w	8003240 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b29a      	uxth	r2, r3
 800308a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800308e:	4013      	ands	r3, r2
 8003090:	853b      	strh	r3, [r7, #40]	; 0x28
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80030a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030a6:	b292      	uxth	r2, r2
 80030a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80030aa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	7b1b      	ldrb	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d120      	bne.n	800310a <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	4413      	add	r3, r2
 80030e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ec:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80030ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 8083 	beq.w	80031fc <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	6959      	ldr	r1, [r3, #20]
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	88da      	ldrh	r2, [r3, #6]
 8003102:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003104:	f005 fe98 	bl	8008e38 <USB_ReadPMA>
 8003108:	e078      	b.n	80031fc <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	78db      	ldrb	r3, [r3, #3]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d108      	bne.n	8003124 <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003112:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003114:	461a      	mov	r2, r3
 8003116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f919 	bl	8003350 <HAL_PCD_EP_DB_Receive>
 800311e:	4603      	mov	r3, r0
 8003120:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003122:	e06b      	b.n	80031fc <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	441a      	add	r2, r3
 800314e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800315c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003160:	b29b      	uxth	r3, r3
 8003162:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	b29b      	uxth	r3, r3
 8003176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d01f      	beq.n	80031be <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003186:	b29b      	uxth	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4413      	add	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	4413      	add	r3, r2
 8003198:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031a2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80031a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d028      	beq.n	80031fc <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	6959      	ldr	r1, [r3, #20]
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	891a      	ldrh	r2, [r3, #8]
 80031b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031b8:	f005 fe3e 	bl	8008e38 <USB_ReadPMA>
 80031bc:	e01e      	b.n	80031fc <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	4413      	add	r3, r2
 80031d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031e2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80031e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	6959      	ldr	r1, [r3, #20]
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	895a      	ldrh	r2, [r3, #10]
 80031f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031f8:	f005 fe1e 	bl	8008e38 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003202:	441a      	add	r2, r3
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	695a      	ldr	r2, [r3, #20]
 800320c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800320e:	441a      	add	r2, r3
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <PCD_EP_ISR_Handler+0x4aa>
 800321c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	429a      	cmp	r2, r3
 8003224:	d206      	bcs.n	8003234 <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f007 fba1 	bl	800a974 <HAL_PCD_DataOutStageCallback>
 8003232:	e005      	b.n	8003240 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800323a:	4618      	mov	r0, r3
 800323c:	f004 f989 	bl	8007552 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003240:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003246:	2b00      	cmp	r3, #0
 8003248:	d074      	beq.n	8003334 <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 800324a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4413      	add	r3, r2
 800325c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003278:	843b      	strh	r3, [r7, #32]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	441a      	add	r2, r3
 8003288:	8c3b      	ldrh	r3, [r7, #32]
 800328a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800328e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003292:	b29b      	uxth	r3, r3
 8003294:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	78db      	ldrb	r3, [r3, #3]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d144      	bne.n	8003328 <PCD_EP_ISR_Handler+0x5ac>
 800329e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d13f      	bne.n	8003328 <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	4413      	add	r3, r2
 80032c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032cc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	8bfb      	ldrh	r3, [r7, #30]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d906      	bls.n	80032e6 <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	699a      	ldr	r2, [r3, #24]
 80032dc:	8bfb      	ldrh	r3, [r7, #30]
 80032de:	1ad2      	subs	r2, r2, r3
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	619a      	str	r2, [r3, #24]
 80032e4:	e002      	b.n	80032ec <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	2200      	movs	r2, #0
 80032ea:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	4619      	mov	r1, r3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f007 fb55 	bl	800a9aa <HAL_PCD_DataInStageCallback>
 8003300:	e018      	b.n	8003334 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	8bfb      	ldrh	r3, [r7, #30]
 8003308:	441a      	add	r2, r3
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	69da      	ldr	r2, [r3, #28]
 8003312:	8bfb      	ldrh	r3, [r7, #30]
 8003314:	441a      	add	r2, r3
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003320:	4618      	mov	r0, r3
 8003322:	f004 f916 	bl	8007552 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003326:	e005      	b.n	8003334 <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003328:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800332a:	461a      	mov	r2, r3
 800332c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f917 	bl	8003562 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800333c:	b29b      	uxth	r3, r3
 800333e:	b21b      	sxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	f6ff ad20 	blt.w	8002d86 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3738      	adds	r7, #56	; 0x38
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	4613      	mov	r3, r2
 800335c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d07c      	beq.n	8003462 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003370:	b29b      	uxth	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4413      	add	r3, r2
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	4413      	add	r3, r2
 8003382:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800338c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	8b7b      	ldrh	r3, [r7, #26]
 8003394:	429a      	cmp	r2, r3
 8003396:	d306      	bcc.n	80033a6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	699a      	ldr	r2, [r3, #24]
 800339c:	8b7b      	ldrh	r3, [r7, #26]
 800339e:	1ad2      	subs	r2, r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	619a      	str	r2, [r3, #24]
 80033a4:	e002      	b.n	80033ac <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d123      	bne.n	80033fc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	833b      	strh	r3, [r7, #24]
 80033d0:	8b3b      	ldrh	r3, [r7, #24]
 80033d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033d6:	833b      	strh	r3, [r7, #24]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	441a      	add	r2, r3
 80033e6:	8b3b      	ldrh	r3, [r7, #24]
 80033e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d01f      	beq.n	8003446 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	b29b      	uxth	r3, r3
 8003418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003420:	82fb      	strh	r3, [r7, #22]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	441a      	add	r2, r3
 8003430:	8afb      	ldrh	r3, [r7, #22]
 8003432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800343a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800343e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003442:	b29b      	uxth	r3, r3
 8003444:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003446:	8b7b      	ldrh	r3, [r7, #26]
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 8085 	beq.w	8003558 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	6959      	ldr	r1, [r3, #20]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	891a      	ldrh	r2, [r3, #8]
 800345a:	8b7b      	ldrh	r3, [r7, #26]
 800345c:	f005 fcec 	bl	8008e38 <USB_ReadPMA>
 8003460:	e07a      	b.n	8003558 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800346a:	b29b      	uxth	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	4413      	add	r3, r2
 800347c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003486:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	699a      	ldr	r2, [r3, #24]
 800348c:	8b7b      	ldrh	r3, [r7, #26]
 800348e:	429a      	cmp	r2, r3
 8003490:	d306      	bcc.n	80034a0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	8b7b      	ldrh	r3, [r7, #26]
 8003498:	1ad2      	subs	r2, r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	619a      	str	r2, [r3, #24]
 800349e:	e002      	b.n	80034a6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2200      	movs	r2, #0
 80034a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d123      	bne.n	80034f6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c8:	83fb      	strh	r3, [r7, #30]
 80034ca:	8bfb      	ldrh	r3, [r7, #30]
 80034cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034d0:	83fb      	strh	r3, [r7, #30]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	441a      	add	r2, r3
 80034e0:	8bfb      	ldrh	r3, [r7, #30]
 80034e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034f6:	88fb      	ldrh	r3, [r7, #6]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d11f      	bne.n	8003540 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	83bb      	strh	r3, [r7, #28]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	441a      	add	r2, r3
 800352a:	8bbb      	ldrh	r3, [r7, #28]
 800352c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003538:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800353c:	b29b      	uxth	r3, r3
 800353e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003540:	8b7b      	ldrh	r3, [r7, #26]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	6959      	ldr	r1, [r3, #20]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	895a      	ldrh	r2, [r3, #10]
 8003552:	8b7b      	ldrh	r3, [r7, #26]
 8003554:	f005 fc70 	bl	8008e38 <USB_ReadPMA>
    }
  }

  return count;
 8003558:	8b7b      	ldrh	r3, [r7, #26]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3720      	adds	r7, #32
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b0a2      	sub	sp, #136	; 0x88
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	4613      	mov	r3, r2
 800356e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 81c5 	beq.w	8003906 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003584:	b29b      	uxth	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	4413      	add	r3, r2
 8003596:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	699a      	ldr	r2, [r3, #24]
 80035a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d907      	bls.n	80035c0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	699a      	ldr	r2, [r3, #24]
 80035b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035b8:	1ad2      	subs	r2, r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	619a      	str	r2, [r3, #24]
 80035be:	e002      	b.n	80035c6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2200      	movs	r2, #0
 80035c4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f040 80b9 	bne.w	8003742 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d126      	bne.n	8003626 <HAL_PCD_EP_DB_Transmit+0xc4>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	4413      	add	r3, r2
 80035ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	00da      	lsls	r2, r3, #3
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	4413      	add	r3, r2
 80035fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b29b      	uxth	r3, r3
 8003606:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800360a:	b29a      	uxth	r2, r3
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	801a      	strh	r2, [r3, #0]
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	b29b      	uxth	r3, r3
 8003616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800361a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800361e:	b29a      	uxth	r2, r3
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	801a      	strh	r2, [r3, #0]
 8003624:	e01a      	b.n	800365c <HAL_PCD_EP_DB_Transmit+0xfa>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	785b      	ldrb	r3, [r3, #1]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d116      	bne.n	800365c <HAL_PCD_EP_DB_Transmit+0xfa>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	633b      	str	r3, [r7, #48]	; 0x30
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800363c:	b29b      	uxth	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	4413      	add	r3, r2
 8003644:	633b      	str	r3, [r7, #48]	; 0x30
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	00da      	lsls	r2, r3, #3
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	4413      	add	r3, r2
 8003650:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003658:	2200      	movs	r2, #0
 800365a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	623b      	str	r3, [r7, #32]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	785b      	ldrb	r3, [r3, #1]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d126      	bne.n	80036b8 <HAL_PCD_EP_DB_Transmit+0x156>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003678:	b29b      	uxth	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	4413      	add	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	00da      	lsls	r2, r3, #3
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	4413      	add	r3, r2
 800368c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	b29b      	uxth	r3, r3
 8003698:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800369c:	b29a      	uxth	r2, r3
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	801a      	strh	r2, [r3, #0]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	801a      	strh	r2, [r3, #0]
 80036b6:	e017      	b.n	80036e8 <HAL_PCD_EP_DB_Transmit+0x186>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	785b      	ldrb	r3, [r3, #1]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d113      	bne.n	80036e8 <HAL_PCD_EP_DB_Transmit+0x186>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	4413      	add	r3, r2
 80036d0:	623b      	str	r3, [r7, #32]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	00da      	lsls	r2, r3, #3
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	4413      	add	r3, r2
 80036dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	2200      	movs	r2, #0
 80036e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	4619      	mov	r1, r3
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f007 f95b 	bl	800a9aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 82d2 	beq.w	8003ca4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	b29b      	uxth	r3, r3
 8003712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	827b      	strh	r3, [r7, #18]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	441a      	add	r2, r3
 800372a:	8a7b      	ldrh	r3, [r7, #18]
 800372c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800373c:	b29b      	uxth	r3, r3
 800373e:	8013      	strh	r3, [r2, #0]
 8003740:	e2b0      	b.n	8003ca4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d021      	beq.n	8003790 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	b29b      	uxth	r3, r3
 800375e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003766:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	441a      	add	r2, r3
 8003778:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800377c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800378c:	b29b      	uxth	r3, r3
 800378e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003796:	2b01      	cmp	r3, #1
 8003798:	f040 8284 	bne.w	8003ca4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037a4:	441a      	add	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037b2:	441a      	add	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	6a1a      	ldr	r2, [r3, #32]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d309      	bcc.n	80037d8 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	6a1a      	ldr	r2, [r3, #32]
 80037ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d0:	1ad2      	subs	r2, r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	621a      	str	r2, [r3, #32]
 80037d6:	e015      	b.n	8003804 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d107      	bne.n	80037f0 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 80037e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037ee:	e009      	b.n	8003804 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2200      	movs	r2, #0
 8003802:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	785b      	ldrb	r3, [r3, #1]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d155      	bne.n	80038b8 <HAL_PCD_EP_DB_Transmit+0x356>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	63bb      	str	r3, [r7, #56]	; 0x38
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800381a:	b29b      	uxth	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003820:	4413      	add	r3, r2
 8003822:	63bb      	str	r3, [r7, #56]	; 0x38
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	00da      	lsls	r2, r3, #3
 800382a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382c:	4413      	add	r3, r2
 800382e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
 8003834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003836:	2b00      	cmp	r3, #0
 8003838:	d112      	bne.n	8003860 <HAL_PCD_EP_DB_Transmit+0x2fe>
 800383a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003844:	b29a      	uxth	r2, r3
 8003846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003848:	801a      	strh	r2, [r3, #0]
 800384a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003858:	b29a      	uxth	r2, r3
 800385a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385c:	801a      	strh	r2, [r3, #0]
 800385e:	e047      	b.n	80038f0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003862:	2b3e      	cmp	r3, #62	; 0x3e
 8003864:	d811      	bhi.n	800388a <HAL_PCD_EP_DB_Transmit+0x328>
 8003866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	64bb      	str	r3, [r7, #72]	; 0x48
 800386c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_PCD_EP_DB_Transmit+0x31a>
 8003876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003878:	3301      	adds	r3, #1
 800387a:	64bb      	str	r3, [r7, #72]	; 0x48
 800387c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800387e:	b29b      	uxth	r3, r3
 8003880:	029b      	lsls	r3, r3, #10
 8003882:	b29a      	uxth	r2, r3
 8003884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003886:	801a      	strh	r2, [r3, #0]
 8003888:	e032      	b.n	80038f0 <HAL_PCD_EP_DB_Transmit+0x38e>
 800388a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800388c:	095b      	lsrs	r3, r3, #5
 800388e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <HAL_PCD_EP_DB_Transmit+0x33e>
 800389a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389c:	3b01      	subs	r3, #1
 800389e:	64bb      	str	r3, [r7, #72]	; 0x48
 80038a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	029b      	lsls	r3, r3, #10
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b4:	801a      	strh	r2, [r3, #0]
 80038b6:	e01b      	b.n	80038f0 <HAL_PCD_EP_DB_Transmit+0x38e>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	785b      	ldrb	r3, [r3, #1]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d117      	bne.n	80038f0 <HAL_PCD_EP_DB_Transmit+0x38e>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	643b      	str	r3, [r7, #64]	; 0x40
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d4:	4413      	add	r3, r2
 80038d6:	643b      	str	r3, [r7, #64]	; 0x40
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	00da      	lsls	r2, r3, #3
 80038de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e0:	4413      	add	r3, r2
 80038e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	6959      	ldr	r1, [r3, #20]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	891a      	ldrh	r2, [r3, #8]
 80038fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f005 fa58 	bl	8008db4 <USB_WritePMA>
 8003904:	e1ce      	b.n	8003ca4 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800390e:	b29b      	uxth	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4413      	add	r3, r2
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	4413      	add	r3, r2
 8003920:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800392a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	699a      	ldr	r2, [r3, #24]
 8003932:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003936:	429a      	cmp	r2, r3
 8003938:	d307      	bcc.n	800394a <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003942:	1ad2      	subs	r2, r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	619a      	str	r2, [r3, #24]
 8003948:	e002      	b.n	8003950 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2200      	movs	r2, #0
 800394e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f040 80c4 	bne.w	8003ae2 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	785b      	ldrb	r3, [r3, #1]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d126      	bne.n	80039b0 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003970:	b29b      	uxth	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003976:	4413      	add	r3, r2
 8003978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	00da      	lsls	r2, r3, #3
 8003980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003982:	4413      	add	r3, r2
 8003984:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003988:	66bb      	str	r3, [r7, #104]	; 0x68
 800398a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003994:	b29a      	uxth	r2, r3
 8003996:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003998:	801a      	strh	r2, [r3, #0]
 800399a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039ac:	801a      	strh	r2, [r3, #0]
 80039ae:	e01a      	b.n	80039e6 <HAL_PCD_EP_DB_Transmit+0x484>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	785b      	ldrb	r3, [r3, #1]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d116      	bne.n	80039e6 <HAL_PCD_EP_DB_Transmit+0x484>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	677b      	str	r3, [r7, #116]	; 0x74
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039cc:	4413      	add	r3, r2
 80039ce:	677b      	str	r3, [r7, #116]	; 0x74
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	00da      	lsls	r2, r3, #3
 80039d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d8:	4413      	add	r3, r2
 80039da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039de:	673b      	str	r3, [r7, #112]	; 0x70
 80039e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039e2:	2200      	movs	r2, #0
 80039e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	785b      	ldrb	r3, [r3, #1]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d12f      	bne.n	8003a54 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	00da      	lsls	r2, r3, #3
 8003a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a38:	801a      	strh	r2, [r3, #0]
 8003a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a50:	801a      	strh	r2, [r3, #0]
 8003a52:	e017      	b.n	8003a84 <HAL_PCD_EP_DB_Transmit+0x522>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	785b      	ldrb	r3, [r3, #1]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d113      	bne.n	8003a84 <HAL_PCD_EP_DB_Transmit+0x522>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	461a      	mov	r2, r3
 8003a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a6a:	4413      	add	r3, r2
 8003a6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	00da      	lsls	r2, r3, #3
 8003a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a76:	4413      	add	r3, r2
 8003a78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a80:	2200      	movs	r2, #0
 8003a82:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	4619      	mov	r1, r3
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f006 ff8d 	bl	800a9aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f040 8104 	bne.w	8003ca4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	441a      	add	r2, r3
 8003ac8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	8013      	strh	r3, [r2, #0]
 8003ae0:	e0e0      	b.n	8003ca4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d121      	bne.n	8003b30 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	441a      	add	r2, r3
 8003b18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	f040 80b4 	bne.w	8003ca4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b44:	441a      	add	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b52:	441a      	add	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	6a1a      	ldr	r2, [r3, #32]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d309      	bcc.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	6a1a      	ldr	r2, [r3, #32]
 8003b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b70:	1ad2      	subs	r2, r2, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	621a      	str	r2, [r3, #32]
 8003b76:	e015      	b.n	8003ba4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d107      	bne.n	8003b90 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8003b80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b8e:	e009      	b.n	8003ba4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	667b      	str	r3, [r7, #100]	; 0x64
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	785b      	ldrb	r3, [r3, #1]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d155      	bne.n	8003c5e <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc6:	4413      	add	r3, r2
 8003bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	00da      	lsls	r2, r3, #3
 8003bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d112      	bne.n	8003c06 <HAL_PCD_EP_DB_Transmit+0x6a4>
 8003be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bee:	801a      	strh	r2, [r3, #0]
 8003bf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c02:	801a      	strh	r2, [r3, #0]
 8003c04:	e044      	b.n	8003c90 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c08:	2b3e      	cmp	r3, #62	; 0x3e
 8003c0a:	d811      	bhi.n	8003c30 <HAL_PCD_EP_DB_Transmit+0x6ce>
 8003c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	657b      	str	r3, [r7, #84]	; 0x54
 8003c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <HAL_PCD_EP_DB_Transmit+0x6c0>
 8003c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c1e:	3301      	adds	r3, #1
 8003c20:	657b      	str	r3, [r7, #84]	; 0x54
 8003c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	029b      	lsls	r3, r3, #10
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c2c:	801a      	strh	r2, [r3, #0]
 8003c2e:	e02f      	b.n	8003c90 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	657b      	str	r3, [r7, #84]	; 0x54
 8003c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <HAL_PCD_EP_DB_Transmit+0x6e4>
 8003c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c42:	3b01      	subs	r3, #1
 8003c44:	657b      	str	r3, [r7, #84]	; 0x54
 8003c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	029b      	lsls	r3, r3, #10
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c5a:	801a      	strh	r2, [r3, #0]
 8003c5c:	e018      	b.n	8003c90 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	785b      	ldrb	r3, [r3, #1]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d114      	bne.n	8003c90 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c74:	4413      	add	r3, r2
 8003c76:	667b      	str	r3, [r7, #100]	; 0x64
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	00da      	lsls	r2, r3, #3
 8003c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c80:	4413      	add	r3, r2
 8003c82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c86:	663b      	str	r3, [r7, #96]	; 0x60
 8003c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c8e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	6959      	ldr	r1, [r3, #20]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	895a      	ldrh	r2, [r3, #10]
 8003c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f005 f888 	bl	8008db4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cbe:	823b      	strh	r3, [r7, #16]
 8003cc0:	8a3b      	ldrh	r3, [r7, #16]
 8003cc2:	f083 0310 	eor.w	r3, r3, #16
 8003cc6:	823b      	strh	r3, [r7, #16]
 8003cc8:	8a3b      	ldrh	r3, [r7, #16]
 8003cca:	f083 0320 	eor.w	r3, r3, #32
 8003cce:	823b      	strh	r3, [r7, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	441a      	add	r2, r3
 8003cde:	8a3b      	ldrh	r3, [r7, #16]
 8003ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3788      	adds	r7, #136	; 0x88
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b087      	sub	sp, #28
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	607b      	str	r3, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	817b      	strh	r3, [r7, #10]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d10:	897b      	ldrh	r3, [r7, #10]
 8003d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00b      	beq.n	8003d34 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d1c:	897b      	ldrh	r3, [r7, #10]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e009      	b.n	8003d48 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d34:	897a      	ldrh	r2, [r7, #10]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4413      	add	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d48:	893b      	ldrh	r3, [r7, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d107      	bne.n	8003d5e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2200      	movs	r2, #0
 8003d52:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	80da      	strh	r2, [r3, #6]
 8003d5c:	e00b      	b.n	8003d76 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2201      	movs	r2, #1
 8003d62:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	0c1b      	lsrs	r3, r3, #16
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	f043 0302 	orr.w	r3, r3, #2
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ddc:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a04      	ldr	r2, [pc, #16]	; (8003df4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de6:	6013      	str	r3, [r2, #0]
}
 8003de8:	bf00      	nop
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40007000 	.word	0x40007000

08003df8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <HAL_PWREx_GetVoltageRange+0x18>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40007000 	.word	0x40007000

08003e14 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003e1c:	4b27      	ldr	r3, [pc, #156]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e24:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003e26:	f000 f871 	bl	8003f0c <HAL_PWREx_SMPS_GetEffectiveMode>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e30:	d101      	bne.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e03e      	b.n	8003eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003e36:	4b21      	ldr	r3, [pc, #132]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e42:	d101      	bne.n	8003e48 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e035      	b.n	8003eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d101      	bne.n	8003e54 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	e02f      	b.n	8003eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003e54:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003e5c:	4917      	ldr	r1, [pc, #92]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003e64:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	4a16      	ldr	r2, [pc, #88]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	09db      	lsrs	r3, r3, #7
 8003e72:	2232      	movs	r2, #50	; 0x32
 8003e74:	fb02 f303 	mul.w	r3, r2, r3
 8003e78:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	08db      	lsrs	r3, r3, #3
 8003e80:	3301      	adds	r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e84:	e002      	b.n	8003e8c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e98:	d102      	bne.n	8003ea0 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f2      	bne.n	8003e86 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eac:	d101      	bne.n	8003eb2 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e000      	b.n	8003eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40007000 	.word	0x40007000
 8003ec0:	20000000 	.word	0x20000000
 8003ec4:	0a7c5ac5 	.word	0x0a7c5ac5
 8003ec8:	cccccccd 	.word	0xcccccccd

08003ecc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eda:	6053      	str	r3, [r2, #4]
}
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40007000 	.word	0x40007000

08003eec <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003efa:	6053      	str	r3, [r2, #4]
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40007000 	.word	0x40007000

08003f0c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003f12:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8003f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	e00a      	b.n	8003f40 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d103      	bne.n	8003f3c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	e001      	b.n	8003f40 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003f40:	687b      	ldr	r3, [r7, #4]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40007000 	.word	0x40007000

08003f54 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d102      	bne.n	8003f68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	f000 bcd0 	b.w	8004908 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f68:	4ba3      	ldr	r3, [pc, #652]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f72:	4ba1      	ldr	r3, [pc, #644]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 80e9 	beq.w	800415c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d006      	beq.n	8003f9e <HAL_RCC_OscConfig+0x4a>
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b0c      	cmp	r3, #12
 8003f94:	f040 8083 	bne.w	800409e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d17f      	bne.n	800409e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f9e:	4b96      	ldr	r3, [pc, #600]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d006      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x64>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f000 bca8 	b.w	8004908 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fbc:	4b8e      	ldr	r3, [pc, #568]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d004      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x7e>
 8003fc8:	4b8b      	ldr	r3, [pc, #556]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fd0:	e005      	b.n	8003fde <HAL_RCC_OscConfig+0x8a>
 8003fd2:	4b89      	ldr	r3, [pc, #548]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8003fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d224      	bcs.n	800402c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fe98 	bl	8004d1c <RCC_SetFlashLatencyFromMSIRange>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f000 bc88 	b.w	8004908 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ff8:	4b7f      	ldr	r3, [pc, #508]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a7e      	ldr	r2, [pc, #504]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8003ffe:	f043 0308 	orr.w	r3, r3, #8
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	4b7c      	ldr	r3, [pc, #496]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	4979      	ldr	r1, [pc, #484]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8004012:	4313      	orrs	r3, r2
 8004014:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004016:	4b78      	ldr	r3, [pc, #480]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	4974      	ldr	r1, [pc, #464]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]
 800402a:	e026      	b.n	800407a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800402c:	4b72      	ldr	r3, [pc, #456]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a71      	ldr	r2, [pc, #452]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8004032:	f043 0308 	orr.w	r3, r3, #8
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	4b6f      	ldr	r3, [pc, #444]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	496c      	ldr	r1, [pc, #432]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8004046:	4313      	orrs	r3, r2
 8004048:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800404a:	4b6b      	ldr	r3, [pc, #428]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	4967      	ldr	r1, [pc, #412]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 800405a:	4313      	orrs	r3, r2
 800405c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fe57 	bl	8004d1c <RCC_SetFlashLatencyFromMSIRange>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f000 bc47 	b.w	8004908 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800407a:	f000 fe13 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 800407e:	4603      	mov	r3, r0
 8004080:	4a5e      	ldr	r2, [pc, #376]	; (80041fc <HAL_RCC_OscConfig+0x2a8>)
 8004082:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004084:	4b5e      	ldr	r3, [pc, #376]	; (8004200 <HAL_RCC_OscConfig+0x2ac>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fc ff4f 	bl	8000f2c <HAL_InitTick>
 800408e:	4603      	mov	r3, r0
 8004090:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d060      	beq.n	800415a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	f000 bc35 	b.w	8004908 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d039      	beq.n	800411a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040a6:	4b54      	ldr	r3, [pc, #336]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a53      	ldr	r2, [pc, #332]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040b2:	f7fc ff8b 	bl	8000fcc <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040b8:	e00f      	b.n	80040da <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040ba:	f7fc ff87 	bl	8000fcc <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d908      	bls.n	80040da <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040c8:	4b4b      	ldr	r3, [pc, #300]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d102      	bne.n	80040da <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	f000 bc17 	b.w	8004908 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040da:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0e9      	beq.n	80040ba <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040e6:	4b44      	ldr	r3, [pc, #272]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a43      	ldr	r2, [pc, #268]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 80040ec:	f043 0308 	orr.w	r3, r3, #8
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	493e      	ldr	r1, [pc, #248]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8004100:	4313      	orrs	r3, r2
 8004102:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004104:	4b3c      	ldr	r3, [pc, #240]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	4939      	ldr	r1, [pc, #228]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8004114:	4313      	orrs	r3, r2
 8004116:	604b      	str	r3, [r1, #4]
 8004118:	e020      	b.n	800415c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800411a:	4b37      	ldr	r3, [pc, #220]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a36      	ldr	r2, [pc, #216]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004126:	f7fc ff51 	bl	8000fcc <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800412c:	e00e      	b.n	800414c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800412e:	f7fc ff4d 	bl	8000fcc <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d907      	bls.n	800414c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800413c:	4b2e      	ldr	r3, [pc, #184]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e3dd      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800414c:	4b2a      	ldr	r3, [pc, #168]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1ea      	bne.n	800412e <HAL_RCC_OscConfig+0x1da>
 8004158:	e000      	b.n	800415c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800415a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d07e      	beq.n	8004266 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b08      	cmp	r3, #8
 800416c:	d005      	beq.n	800417a <HAL_RCC_OscConfig+0x226>
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	2b0c      	cmp	r3, #12
 8004172:	d10e      	bne.n	8004192 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2b03      	cmp	r3, #3
 8004178:	d10b      	bne.n	8004192 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800417a:	4b1f      	ldr	r3, [pc, #124]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d06e      	beq.n	8004264 <HAL_RCC_OscConfig+0x310>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d16a      	bne.n	8004264 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e3ba      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419a:	d106      	bne.n	80041aa <HAL_RCC_OscConfig+0x256>
 800419c:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a15      	ldr	r2, [pc, #84]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 80041a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	e01d      	b.n	80041e6 <HAL_RCC_OscConfig+0x292>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b2:	d10c      	bne.n	80041ce <HAL_RCC_OscConfig+0x27a>
 80041b4:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a0f      	ldr	r2, [pc, #60]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 80041ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	4b0d      	ldr	r3, [pc, #52]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a0c      	ldr	r2, [pc, #48]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 80041c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	e00b      	b.n	80041e6 <HAL_RCC_OscConfig+0x292>
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a09      	ldr	r2, [pc, #36]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 80041d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a06      	ldr	r2, [pc, #24]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 80041e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d020      	beq.n	8004230 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ee:	f7fc feed 	bl	8000fcc <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041f4:	e015      	b.n	8004222 <HAL_RCC_OscConfig+0x2ce>
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	20000000 	.word	0x20000000
 8004200:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004204:	f7fc fee2 	bl	8000fcc <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	; 0x64
 8004210:	d907      	bls.n	8004222 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004212:	4b9f      	ldr	r3, [pc, #636]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e372      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004222:	4b9b      	ldr	r3, [pc, #620]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0ea      	beq.n	8004204 <HAL_RCC_OscConfig+0x2b0>
 800422e:	e01a      	b.n	8004266 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fc fecc 	bl	8000fcc <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004236:	e00e      	b.n	8004256 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004238:	f7fc fec8 	bl	8000fcc <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	; 0x64
 8004244:	d907      	bls.n	8004256 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004246:	4b92      	ldr	r3, [pc, #584]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e358      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004256:	4b8e      	ldr	r3, [pc, #568]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1ea      	bne.n	8004238 <HAL_RCC_OscConfig+0x2e4>
 8004262:	e000      	b.n	8004266 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d06c      	beq.n	800434c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b04      	cmp	r3, #4
 8004276:	d005      	beq.n	8004284 <HAL_RCC_OscConfig+0x330>
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2b0c      	cmp	r3, #12
 800427c:	d119      	bne.n	80042b2 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d116      	bne.n	80042b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004284:	4b82      	ldr	r3, [pc, #520]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_RCC_OscConfig+0x348>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e335      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429c:	4b7c      	ldr	r3, [pc, #496]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	061b      	lsls	r3, r3, #24
 80042aa:	4979      	ldr	r1, [pc, #484]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042b0:	e04c      	b.n	800434c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d029      	beq.n	800430e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042ba:	4b75      	ldr	r3, [pc, #468]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a74      	ldr	r2, [pc, #464]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 80042c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c6:	f7fc fe81 	bl	8000fcc <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042cc:	e00e      	b.n	80042ec <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ce:	f7fc fe7d 	bl	8000fcc <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d907      	bls.n	80042ec <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042dc:	4b6c      	ldr	r3, [pc, #432]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e30d      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042ec:	4b68      	ldr	r3, [pc, #416]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0ea      	beq.n	80042ce <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f8:	4b65      	ldr	r3, [pc, #404]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	061b      	lsls	r3, r3, #24
 8004306:	4962      	ldr	r1, [pc, #392]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 8004308:	4313      	orrs	r3, r2
 800430a:	604b      	str	r3, [r1, #4]
 800430c:	e01e      	b.n	800434c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430e:	4b60      	ldr	r3, [pc, #384]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a5f      	ldr	r2, [pc, #380]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 8004314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431a:	f7fc fe57 	bl	8000fcc <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004320:	e00e      	b.n	8004340 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004322:	f7fc fe53 	bl	8000fcc <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d907      	bls.n	8004340 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004330:	4b57      	ldr	r3, [pc, #348]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e2e3      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004340:	4b53      	ldr	r3, [pc, #332]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1ea      	bne.n	8004322 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d05f      	beq.n	8004418 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d038      	beq.n	80043d2 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d108      	bne.n	800437a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004368:	4b49      	ldr	r3, [pc, #292]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 800436a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800436e:	4a48      	ldr	r2, [pc, #288]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 8004370:	f023 0310 	bic.w	r3, r3, #16
 8004374:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004378:	e007      	b.n	800438a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800437a:	4b45      	ldr	r3, [pc, #276]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 800437c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004380:	4a43      	ldr	r2, [pc, #268]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 8004382:	f043 0310 	orr.w	r3, r3, #16
 8004386:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438a:	4b41      	ldr	r3, [pc, #260]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 800438c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004390:	4a3f      	ldr	r2, [pc, #252]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439a:	f7fc fe17 	bl	8000fcc <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043a0:	e00f      	b.n	80043c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a2:	f7fc fe13 	bl	8000fcc <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b07      	cmp	r3, #7
 80043ae:	d908      	bls.n	80043c2 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043b0:	4b37      	ldr	r3, [pc, #220]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 80043b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e2a2      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043c2:	4b33      	ldr	r3, [pc, #204]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 80043c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0e8      	beq.n	80043a2 <HAL_RCC_OscConfig+0x44e>
 80043d0:	e022      	b.n	8004418 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043d2:	4b2f      	ldr	r3, [pc, #188]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 80043d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d8:	4a2d      	ldr	r2, [pc, #180]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e2:	f7fc fdf3 	bl	8000fcc <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043e8:	e00f      	b.n	800440a <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ea:	f7fc fdef 	bl	8000fcc <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b07      	cmp	r3, #7
 80043f6:	d908      	bls.n	800440a <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043f8:	4b25      	ldr	r3, [pc, #148]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 80043fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e27e      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800440a:	4b21      	ldr	r3, [pc, #132]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 800440c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e8      	bne.n	80043ea <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8131 	beq.w	8004688 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004426:	2300      	movs	r3, #0
 8004428:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800442a:	4b19      	ldr	r3, [pc, #100]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10d      	bne.n	8004452 <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004436:	4b16      	ldr	r3, [pc, #88]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 8004438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443a:	4a15      	ldr	r2, [pc, #84]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 800443c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004440:	6593      	str	r3, [r2, #88]	; 0x58
 8004442:	4b13      	ldr	r3, [pc, #76]	; (8004490 <HAL_RCC_OscConfig+0x53c>)
 8004444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800444e:	2301      	movs	r3, #1
 8004450:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004452:	4b10      	ldr	r3, [pc, #64]	; (8004494 <HAL_RCC_OscConfig+0x540>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d122      	bne.n	80044a4 <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800445e:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <HAL_RCC_OscConfig+0x540>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a0c      	ldr	r2, [pc, #48]	; (8004494 <HAL_RCC_OscConfig+0x540>)
 8004464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446a:	f7fc fdaf 	bl	8000fcc <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004470:	e012      	b.n	8004498 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004472:	f7fc fdab 	bl	8000fcc <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d90b      	bls.n	8004498 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004480:	4b04      	ldr	r3, [pc, #16]	; (8004494 <HAL_RCC_OscConfig+0x540>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d105      	bne.n	8004498 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e23b      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
 8004490:	40021000 	.word	0x40021000
 8004494:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004498:	4bb8      	ldr	r3, [pc, #736]	; (800477c <HAL_RCC_OscConfig+0x828>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0e6      	beq.n	8004472 <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01f      	beq.n	80044f0 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d010      	beq.n	80044de <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80044bc:	4bb0      	ldr	r3, [pc, #704]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	4aaf      	ldr	r2, [pc, #700]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80044c4:	f043 0304 	orr.w	r3, r3, #4
 80044c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044cc:	4bac      	ldr	r3, [pc, #688]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	4aab      	ldr	r2, [pc, #684]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044dc:	e018      	b.n	8004510 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044de:	4ba8      	ldr	r3, [pc, #672]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e4:	4aa6      	ldr	r2, [pc, #664]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ee:	e00f      	b.n	8004510 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044f0:	4ba3      	ldr	r3, [pc, #652]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	4aa2      	ldr	r2, [pc, #648]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004500:	4b9f      	ldr	r3, [pc, #636]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	4a9e      	ldr	r2, [pc, #632]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 8004508:	f023 0304 	bic.w	r3, r3, #4
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d068      	beq.n	80045ea <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fc fd58 	bl	8000fcc <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451e:	e011      	b.n	8004544 <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004520:	f7fc fd54 	bl	8000fcc <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	; 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d908      	bls.n	8004544 <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004532:	4b93      	ldr	r3, [pc, #588]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e1e1      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004544:	4b8e      	ldr	r3, [pc, #568]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0e6      	beq.n	8004520 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455a:	2b00      	cmp	r3, #0
 800455c:	d022      	beq.n	80045a4 <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800455e:	4b88      	ldr	r3, [pc, #544]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004564:	4a86      	ldr	r2, [pc, #536]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 8004566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800456a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800456e:	e011      	b.n	8004594 <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004570:	f7fc fd2c 	bl	8000fcc <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	f241 3288 	movw	r2, #5000	; 0x1388
 800457e:	4293      	cmp	r3, r2
 8004580:	d908      	bls.n	8004594 <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004582:	4b7f      	ldr	r3, [pc, #508]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e1b9      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004594:	4b7a      	ldr	r3, [pc, #488]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0e6      	beq.n	8004570 <HAL_RCC_OscConfig+0x61c>
 80045a2:	e068      	b.n	8004676 <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80045a4:	4b76      	ldr	r3, [pc, #472]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	4a75      	ldr	r2, [pc, #468]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80045ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045b4:	e011      	b.n	80045da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b6:	f7fc fd09 	bl	8000fcc <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d908      	bls.n	80045da <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045c8:	4b6d      	ldr	r3, [pc, #436]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e196      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045da:	4b69      	ldr	r3, [pc, #420]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e6      	bne.n	80045b6 <HAL_RCC_OscConfig+0x662>
 80045e8:	e045      	b.n	8004676 <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ea:	f7fc fcef 	bl	8000fcc <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045f0:	e011      	b.n	8004616 <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f2:	f7fc fceb 	bl	8000fcc <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004600:	4293      	cmp	r3, r2
 8004602:	d908      	bls.n	8004616 <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004604:	4b5e      	ldr	r3, [pc, #376]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e178      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004616:	4b5a      	ldr	r3, [pc, #360]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e6      	bne.n	80045f2 <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004624:	4b56      	ldr	r3, [pc, #344]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462e:	2b00      	cmp	r3, #0
 8004630:	d021      	beq.n	8004676 <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004632:	4b53      	ldr	r3, [pc, #332]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 8004634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004638:	4a51      	ldr	r2, [pc, #324]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 800463a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800463e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004642:	e011      	b.n	8004668 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004644:	f7fc fcc2 	bl	8000fcc <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d908      	bls.n	8004668 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004656:	4b4a      	ldr	r3, [pc, #296]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e14f      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004668:	4b45      	ldr	r3, [pc, #276]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 800466a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e6      	bne.n	8004644 <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004676:	7ffb      	ldrb	r3, [r7, #31]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d105      	bne.n	8004688 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800467c:	4b40      	ldr	r3, [pc, #256]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 800467e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004680:	4a3f      	ldr	r2, [pc, #252]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 8004682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004686:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d04a      	beq.n	800472a <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	2b00      	cmp	r3, #0
 800469a:	d023      	beq.n	80046e4 <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800469c:	4b38      	ldr	r3, [pc, #224]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 800469e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046a2:	4a37      	ldr	r2, [pc, #220]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ac:	f7fc fc8e 	bl	8000fcc <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046b2:	e00f      	b.n	80046d4 <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046b4:	f7fc fc8a 	bl	8000fcc <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d908      	bls.n	80046d4 <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046c2:	4b2f      	ldr	r3, [pc, #188]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80046c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e119      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046d4:	4b2a      	ldr	r3, [pc, #168]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80046d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0e8      	beq.n	80046b4 <HAL_RCC_OscConfig+0x760>
 80046e2:	e022      	b.n	800472a <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046e4:	4b26      	ldr	r3, [pc, #152]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80046e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046ea:	4a25      	ldr	r2, [pc, #148]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f4:	f7fc fc6a 	bl	8000fcc <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046fa:	e00f      	b.n	800471c <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046fc:	f7fc fc66 	bl	8000fcc <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d908      	bls.n	800471c <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800470a:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 800470c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e0f5      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800471c:	4b18      	ldr	r3, [pc, #96]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 800471e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e8      	bne.n	80046fc <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 80e9 	beq.w	8004906 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004734:	4b12      	ldr	r3, [pc, #72]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 030c 	and.w	r3, r3, #12
 800473c:	2b0c      	cmp	r3, #12
 800473e:	f000 80a3 	beq.w	8004888 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	2b02      	cmp	r3, #2
 8004748:	d16a      	bne.n	8004820 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474a:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a0c      	ldr	r2, [pc, #48]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 8004750:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004756:	f7fc fc39 	bl	8000fcc <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800475c:	e012      	b.n	8004784 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475e:	f7fc fc35 	bl	8000fcc <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d90b      	bls.n	8004784 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800476c:	4b04      	ldr	r3, [pc, #16]	; (8004780 <HAL_RCC_OscConfig+0x82c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e0c5      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
 800477c:	40007000 	.word	0x40007000
 8004780:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004784:	4b62      	ldr	r3, [pc, #392]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e6      	bne.n	800475e <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004790:	4b5f      	ldr	r3, [pc, #380]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	4b5f      	ldr	r3, [pc, #380]	; (8004914 <HAL_RCC_OscConfig+0x9c0>)
 8004796:	4013      	ands	r3, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047a0:	3a01      	subs	r2, #1
 80047a2:	0112      	lsls	r2, r2, #4
 80047a4:	4311      	orrs	r1, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047aa:	0212      	lsls	r2, r2, #8
 80047ac:	4311      	orrs	r1, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047b2:	0852      	lsrs	r2, r2, #1
 80047b4:	3a01      	subs	r2, #1
 80047b6:	0552      	lsls	r2, r2, #21
 80047b8:	4311      	orrs	r1, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047be:	0852      	lsrs	r2, r2, #1
 80047c0:	3a01      	subs	r2, #1
 80047c2:	0652      	lsls	r2, r2, #25
 80047c4:	4311      	orrs	r1, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047ca:	06d2      	lsls	r2, r2, #27
 80047cc:	430a      	orrs	r2, r1
 80047ce:	4950      	ldr	r1, [pc, #320]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d4:	4b4e      	ldr	r3, [pc, #312]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a4d      	ldr	r2, [pc, #308]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 80047da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047e0:	4b4b      	ldr	r3, [pc, #300]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4a4a      	ldr	r2, [pc, #296]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 80047e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fc fbee 	bl	8000fcc <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047f2:	e00e      	b.n	8004812 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f4:	f7fc fbea 	bl	8000fcc <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d907      	bls.n	8004812 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004802:	4b43      	ldr	r3, [pc, #268]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e07a      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004812:	4b3f      	ldr	r3, [pc, #252]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0ea      	beq.n	80047f4 <HAL_RCC_OscConfig+0x8a0>
 800481e:	e072      	b.n	8004906 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004820:	4b3b      	ldr	r3, [pc, #236]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a3a      	ldr	r2, [pc, #232]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 8004826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800482a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800482c:	4b38      	ldr	r3, [pc, #224]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d105      	bne.n	8004844 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004838:	4b35      	ldr	r3, [pc, #212]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4a34      	ldr	r2, [pc, #208]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 800483e:	f023 0303 	bic.w	r3, r3, #3
 8004842:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004844:	4b32      	ldr	r3, [pc, #200]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	4a31      	ldr	r2, [pc, #196]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 800484a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800484e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004852:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fc fbba 	bl	8000fcc <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800485a:	e00e      	b.n	800487a <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485c:	f7fc fbb6 	bl	8000fcc <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d907      	bls.n	800487a <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800486a:	4b29      	ldr	r3, [pc, #164]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e046      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800487a:	4b25      	ldr	r3, [pc, #148]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1ea      	bne.n	800485c <HAL_RCC_OscConfig+0x908>
 8004886:	e03e      	b.n	8004906 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e039      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004894:	4b1e      	ldr	r3, [pc, #120]	; (8004910 <HAL_RCC_OscConfig+0x9bc>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f003 0203 	and.w	r2, r3, #3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d12c      	bne.n	8004902 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b2:	3b01      	subs	r3, #1
 80048b4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d123      	bne.n	8004902 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d11b      	bne.n	8004902 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d113      	bne.n	8004902 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	085b      	lsrs	r3, r3, #1
 80048e6:	3b01      	subs	r3, #1
 80048e8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d109      	bne.n	8004902 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f8:	085b      	lsrs	r3, r3, #1
 80048fa:	3b01      	subs	r3, #1
 80048fc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d001      	beq.n	8004906 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3720      	adds	r7, #32
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000
 8004914:	019f800c 	.word	0x019f800c

08004918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e10d      	b.n	8004b4c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004930:	4b88      	ldr	r3, [pc, #544]	; (8004b54 <HAL_RCC_ClockConfig+0x23c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d910      	bls.n	8004960 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493e:	4b85      	ldr	r3, [pc, #532]	; (8004b54 <HAL_RCC_ClockConfig+0x23c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f023 020f 	bic.w	r2, r3, #15
 8004946:	4983      	ldr	r1, [pc, #524]	; (8004b54 <HAL_RCC_ClockConfig+0x23c>)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	4313      	orrs	r3, r2
 800494c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494e:	4b81      	ldr	r3, [pc, #516]	; (8004b54 <HAL_RCC_ClockConfig+0x23c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d001      	beq.n	8004960 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0f5      	b.n	8004b4c <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8094 	beq.w	8004a96 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b03      	cmp	r3, #3
 8004974:	d134      	bne.n	80049e0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004976:	4b78      	ldr	r3, [pc, #480]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e0e2      	b.n	8004b4c <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004986:	f000 fa2d 	bl	8004de4 <RCC_GetSysClockFreqFromPLLSource>
 800498a:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4a73      	ldr	r2, [pc, #460]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d956      	bls.n	8004a42 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004994:	4b70      	ldr	r3, [pc, #448]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049a0:	4b6d      	ldr	r3, [pc, #436]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049a8:	4a6b      	ldr	r2, [pc, #428]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 80049aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	e045      	b.n	8004a42 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d03f      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d13b      	bne.n	8004a42 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049ca:	4b63      	ldr	r3, [pc, #396]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049d2:	4a61      	ldr	r2, [pc, #388]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 80049d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	e030      	b.n	8004a42 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d107      	bne.n	80049f8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049e8:	4b5b      	ldr	r3, [pc, #364]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d115      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0a9      	b.n	8004b4c <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d107      	bne.n	8004a10 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a00:	4b55      	ldr	r3, [pc, #340]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d109      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e09d      	b.n	8004b4c <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a10:	4b51      	ldr	r3, [pc, #324]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e095      	b.n	8004b4c <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a20:	f000 f8a2 	bl	8004b68 <HAL_RCC_GetSysClockFreq>
 8004a24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4a4c      	ldr	r2, [pc, #304]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d909      	bls.n	8004a42 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a2e:	4b4a      	ldr	r3, [pc, #296]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a36:	4a48      	ldr	r2, [pc, #288]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a3e:	2380      	movs	r3, #128	; 0x80
 8004a40:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a42:	4b45      	ldr	r3, [pc, #276]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f023 0203 	bic.w	r2, r3, #3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	4942      	ldr	r1, [pc, #264]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a54:	f7fc faba 	bl	8000fcc <HAL_GetTick>
 8004a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5a:	e013      	b.n	8004a84 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a5c:	f7fc fab6 	bl	8000fcc <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d90a      	bls.n	8004a84 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6e:	4b3a      	ldr	r3, [pc, #232]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 020c 	and.w	r2, r3, #12
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e063      	b.n	8004b4c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a84:	4b34      	ldr	r3, [pc, #208]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 020c 	and.w	r2, r3, #12
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d1e2      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa2:	4b2d      	ldr	r3, [pc, #180]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	492a      	ldr	r1, [pc, #168]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	608b      	str	r3, [r1, #8]
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b80      	cmp	r3, #128	; 0x80
 8004aba:	d105      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004abc:	4b26      	ldr	r3, [pc, #152]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4a25      	ldr	r2, [pc, #148]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ac6:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac8:	4b22      	ldr	r3, [pc, #136]	; (8004b54 <HAL_RCC_ClockConfig+0x23c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d210      	bcs.n	8004af8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad6:	4b1f      	ldr	r3, [pc, #124]	; (8004b54 <HAL_RCC_ClockConfig+0x23c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f023 020f 	bic.w	r2, r3, #15
 8004ade:	491d      	ldr	r1, [pc, #116]	; (8004b54 <HAL_RCC_ClockConfig+0x23c>)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae6:	4b1b      	ldr	r3, [pc, #108]	; (8004b54 <HAL_RCC_ClockConfig+0x23c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d001      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e029      	b.n	8004b4c <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b04:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4911      	ldr	r1, [pc, #68]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b22:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4909      	ldr	r1, [pc, #36]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b36:	f000 f8b5 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	4a08      	ldr	r2, [pc, #32]	; (8004b60 <HAL_RCC_ClockConfig+0x248>)
 8004b3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b40:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <HAL_RCC_ClockConfig+0x24c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fc f9f1 	bl	8000f2c <HAL_InitTick>
 8004b4a:	4603      	mov	r3, r0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40022000 	.word	0x40022000
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	04c4b400 	.word	0x04c4b400
 8004b60:	20000000 	.word	0x20000000
 8004b64:	20000004 	.word	0x20000004

08004b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b089      	sub	sp, #36	; 0x24
 8004b6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	2300      	movs	r3, #0
 8004b74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b76:	4b47      	ldr	r3, [pc, #284]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
 8004b7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b80:	4b44      	ldr	r3, [pc, #272]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <HAL_RCC_GetSysClockFreq+0x34>
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2b0c      	cmp	r3, #12
 8004b94:	d121      	bne.n	8004bda <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d11e      	bne.n	8004bda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b9c:	4b3d      	ldr	r3, [pc, #244]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d107      	bne.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ba8:	4b3a      	ldr	r3, [pc, #232]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	e005      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004bb8:	4b36      	ldr	r3, [pc, #216]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	091b      	lsrs	r3, r3, #4
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004bc4:	4a34      	ldr	r2, [pc, #208]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x130>)
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bcc:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10d      	bne.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bd8:	e00a      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d102      	bne.n	8004be6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004be0:	4b2e      	ldr	r3, [pc, #184]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x134>)
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	e004      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d101      	bne.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bec:	4b2c      	ldr	r3, [pc, #176]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004bee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	2b0c      	cmp	r3, #12
 8004bf4:	d146      	bne.n	8004c84 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004bf6:	4b27      	ldr	r3, [pc, #156]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c00:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d003      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0xb4>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d00d      	beq.n	8004c36 <HAL_RCC_GetSysClockFreq+0xce>
 8004c1a:	e019      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c1c:	4a1f      	ldr	r2, [pc, #124]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x134>)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c24:	4a1b      	ldr	r2, [pc, #108]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c26:	68d2      	ldr	r2, [r2, #12]
 8004c28:	0a12      	lsrs	r2, r2, #8
 8004c2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c2e:	fb02 f303 	mul.w	r3, r2, r3
 8004c32:	617b      	str	r3, [r7, #20]
        break;
 8004c34:	e019      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c36:	4a1a      	ldr	r2, [pc, #104]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3e:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c40:	68d2      	ldr	r2, [r2, #12]
 8004c42:	0a12      	lsrs	r2, r2, #8
 8004c44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c48:	fb02 f303 	mul.w	r3, r2, r3
 8004c4c:	617b      	str	r3, [r7, #20]
        break;
 8004c4e:	e00c      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c58:	4a0e      	ldr	r2, [pc, #56]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c5a:	68d2      	ldr	r2, [r2, #12]
 8004c5c:	0a12      	lsrs	r2, r2, #8
 8004c5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	617b      	str	r3, [r7, #20]
        break;
 8004c68:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	0e5b      	lsrs	r3, r3, #25
 8004c70:	f003 0303 	and.w	r3, r3, #3
 8004c74:	3301      	adds	r3, #1
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c84:	69bb      	ldr	r3, [r7, #24]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3724      	adds	r7, #36	; 0x24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000
 8004c98:	0800af94 	.word	0x0800af94
 8004c9c:	00f42400 	.word	0x00f42400
 8004ca0:	007a1200 	.word	0x007a1200

08004ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004ca8:	f7ff ff5e 	bl	8004b68 <HAL_RCC_GetSysClockFreq>
 8004cac:	4602      	mov	r2, r0
 8004cae:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <HAL_RCC_GetHCLKFreq+0x20>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	091b      	lsrs	r3, r3, #4
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	4903      	ldr	r1, [pc, #12]	; (8004cc8 <HAL_RCC_GetHCLKFreq+0x24>)
 8004cba:	5ccb      	ldrb	r3, [r1, r3]
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	0800af7c 	.word	0x0800af7c

08004ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cd0:	f7ff ffe8 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	4b05      	ldr	r3, [pc, #20]	; (8004cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	0a1b      	lsrs	r3, r3, #8
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	4903      	ldr	r1, [pc, #12]	; (8004cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ce2:	5ccb      	ldrb	r3, [r1, r3]
 8004ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	0800af8c 	.word	0x0800af8c

08004cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cf8:	f7ff ffd4 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	0adb      	lsrs	r3, r3, #11
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	4903      	ldr	r1, [pc, #12]	; (8004d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d0a:	5ccb      	ldrb	r3, [r1, r3]
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40021000 	.word	0x40021000
 8004d18:	0800af8c 	.word	0x0800af8c

08004d1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d28:	4b2c      	ldr	r3, [pc, #176]	; (8004ddc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d34:	f7ff f860 	bl	8003df8 <HAL_PWREx_GetVoltageRange>
 8004d38:	6138      	str	r0, [r7, #16]
 8004d3a:	e014      	b.n	8004d66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d3c:	4b27      	ldr	r3, [pc, #156]	; (8004ddc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d40:	4a26      	ldr	r2, [pc, #152]	; (8004ddc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d46:	6593      	str	r3, [r2, #88]	; 0x58
 8004d48:	4b24      	ldr	r3, [pc, #144]	; (8004ddc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d54:	f7ff f850 	bl	8003df8 <HAL_PWREx_GetVoltageRange>
 8004d58:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d5a:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5e:	4a1f      	ldr	r2, [pc, #124]	; (8004ddc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d72:	d10b      	bne.n	8004d8c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b80      	cmp	r3, #128	; 0x80
 8004d78:	d919      	bls.n	8004dae <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2ba0      	cmp	r3, #160	; 0xa0
 8004d7e:	d902      	bls.n	8004d86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d80:	2302      	movs	r3, #2
 8004d82:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004d84:	e013      	b.n	8004dae <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d86:	2301      	movs	r3, #1
 8004d88:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004d8a:	e010      	b.n	8004dae <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b80      	cmp	r3, #128	; 0x80
 8004d90:	d902      	bls.n	8004d98 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d92:	2303      	movs	r3, #3
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	e00a      	b.n	8004dae <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b80      	cmp	r3, #128	; 0x80
 8004d9c:	d102      	bne.n	8004da4 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d9e:	2302      	movs	r3, #2
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	e004      	b.n	8004dae <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b70      	cmp	r3, #112	; 0x70
 8004da8:	d101      	bne.n	8004dae <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004daa:	2301      	movs	r3, #1
 8004dac:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dae:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 020f 	bic.w	r2, r3, #15
 8004db6:	490a      	ldr	r1, [pc, #40]	; (8004de0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004dbe:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d001      	beq.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	40022000 	.word	0x40022000

08004de4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004dee:	4b36      	ldr	r3, [pc, #216]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d118      	bne.n	8004e2c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dfa:	4b33      	ldr	r3, [pc, #204]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d107      	bne.n	8004e16 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e06:	4b30      	ldr	r3, [pc, #192]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e0c:	0a1b      	lsrs	r3, r3, #8
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	e005      	b.n	8004e22 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e16:	4b2c      	ldr	r3, [pc, #176]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	091b      	lsrs	r3, r3, #4
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004e22:	4a2a      	ldr	r2, [pc, #168]	; (8004ecc <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e2a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e2c:	4b26      	ldr	r3, [pc, #152]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e36:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	091b      	lsrs	r3, r3, #4
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	3301      	adds	r3, #1
 8004e42:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d003      	beq.n	8004e52 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d00d      	beq.n	8004e6c <RCC_GetSysClockFreqFromPLLSource+0x88>
 8004e50:	e019      	b.n	8004e86 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e52:	4a1f      	ldr	r2, [pc, #124]	; (8004ed0 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5a:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004e5c:	68d2      	ldr	r2, [r2, #12]
 8004e5e:	0a12      	lsrs	r2, r2, #8
 8004e60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e64:	fb02 f303 	mul.w	r3, r2, r3
 8004e68:	613b      	str	r3, [r7, #16]
      break;
 8004e6a:	e019      	b.n	8004ea0 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e6c:	4a19      	ldr	r2, [pc, #100]	; (8004ed4 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e74:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004e76:	68d2      	ldr	r2, [r2, #12]
 8004e78:	0a12      	lsrs	r2, r2, #8
 8004e7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e7e:	fb02 f303 	mul.w	r3, r2, r3
 8004e82:	613b      	str	r3, [r7, #16]
      break;
 8004e84:	e00c      	b.n	8004ea0 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8e:	4a0e      	ldr	r2, [pc, #56]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004e90:	68d2      	ldr	r2, [r2, #12]
 8004e92:	0a12      	lsrs	r2, r2, #8
 8004e94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e98:	fb02 f303 	mul.w	r3, r2, r3
 8004e9c:	613b      	str	r3, [r7, #16]
      break;
 8004e9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004ea0:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	0e5b      	lsrs	r3, r3, #25
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	3301      	adds	r3, #1
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004eba:	683b      	ldr	r3, [r7, #0]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	0800af94 	.word	0x0800af94
 8004ed0:	00f42400 	.word	0x00f42400
 8004ed4:	007a1200 	.word	0x007a1200

08004ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d040      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef8:	2b80      	cmp	r3, #128	; 0x80
 8004efa:	d02a      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004efc:	2b80      	cmp	r3, #128	; 0x80
 8004efe:	d825      	bhi.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f00:	2b60      	cmp	r3, #96	; 0x60
 8004f02:	d026      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f04:	2b60      	cmp	r3, #96	; 0x60
 8004f06:	d821      	bhi.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d006      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d81d      	bhi.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d010      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004f18:	e018      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f1a:	4b8f      	ldr	r3, [pc, #572]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	4a8e      	ldr	r2, [pc, #568]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f24:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f26:	e015      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fb56 	bl	80055e0 <RCCEx_PLLSAI1_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f38:	e00c      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3320      	adds	r3, #32
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fc33 	bl	80057ac <RCCEx_PLLSAI2_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f4a:	e003      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	77fb      	strb	r3, [r7, #31]
        break;
 8004f50:	e000      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f54:	7ffb      	ldrb	r3, [r7, #31]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10b      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f5a:	4b7f      	ldr	r3, [pc, #508]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f60:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f68:	497b      	ldr	r1, [pc, #492]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f70:	e001      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f72:	7ffb      	ldrb	r3, [r7, #31]
 8004f74:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d047      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f8a:	d030      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f90:	d82a      	bhi.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f96:	d02a      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f9c:	d824      	bhi.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa2:	d008      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa8:	d81e      	bhi.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb2:	d010      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004fb4:	e018      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fb6:	4b68      	ldr	r3, [pc, #416]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	4a67      	ldr	r2, [pc, #412]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc0:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004fc2:	e015      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	2100      	movs	r1, #0
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fb08 	bl	80055e0 <RCCEx_PLLSAI1_Config>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004fd4:	e00c      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3320      	adds	r3, #32
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fbe5 	bl	80057ac <RCCEx_PLLSAI2_Config>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004fe6:	e003      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	77fb      	strb	r3, [r7, #31]
        break;
 8004fec:	e000      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004fee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff0:	7ffb      	ldrb	r3, [r7, #31]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10b      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ff6:	4b58      	ldr	r3, [pc, #352]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005004:	4954      	ldr	r1, [pc, #336]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800500c:	e001      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800500e:	7ffb      	ldrb	r3, [r7, #31]
 8005010:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 80ab 	beq.w	8005176 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005020:	2300      	movs	r3, #0
 8005022:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005024:	4b4c      	ldr	r3, [pc, #304]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10d      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005030:	4b49      	ldr	r3, [pc, #292]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005034:	4a48      	ldr	r2, [pc, #288]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800503a:	6593      	str	r3, [r2, #88]	; 0x58
 800503c:	4b46      	ldr	r3, [pc, #280]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800503e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005048:	2301      	movs	r3, #1
 800504a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800504c:	4b43      	ldr	r3, [pc, #268]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a42      	ldr	r2, [pc, #264]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005056:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005058:	f7fb ffb8 	bl	8000fcc <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800505e:	e00f      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005060:	f7fb ffb4 	bl	8000fcc <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d908      	bls.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800506e:	4b3b      	ldr	r3, [pc, #236]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005076:	2b00      	cmp	r3, #0
 8005078:	d109      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800507e:	e006      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005080:	4b36      	ldr	r3, [pc, #216]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0e9      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800508c:	e000      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800508e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8005090:	7ffb      	ldrb	r3, [r7, #31]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d164      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005096:	4b30      	ldr	r3, [pc, #192]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a0:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01f      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d019      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050b4:	4b28      	ldr	r3, [pc, #160]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050be:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050c0:	4b25      	ldr	r3, [pc, #148]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c6:	4a24      	ldr	r2, [pc, #144]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050d0:	4b21      	ldr	r3, [pc, #132]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d6:	4a20      	ldr	r2, [pc, #128]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050e0:	4a1d      	ldr	r2, [pc, #116]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01f      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f2:	f7fb ff6b 	bl	8000fcc <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f8:	e012      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fa:	f7fb ff67 	bl	8000fcc <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	f241 3288 	movw	r2, #5000	; 0x1388
 8005108:	4293      	cmp	r3, r2
 800510a:	d909      	bls.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800510c:	4b12      	ldr	r3, [pc, #72]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10a      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800511e:	e007      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005120:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0e5      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x222>
 800512e:	e000      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005130:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8005132:	7ffb      	ldrb	r3, [r7, #31]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10c      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005138:	4b07      	ldr	r3, [pc, #28]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005148:	4903      	ldr	r1, [pc, #12]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005150:	e008      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005152:	7ffb      	ldrb	r3, [r7, #31]
 8005154:	77bb      	strb	r3, [r7, #30]
 8005156:	e005      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005158:	40021000 	.word	0x40021000
 800515c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005160:	7ffb      	ldrb	r3, [r7, #31]
 8005162:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005164:	7dfb      	ldrb	r3, [r7, #23]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d105      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800516a:	4baf      	ldr	r3, [pc, #700]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800516c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516e:	4aae      	ldr	r2, [pc, #696]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005174:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005182:	4ba9      	ldr	r3, [pc, #676]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005188:	f023 0203 	bic.w	r2, r3, #3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005190:	49a5      	ldr	r1, [pc, #660]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051a4:	4ba0      	ldr	r3, [pc, #640]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80051a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051aa:	f023 020c 	bic.w	r2, r3, #12
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	499d      	ldr	r1, [pc, #628]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051c6:	4b98      	ldr	r3, [pc, #608]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d4:	4994      	ldr	r1, [pc, #592]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051e8:	4b8f      	ldr	r3, [pc, #572]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	498c      	ldr	r1, [pc, #560]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0310 	and.w	r3, r3, #16
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800520a:	4b87      	ldr	r3, [pc, #540]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005218:	4983      	ldr	r1, [pc, #524]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800522c:	4b7e      	ldr	r3, [pc, #504]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005232:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800523a:	497b      	ldr	r1, [pc, #492]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800524e:	4b76      	ldr	r3, [pc, #472]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005254:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525c:	4972      	ldr	r1, [pc, #456]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005270:	4b6d      	ldr	r3, [pc, #436]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005276:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800527e:	496a      	ldr	r1, [pc, #424]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005292:	4b65      	ldr	r3, [pc, #404]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005298:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052a0:	4961      	ldr	r1, [pc, #388]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d031      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052bc:	d00e      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x404>
 80052be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052c2:	d814      	bhi.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x416>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d015      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80052c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052cc:	d10f      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052ce:	4b56      	ldr	r3, [pc, #344]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	4a55      	ldr	r2, [pc, #340]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80052d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052d8:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80052da:	e00c      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3304      	adds	r3, #4
 80052e0:	2100      	movs	r1, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f97c 	bl	80055e0 <RCCEx_PLLSAI1_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80052ec:	e003      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	77fb      	strb	r3, [r7, #31]
        break;
 80052f2:	e000      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80052f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f6:	7ffb      	ldrb	r3, [r7, #31]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10b      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052fc:	4b4a      	ldr	r3, [pc, #296]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80052fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005302:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800530a:	4947      	ldr	r1, [pc, #284]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005312:	e001      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005314:	7ffb      	ldrb	r3, [r7, #31]
 8005316:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005324:	4b40      	ldr	r3, [pc, #256]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005332:	493d      	ldr	r1, [pc, #244]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005346:	4b38      	ldr	r3, [pc, #224]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005354:	4934      	ldr	r1, [pc, #208]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005368:	4b2f      	ldr	r3, [pc, #188]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005376:	492c      	ldr	r1, [pc, #176]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800538a:	4b27      	ldr	r3, [pc, #156]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800538c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005390:	f023 0203 	bic.w	r2, r3, #3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005398:	4923      	ldr	r1, [pc, #140]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d028      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x526>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053ac:	4b1e      	ldr	r3, [pc, #120]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ba:	491b      	ldr	r1, [pc, #108]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ca:	d106      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053cc:	4b16      	ldr	r3, [pc, #88]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	4a15      	ldr	r2, [pc, #84]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80053d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053d6:	60d3      	str	r3, [r2, #12]
 80053d8:	e011      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x526>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053e2:	d10c      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x526>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3304      	adds	r3, #4
 80053e8:	2101      	movs	r1, #1
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 f8f8 	bl	80055e0 <RCCEx_PLLSAI1_Config>
 80053f0:	4603      	mov	r3, r0
 80053f2:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80053f4:	7ffb      	ldrb	r3, [r7, #31]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x526>
        {
          /* set overall return value */
          status = ret;
 80053fa:	7ffb      	ldrb	r3, [r7, #31]
 80053fc:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d04d      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800540e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005412:	d10b      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x554>
 8005414:	4b04      	ldr	r3, [pc, #16]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005416:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800541a:	4a03      	ldr	r2, [pc, #12]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800541c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005420:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005424:	e015      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005426:	bf00      	nop
 8005428:	40021000 	.word	0x40021000
 800542c:	4b6b      	ldr	r3, [pc, #428]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800542e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005432:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800543a:	4968      	ldr	r1, [pc, #416]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800543c:	4313      	orrs	r3, r2
 800543e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005442:	4b66      	ldr	r3, [pc, #408]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005444:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005448:	4a64      	ldr	r2, [pc, #400]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800544a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800544e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005456:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800545a:	d10d      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3304      	adds	r3, #4
 8005460:	2101      	movs	r1, #1
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f8bc 	bl	80055e0 <RCCEx_PLLSAI1_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800546c:	7ffb      	ldrb	r3, [r7, #31]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d019      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8005472:	7ffb      	ldrb	r3, [r7, #31]
 8005474:	77bb      	strb	r3, [r7, #30]
 8005476:	e016      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800547c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005480:	d106      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005482:	4b56      	ldr	r3, [pc, #344]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	4a55      	ldr	r2, [pc, #340]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005488:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800548c:	60d3      	str	r3, [r2, #12]
 800548e:	e00a      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005498:	d105      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800549a:	4b50      	ldr	r3, [pc, #320]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	4a4f      	ldr	r2, [pc, #316]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a4:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d028      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054b2:	4b4a      	ldr	r3, [pc, #296]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c0:	4946      	ldr	r1, [pc, #280]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d0:	d106      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054d2:	4b42      	ldr	r3, [pc, #264]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	4a41      	ldr	r2, [pc, #260]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054dc:	60d3      	str	r3, [r2, #12]
 80054de:	e011      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054e8:	d10c      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3304      	adds	r3, #4
 80054ee:	2101      	movs	r1, #1
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 f875 	bl	80055e0 <RCCEx_PLLSAI1_Config>
 80054f6:	4603      	mov	r3, r0
 80054f8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80054fa:	7ffb      	ldrb	r3, [r7, #31]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8005500:	7ffb      	ldrb	r3, [r7, #31]
 8005502:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01e      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005510:	4b32      	ldr	r3, [pc, #200]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005516:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005520:	492e      	ldr	r1, [pc, #184]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800552e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005532:	d10c      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3304      	adds	r3, #4
 8005538:	2102      	movs	r1, #2
 800553a:	4618      	mov	r0, r3
 800553c:	f000 f850 	bl	80055e0 <RCCEx_PLLSAI1_Config>
 8005540:	4603      	mov	r3, r0
 8005542:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005544:	7ffb      	ldrb	r3, [r7, #31]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800554a:	7ffb      	ldrb	r3, [r7, #31]
 800554c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00b      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800555a:	4b20      	ldr	r3, [pc, #128]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800555c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005560:	f023 0204 	bic.w	r2, r3, #4
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800556a:	491c      	ldr	r1, [pc, #112]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800557e:	4b17      	ldr	r3, [pc, #92]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005580:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005584:	f023 0218 	bic.w	r2, r3, #24
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558e:	4913      	ldr	r1, [pc, #76]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d017      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80055a2:	4b0e      	ldr	r3, [pc, #56]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b2:	490a      	ldr	r1, [pc, #40]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055c4:	d105      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c6:	4b05      	ldr	r3, [pc, #20]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	4a04      	ldr	r2, [pc, #16]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80055cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055d0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80055d2:	7fbb      	ldrb	r3, [r7, #30]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3720      	adds	r7, #32
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40021000 	.word	0x40021000

080055e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d018      	beq.n	8005628 <RCCEx_PLLSAI1_Config+0x48>
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d81f      	bhi.n	800563a <RCCEx_PLLSAI1_Config+0x5a>
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d002      	beq.n	8005604 <RCCEx_PLLSAI1_Config+0x24>
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d009      	beq.n	8005616 <RCCEx_PLLSAI1_Config+0x36>
 8005602:	e01a      	b.n	800563a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005604:	4b65      	ldr	r3, [pc, #404]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d117      	bne.n	8005640 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005614:	e014      	b.n	8005640 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005616:	4b61      	ldr	r3, [pc, #388]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800561e:	2b00      	cmp	r3, #0
 8005620:	d110      	bne.n	8005644 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005626:	e00d      	b.n	8005644 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005628:	4b5c      	ldr	r3, [pc, #368]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d109      	bne.n	8005648 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005638:	e006      	b.n	8005648 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	73fb      	strb	r3, [r7, #15]
      break;
 800563e:	e004      	b.n	800564a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005640:	bf00      	nop
 8005642:	e002      	b.n	800564a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005644:	bf00      	nop
 8005646:	e000      	b.n	800564a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005648:	bf00      	nop
  }

  if (status == HAL_OK)
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f040 809f 	bne.w	8005790 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005652:	4b52      	ldr	r3, [pc, #328]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a51      	ldr	r2, [pc, #324]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005658:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800565c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800565e:	f7fb fcb5 	bl	8000fcc <HAL_GetTick>
 8005662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005664:	e00f      	b.n	8005686 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005666:	f7fb fcb1 	bl	8000fcc <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d908      	bls.n	8005686 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005674:	4b49      	ldr	r3, [pc, #292]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d009      	beq.n	8005694 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005684:	e006      	b.n	8005694 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005686:	4b45      	ldr	r3, [pc, #276]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e9      	bne.n	8005666 <RCCEx_PLLSAI1_Config+0x86>
 8005692:	e000      	b.n	8005696 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005694:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d179      	bne.n	8005790 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d116      	bne.n	80056d0 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056a2:	4b3e      	ldr	r3, [pc, #248]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	4b3e      	ldr	r3, [pc, #248]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1c0>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6892      	ldr	r2, [r2, #8]
 80056ae:	0211      	lsls	r1, r2, #8
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	68d2      	ldr	r2, [r2, #12]
 80056b4:	06d2      	lsls	r2, r2, #27
 80056b6:	4311      	orrs	r1, r2
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6852      	ldr	r2, [r2, #4]
 80056bc:	3a01      	subs	r2, #1
 80056be:	0112      	lsls	r2, r2, #4
 80056c0:	4311      	orrs	r1, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6812      	ldr	r2, [r2, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	4934      	ldr	r1, [pc, #208]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	610b      	str	r3, [r1, #16]
 80056ce:	e033      	b.n	8005738 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d118      	bne.n	8005708 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056d6:	4b31      	ldr	r3, [pc, #196]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	4b32      	ldr	r3, [pc, #200]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1c4>)
 80056dc:	4013      	ands	r3, r2
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	6892      	ldr	r2, [r2, #8]
 80056e2:	0211      	lsls	r1, r2, #8
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6912      	ldr	r2, [r2, #16]
 80056e8:	0852      	lsrs	r2, r2, #1
 80056ea:	3a01      	subs	r2, #1
 80056ec:	0552      	lsls	r2, r2, #21
 80056ee:	4311      	orrs	r1, r2
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6852      	ldr	r2, [r2, #4]
 80056f4:	3a01      	subs	r2, #1
 80056f6:	0112      	lsls	r2, r2, #4
 80056f8:	4311      	orrs	r1, r2
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6812      	ldr	r2, [r2, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	4926      	ldr	r1, [pc, #152]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005702:	4313      	orrs	r3, r2
 8005704:	610b      	str	r3, [r1, #16]
 8005706:	e017      	b.n	8005738 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005708:	4b24      	ldr	r3, [pc, #144]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	4b26      	ldr	r3, [pc, #152]	; (80057a8 <RCCEx_PLLSAI1_Config+0x1c8>)
 800570e:	4013      	ands	r3, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6892      	ldr	r2, [r2, #8]
 8005714:	0211      	lsls	r1, r2, #8
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6952      	ldr	r2, [r2, #20]
 800571a:	0852      	lsrs	r2, r2, #1
 800571c:	3a01      	subs	r2, #1
 800571e:	0652      	lsls	r2, r2, #25
 8005720:	4311      	orrs	r1, r2
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6852      	ldr	r2, [r2, #4]
 8005726:	3a01      	subs	r2, #1
 8005728:	0112      	lsls	r2, r2, #4
 800572a:	4311      	orrs	r1, r2
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	491a      	ldr	r1, [pc, #104]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005734:	4313      	orrs	r3, r2
 8005736:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005738:	4b18      	ldr	r3, [pc, #96]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a17      	ldr	r2, [pc, #92]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 800573e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005742:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005744:	f7fb fc42 	bl	8000fcc <HAL_GetTick>
 8005748:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800574a:	e00f      	b.n	800576c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800574c:	f7fb fc3e 	bl	8000fcc <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d908      	bls.n	800576c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800575a:	4b10      	ldr	r3, [pc, #64]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800576a:	e006      	b.n	800577a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0e9      	beq.n	800574c <RCCEx_PLLSAI1_Config+0x16c>
 8005778:	e000      	b.n	800577c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800577a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8005782:	4b06      	ldr	r3, [pc, #24]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	4904      	ldr	r1, [pc, #16]	; (800579c <RCCEx_PLLSAI1_Config+0x1bc>)
 800578c:	4313      	orrs	r3, r2
 800578e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005790:	7bfb      	ldrb	r3, [r7, #15]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40021000 	.word	0x40021000
 80057a0:	07ff800c 	.word	0x07ff800c
 80057a4:	ff9f800c 	.word	0xff9f800c
 80057a8:	f9ff800c 	.word	0xf9ff800c

080057ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d018      	beq.n	80057f4 <RCCEx_PLLSAI2_Config+0x48>
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d81f      	bhi.n	8005806 <RCCEx_PLLSAI2_Config+0x5a>
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d002      	beq.n	80057d0 <RCCEx_PLLSAI2_Config+0x24>
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d009      	beq.n	80057e2 <RCCEx_PLLSAI2_Config+0x36>
 80057ce:	e01a      	b.n	8005806 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057d0:	4b4a      	ldr	r3, [pc, #296]	; (80058fc <RCCEx_PLLSAI2_Config+0x150>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d117      	bne.n	800580c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057e0:	e014      	b.n	800580c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057e2:	4b46      	ldr	r3, [pc, #280]	; (80058fc <RCCEx_PLLSAI2_Config+0x150>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d110      	bne.n	8005810 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f2:	e00d      	b.n	8005810 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80057f4:	4b41      	ldr	r3, [pc, #260]	; (80058fc <RCCEx_PLLSAI2_Config+0x150>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d109      	bne.n	8005814 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005804:	e006      	b.n	8005814 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	73fb      	strb	r3, [r7, #15]
      break;
 800580a:	e004      	b.n	8005816 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800580c:	bf00      	nop
 800580e:	e002      	b.n	8005816 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005810:	bf00      	nop
 8005812:	e000      	b.n	8005816 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005814:	bf00      	nop
  }

  if (status == HAL_OK)
 8005816:	7bfb      	ldrb	r3, [r7, #15]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d169      	bne.n	80058f0 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800581c:	4b37      	ldr	r3, [pc, #220]	; (80058fc <RCCEx_PLLSAI2_Config+0x150>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a36      	ldr	r2, [pc, #216]	; (80058fc <RCCEx_PLLSAI2_Config+0x150>)
 8005822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005828:	f7fb fbd0 	bl	8000fcc <HAL_GetTick>
 800582c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800582e:	e00f      	b.n	8005850 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005830:	f7fb fbcc 	bl	8000fcc <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d908      	bls.n	8005850 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800583e:	4b2f      	ldr	r3, [pc, #188]	; (80058fc <RCCEx_PLLSAI2_Config+0x150>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800584e:	e006      	b.n	800585e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005850:	4b2a      	ldr	r3, [pc, #168]	; (80058fc <RCCEx_PLLSAI2_Config+0x150>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e9      	bne.n	8005830 <RCCEx_PLLSAI2_Config+0x84>
 800585c:	e000      	b.n	8005860 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800585e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d144      	bne.n	80058f0 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d115      	bne.n	8005898 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800586c:	4b23      	ldr	r3, [pc, #140]	; (80058fc <RCCEx_PLLSAI2_Config+0x150>)
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	4b23      	ldr	r3, [pc, #140]	; (8005900 <RCCEx_PLLSAI2_Config+0x154>)
 8005872:	4013      	ands	r3, r2
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6892      	ldr	r2, [r2, #8]
 8005878:	0211      	lsls	r1, r2, #8
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	68d2      	ldr	r2, [r2, #12]
 800587e:	06d2      	lsls	r2, r2, #27
 8005880:	4311      	orrs	r1, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6852      	ldr	r2, [r2, #4]
 8005886:	3a01      	subs	r2, #1
 8005888:	0112      	lsls	r2, r2, #4
 800588a:	4311      	orrs	r1, r2
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	491a      	ldr	r1, [pc, #104]	; (80058fc <RCCEx_PLLSAI2_Config+0x150>)
 8005894:	4313      	orrs	r3, r2
 8005896:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005898:	4b18      	ldr	r3, [pc, #96]	; (80058fc <RCCEx_PLLSAI2_Config+0x150>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a17      	ldr	r2, [pc, #92]	; (80058fc <RCCEx_PLLSAI2_Config+0x150>)
 800589e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a4:	f7fb fb92 	bl	8000fcc <HAL_GetTick>
 80058a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058aa:	e00f      	b.n	80058cc <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058ac:	f7fb fb8e 	bl	8000fcc <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d908      	bls.n	80058cc <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058ba:	4b10      	ldr	r3, [pc, #64]	; (80058fc <RCCEx_PLLSAI2_Config+0x150>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d109      	bne.n	80058da <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80058ca:	e006      	b.n	80058da <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058cc:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <RCCEx_PLLSAI2_Config+0x150>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0e9      	beq.n	80058ac <RCCEx_PLLSAI2_Config+0x100>
 80058d8:	e000      	b.n	80058dc <RCCEx_PLLSAI2_Config+0x130>
          break;
 80058da:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <RCCEx_PLLSAI2_Config+0x150>)
 80058e4:	695a      	ldr	r2, [r3, #20]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	4904      	ldr	r1, [pc, #16]	; (80058fc <RCCEx_PLLSAI2_Config+0x150>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40021000 	.word	0x40021000
 8005900:	07ff800c 	.word	0x07ff800c

08005904 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d05c      	beq.n	80059d0 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fb f988 	bl	8000c40 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005938:	4b28      	ldr	r3, [pc, #160]	; (80059dc <HAL_RTC_Init+0xd8>)
 800593a:	22ca      	movs	r2, #202	; 0xca
 800593c:	625a      	str	r2, [r3, #36]	; 0x24
 800593e:	4b27      	ldr	r3, [pc, #156]	; (80059dc <HAL_RTC_Init+0xd8>)
 8005940:	2253      	movs	r2, #83	; 0x53
 8005942:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f871 	bl	8005a2c <RTC_EnterInitMode>
 800594a:	4603      	mov	r3, r0
 800594c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d133      	bne.n	80059bc <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005954:	4b21      	ldr	r3, [pc, #132]	; (80059dc <HAL_RTC_Init+0xd8>)
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	4a20      	ldr	r2, [pc, #128]	; (80059dc <HAL_RTC_Init+0xd8>)
 800595a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800595e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005962:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005964:	4b1d      	ldr	r3, [pc, #116]	; (80059dc <HAL_RTC_Init+0xd8>)
 8005966:	699a      	ldr	r2, [r3, #24]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6859      	ldr	r1, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	4319      	orrs	r1, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	430b      	orrs	r3, r1
 8005978:	4918      	ldr	r1, [pc, #96]	; (80059dc <HAL_RTC_Init+0xd8>)
 800597a:	4313      	orrs	r3, r2
 800597c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	041b      	lsls	r3, r3, #16
 8005988:	4914      	ldr	r1, [pc, #80]	; (80059dc <HAL_RTC_Init+0xd8>)
 800598a:	4313      	orrs	r3, r2
 800598c:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f880 	bl	8005a94 <RTC_ExitInitMode>
 8005994:	4603      	mov	r3, r0
 8005996:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10e      	bne.n	80059bc <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 800599e:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <HAL_RTC_Init+0xd8>)
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a19      	ldr	r1, [r3, #32]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	4319      	orrs	r1, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	430b      	orrs	r3, r1
 80059b6:	4909      	ldr	r1, [pc, #36]	; (80059dc <HAL_RTC_Init+0xd8>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059bc:	4b07      	ldr	r3, [pc, #28]	; (80059dc <HAL_RTC_Init+0xd8>)
 80059be:	22ff      	movs	r2, #255	; 0xff
 80059c0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d103      	bne.n	80059d0 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40002800 	.word	0x40002800

080059e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80059e8:	4b0f      	ldr	r3, [pc, #60]	; (8005a28 <HAL_RTC_WaitForSynchro+0x48>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	4a0e      	ldr	r2, [pc, #56]	; (8005a28 <HAL_RTC_WaitForSynchro+0x48>)
 80059ee:	f023 0320 	bic.w	r3, r3, #32
 80059f2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80059f4:	f7fb faea 	bl	8000fcc <HAL_GetTick>
 80059f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80059fa:	e009      	b.n	8005a10 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059fc:	f7fb fae6 	bl	8000fcc <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a0a:	d901      	bls.n	8005a10 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e006      	b.n	8005a1e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005a10:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <HAL_RTC_WaitForSynchro+0x48>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0ef      	beq.n	80059fc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	40002800 	.word	0x40002800

08005a2c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a34:	2300      	movs	r3, #0
 8005a36:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005a38:	4b15      	ldr	r3, [pc, #84]	; (8005a90 <RTC_EnterInitMode+0x64>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d120      	bne.n	8005a86 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005a44:	4b12      	ldr	r3, [pc, #72]	; (8005a90 <RTC_EnterInitMode+0x64>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	4a11      	ldr	r2, [pc, #68]	; (8005a90 <RTC_EnterInitMode+0x64>)
 8005a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a4e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005a50:	f7fb fabc 	bl	8000fcc <HAL_GetTick>
 8005a54:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a56:	e00d      	b.n	8005a74 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005a58:	f7fb fab8 	bl	8000fcc <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a66:	d905      	bls.n	8005a74 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2203      	movs	r2, #3
 8005a70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a74:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <RTC_EnterInitMode+0x64>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d102      	bne.n	8005a86 <RTC_EnterInitMode+0x5a>
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d1e8      	bne.n	8005a58 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40002800 	.word	0x40002800

08005a94 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005aa0:	4b1a      	ldr	r3, [pc, #104]	; (8005b0c <RTC_ExitInitMode+0x78>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	4a19      	ldr	r2, [pc, #100]	; (8005b0c <RTC_ExitInitMode+0x78>)
 8005aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aaa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005aac:	4b17      	ldr	r3, [pc, #92]	; (8005b0c <RTC_ExitInitMode+0x78>)
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	f003 0320 	and.w	r3, r3, #32
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10c      	bne.n	8005ad2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff ff91 	bl	80059e0 <HAL_RTC_WaitForSynchro>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01e      	beq.n	8005b02 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2203      	movs	r2, #3
 8005ac8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	73fb      	strb	r3, [r7, #15]
 8005ad0:	e017      	b.n	8005b02 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005ad2:	4b0e      	ldr	r3, [pc, #56]	; (8005b0c <RTC_ExitInitMode+0x78>)
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	4a0d      	ldr	r2, [pc, #52]	; (8005b0c <RTC_ExitInitMode+0x78>)
 8005ad8:	f023 0320 	bic.w	r3, r3, #32
 8005adc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7ff ff7e 	bl	80059e0 <HAL_RTC_WaitForSynchro>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2203      	movs	r2, #3
 8005aee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005af6:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <RTC_ExitInitMode+0x78>)
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	4a04      	ldr	r2, [pc, #16]	; (8005b0c <RTC_ExitInitMode+0x78>)
 8005afc:	f043 0320 	orr.w	r3, r3, #32
 8005b00:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40002800 	.word	0x40002800

08005b10 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	490f      	ldr	r1, [pc, #60]	; (8005b60 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	490c      	ldr	r1, [pc, #48]	; (8005b64 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8005b36:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	6919      	ldr	r1, [r3, #16]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	041b      	lsls	r3, r3, #16
 8005b48:	430b      	orrs	r3, r1
 8005b4a:	4906      	ldr	r1, [pc, #24]	; (8005b64 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40002800 	.word	0x40002800
 8005b64:	40003400 	.word	0x40003400

08005b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e042      	b.n	8005c00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d106      	bne.n	8005b92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fa fff7 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2224      	movs	r2, #36	; 0x24
 8005b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0201 	bic.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f82c 	bl	8005c08 <UART_SetConfig>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d101      	bne.n	8005bba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e022      	b.n	8005c00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 faee 	bl	80061a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005be6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fb75 	bl	80062e8 <UART_CheckIdleState>
 8005bfe:	4603      	mov	r3, r0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c08:	b5b0      	push	{r4, r5, r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	4bb1      	ldr	r3, [pc, #708]	; (8005ef8 <UART_SetConfig+0x2f0>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6812      	ldr	r2, [r2, #0]
 8005c3a:	69f9      	ldr	r1, [r7, #28]
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4aa6      	ldr	r2, [pc, #664]	; (8005efc <UART_SetConfig+0x2f4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d004      	beq.n	8005c70 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c7a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	69f9      	ldr	r1, [r7, #28]
 8005c84:	430b      	orrs	r3, r1
 8005c86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8e:	f023 010f 	bic.w	r1, r3, #15
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a97      	ldr	r2, [pc, #604]	; (8005f00 <UART_SetConfig+0x2f8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d120      	bne.n	8005cea <UART_SetConfig+0xe2>
 8005ca8:	4b96      	ldr	r3, [pc, #600]	; (8005f04 <UART_SetConfig+0x2fc>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d816      	bhi.n	8005ce4 <UART_SetConfig+0xdc>
 8005cb6:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <UART_SetConfig+0xb4>)
 8005cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbc:	08005ccd 	.word	0x08005ccd
 8005cc0:	08005cd9 	.word	0x08005cd9
 8005cc4:	08005cd3 	.word	0x08005cd3
 8005cc8:	08005cdf 	.word	0x08005cdf
 8005ccc:	2301      	movs	r3, #1
 8005cce:	76fb      	strb	r3, [r7, #27]
 8005cd0:	e0e7      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	76fb      	strb	r3, [r7, #27]
 8005cd6:	e0e4      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005cd8:	2304      	movs	r3, #4
 8005cda:	76fb      	strb	r3, [r7, #27]
 8005cdc:	e0e1      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005cde:	2308      	movs	r3, #8
 8005ce0:	76fb      	strb	r3, [r7, #27]
 8005ce2:	e0de      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005ce4:	2310      	movs	r3, #16
 8005ce6:	76fb      	strb	r3, [r7, #27]
 8005ce8:	e0db      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a86      	ldr	r2, [pc, #536]	; (8005f08 <UART_SetConfig+0x300>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d132      	bne.n	8005d5a <UART_SetConfig+0x152>
 8005cf4:	4b83      	ldr	r3, [pc, #524]	; (8005f04 <UART_SetConfig+0x2fc>)
 8005cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfa:	f003 030c 	and.w	r3, r3, #12
 8005cfe:	2b0c      	cmp	r3, #12
 8005d00:	d828      	bhi.n	8005d54 <UART_SetConfig+0x14c>
 8005d02:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <UART_SetConfig+0x100>)
 8005d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d08:	08005d3d 	.word	0x08005d3d
 8005d0c:	08005d55 	.word	0x08005d55
 8005d10:	08005d55 	.word	0x08005d55
 8005d14:	08005d55 	.word	0x08005d55
 8005d18:	08005d49 	.word	0x08005d49
 8005d1c:	08005d55 	.word	0x08005d55
 8005d20:	08005d55 	.word	0x08005d55
 8005d24:	08005d55 	.word	0x08005d55
 8005d28:	08005d43 	.word	0x08005d43
 8005d2c:	08005d55 	.word	0x08005d55
 8005d30:	08005d55 	.word	0x08005d55
 8005d34:	08005d55 	.word	0x08005d55
 8005d38:	08005d4f 	.word	0x08005d4f
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	76fb      	strb	r3, [r7, #27]
 8005d40:	e0af      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005d42:	2302      	movs	r3, #2
 8005d44:	76fb      	strb	r3, [r7, #27]
 8005d46:	e0ac      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005d48:	2304      	movs	r3, #4
 8005d4a:	76fb      	strb	r3, [r7, #27]
 8005d4c:	e0a9      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005d4e:	2308      	movs	r3, #8
 8005d50:	76fb      	strb	r3, [r7, #27]
 8005d52:	e0a6      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005d54:	2310      	movs	r3, #16
 8005d56:	76fb      	strb	r3, [r7, #27]
 8005d58:	e0a3      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a6b      	ldr	r2, [pc, #428]	; (8005f0c <UART_SetConfig+0x304>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d120      	bne.n	8005da6 <UART_SetConfig+0x19e>
 8005d64:	4b67      	ldr	r3, [pc, #412]	; (8005f04 <UART_SetConfig+0x2fc>)
 8005d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d6e:	2b30      	cmp	r3, #48	; 0x30
 8005d70:	d013      	beq.n	8005d9a <UART_SetConfig+0x192>
 8005d72:	2b30      	cmp	r3, #48	; 0x30
 8005d74:	d814      	bhi.n	8005da0 <UART_SetConfig+0x198>
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d009      	beq.n	8005d8e <UART_SetConfig+0x186>
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	d810      	bhi.n	8005da0 <UART_SetConfig+0x198>
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <UART_SetConfig+0x180>
 8005d82:	2b10      	cmp	r3, #16
 8005d84:	d006      	beq.n	8005d94 <UART_SetConfig+0x18c>
 8005d86:	e00b      	b.n	8005da0 <UART_SetConfig+0x198>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	76fb      	strb	r3, [r7, #27]
 8005d8c:	e089      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	76fb      	strb	r3, [r7, #27]
 8005d92:	e086      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005d94:	2304      	movs	r3, #4
 8005d96:	76fb      	strb	r3, [r7, #27]
 8005d98:	e083      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005d9a:	2308      	movs	r3, #8
 8005d9c:	76fb      	strb	r3, [r7, #27]
 8005d9e:	e080      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005da0:	2310      	movs	r3, #16
 8005da2:	76fb      	strb	r3, [r7, #27]
 8005da4:	e07d      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a59      	ldr	r2, [pc, #356]	; (8005f10 <UART_SetConfig+0x308>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d120      	bne.n	8005df2 <UART_SetConfig+0x1ea>
 8005db0:	4b54      	ldr	r3, [pc, #336]	; (8005f04 <UART_SetConfig+0x2fc>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dba:	2bc0      	cmp	r3, #192	; 0xc0
 8005dbc:	d013      	beq.n	8005de6 <UART_SetConfig+0x1de>
 8005dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8005dc0:	d814      	bhi.n	8005dec <UART_SetConfig+0x1e4>
 8005dc2:	2b80      	cmp	r3, #128	; 0x80
 8005dc4:	d009      	beq.n	8005dda <UART_SetConfig+0x1d2>
 8005dc6:	2b80      	cmp	r3, #128	; 0x80
 8005dc8:	d810      	bhi.n	8005dec <UART_SetConfig+0x1e4>
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <UART_SetConfig+0x1cc>
 8005dce:	2b40      	cmp	r3, #64	; 0x40
 8005dd0:	d006      	beq.n	8005de0 <UART_SetConfig+0x1d8>
 8005dd2:	e00b      	b.n	8005dec <UART_SetConfig+0x1e4>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	76fb      	strb	r3, [r7, #27]
 8005dd8:	e063      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	76fb      	strb	r3, [r7, #27]
 8005dde:	e060      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005de0:	2304      	movs	r3, #4
 8005de2:	76fb      	strb	r3, [r7, #27]
 8005de4:	e05d      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005de6:	2308      	movs	r3, #8
 8005de8:	76fb      	strb	r3, [r7, #27]
 8005dea:	e05a      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005dec:	2310      	movs	r3, #16
 8005dee:	76fb      	strb	r3, [r7, #27]
 8005df0:	e057      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a47      	ldr	r2, [pc, #284]	; (8005f14 <UART_SetConfig+0x30c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d125      	bne.n	8005e48 <UART_SetConfig+0x240>
 8005dfc:	4b41      	ldr	r3, [pc, #260]	; (8005f04 <UART_SetConfig+0x2fc>)
 8005dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e0a:	d017      	beq.n	8005e3c <UART_SetConfig+0x234>
 8005e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e10:	d817      	bhi.n	8005e42 <UART_SetConfig+0x23a>
 8005e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e16:	d00b      	beq.n	8005e30 <UART_SetConfig+0x228>
 8005e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e1c:	d811      	bhi.n	8005e42 <UART_SetConfig+0x23a>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <UART_SetConfig+0x222>
 8005e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e26:	d006      	beq.n	8005e36 <UART_SetConfig+0x22e>
 8005e28:	e00b      	b.n	8005e42 <UART_SetConfig+0x23a>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	76fb      	strb	r3, [r7, #27]
 8005e2e:	e038      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005e30:	2302      	movs	r3, #2
 8005e32:	76fb      	strb	r3, [r7, #27]
 8005e34:	e035      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005e36:	2304      	movs	r3, #4
 8005e38:	76fb      	strb	r3, [r7, #27]
 8005e3a:	e032      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005e3c:	2308      	movs	r3, #8
 8005e3e:	76fb      	strb	r3, [r7, #27]
 8005e40:	e02f      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005e42:	2310      	movs	r3, #16
 8005e44:	76fb      	strb	r3, [r7, #27]
 8005e46:	e02c      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a2b      	ldr	r2, [pc, #172]	; (8005efc <UART_SetConfig+0x2f4>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d125      	bne.n	8005e9e <UART_SetConfig+0x296>
 8005e52:	4b2c      	ldr	r3, [pc, #176]	; (8005f04 <UART_SetConfig+0x2fc>)
 8005e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e60:	d017      	beq.n	8005e92 <UART_SetConfig+0x28a>
 8005e62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e66:	d817      	bhi.n	8005e98 <UART_SetConfig+0x290>
 8005e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e6c:	d00b      	beq.n	8005e86 <UART_SetConfig+0x27e>
 8005e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e72:	d811      	bhi.n	8005e98 <UART_SetConfig+0x290>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <UART_SetConfig+0x278>
 8005e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e7c:	d006      	beq.n	8005e8c <UART_SetConfig+0x284>
 8005e7e:	e00b      	b.n	8005e98 <UART_SetConfig+0x290>
 8005e80:	2300      	movs	r3, #0
 8005e82:	76fb      	strb	r3, [r7, #27]
 8005e84:	e00d      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005e86:	2302      	movs	r3, #2
 8005e88:	76fb      	strb	r3, [r7, #27]
 8005e8a:	e00a      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	76fb      	strb	r3, [r7, #27]
 8005e90:	e007      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005e92:	2308      	movs	r3, #8
 8005e94:	76fb      	strb	r3, [r7, #27]
 8005e96:	e004      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	76fb      	strb	r3, [r7, #27]
 8005e9c:	e001      	b.n	8005ea2 <UART_SetConfig+0x29a>
 8005e9e:	2310      	movs	r3, #16
 8005ea0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a15      	ldr	r2, [pc, #84]	; (8005efc <UART_SetConfig+0x2f4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	f040 80a3 	bne.w	8005ff4 <UART_SetConfig+0x3ec>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eae:	7efb      	ldrb	r3, [r7, #27]
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d83b      	bhi.n	8005f2c <UART_SetConfig+0x324>
 8005eb4:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <UART_SetConfig+0x2b4>)
 8005eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eba:	bf00      	nop
 8005ebc:	08005ee1 	.word	0x08005ee1
 8005ec0:	08005ee9 	.word	0x08005ee9
 8005ec4:	08005ef1 	.word	0x08005ef1
 8005ec8:	08005f2d 	.word	0x08005f2d
 8005ecc:	08005f1d 	.word	0x08005f1d
 8005ed0:	08005f2d 	.word	0x08005f2d
 8005ed4:	08005f2d 	.word	0x08005f2d
 8005ed8:	08005f2d 	.word	0x08005f2d
 8005edc:	08005f25 	.word	0x08005f25
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee0:	f7fe fef4 	bl	8004ccc <HAL_RCC_GetPCLK1Freq>
 8005ee4:	6178      	str	r0, [r7, #20]
        break;
 8005ee6:	e026      	b.n	8005f36 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ee8:	f7fe ff04 	bl	8004cf4 <HAL_RCC_GetPCLK2Freq>
 8005eec:	6178      	str	r0, [r7, #20]
        break;
 8005eee:	e022      	b.n	8005f36 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef0:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <UART_SetConfig+0x310>)
 8005ef2:	617b      	str	r3, [r7, #20]
        break;
 8005ef4:	e01f      	b.n	8005f36 <UART_SetConfig+0x32e>
 8005ef6:	bf00      	nop
 8005ef8:	cfff69f3 	.word	0xcfff69f3
 8005efc:	40008000 	.word	0x40008000
 8005f00:	40013800 	.word	0x40013800
 8005f04:	40021000 	.word	0x40021000
 8005f08:	40004400 	.word	0x40004400
 8005f0c:	40004800 	.word	0x40004800
 8005f10:	40004c00 	.word	0x40004c00
 8005f14:	40005000 	.word	0x40005000
 8005f18:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f1c:	f7fe fe24 	bl	8004b68 <HAL_RCC_GetSysClockFreq>
 8005f20:	6178      	str	r0, [r7, #20]
        break;
 8005f22:	e008      	b.n	8005f36 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f28:	617b      	str	r3, [r7, #20]
        break;
 8005f2a:	e004      	b.n	8005f36 <UART_SetConfig+0x32e>
      default:
        pclk = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	76bb      	strb	r3, [r7, #26]
        break;
 8005f34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 811b 	beq.w	8006174 <UART_SetConfig+0x56c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	4a96      	ldr	r2, [pc, #600]	; (800619c <UART_SetConfig+0x594>)
 8005f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f50:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	4613      	mov	r3, r2
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	4413      	add	r3, r2
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d305      	bcc.n	8005f6e <UART_SetConfig+0x366>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d902      	bls.n	8005f74 <UART_SetConfig+0x36c>
      {
        ret = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	76bb      	strb	r3, [r7, #26]
 8005f72:	e0ff      	b.n	8006174 <UART_SetConfig+0x56c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f04f 0100 	mov.w	r1, #0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	4a86      	ldr	r2, [pc, #536]	; (800619c <UART_SetConfig+0x594>)
 8005f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	f7fa f952 	bl	8000234 <__aeabi_uldivmod>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4610      	mov	r0, r2
 8005f96:	4619      	mov	r1, r3
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	020b      	lsls	r3, r1, #8
 8005fa2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fa6:	0202      	lsls	r2, r0, #8
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	6849      	ldr	r1, [r1, #4]
 8005fac:	0849      	lsrs	r1, r1, #1
 8005fae:	4608      	mov	r0, r1
 8005fb0:	f04f 0100 	mov.w	r1, #0
 8005fb4:	1814      	adds	r4, r2, r0
 8005fb6:	eb43 0501 	adc.w	r5, r3, r1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	f7fa f934 	bl	8000234 <__aeabi_uldivmod>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fda:	d308      	bcc.n	8005fee <UART_SetConfig+0x3e6>
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fe2:	d204      	bcs.n	8005fee <UART_SetConfig+0x3e6>
        {
          huart->Instance->BRR = usartdiv;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	60da      	str	r2, [r3, #12]
 8005fec:	e0c2      	b.n	8006174 <UART_SetConfig+0x56c>
        }
        else
        {
          ret = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	76bb      	strb	r3, [r7, #26]
 8005ff2:	e0bf      	b.n	8006174 <UART_SetConfig+0x56c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ffc:	d165      	bne.n	80060ca <UART_SetConfig+0x4c2>
  {
    switch (clocksource)
 8005ffe:	7efb      	ldrb	r3, [r7, #27]
 8006000:	2b08      	cmp	r3, #8
 8006002:	d828      	bhi.n	8006056 <UART_SetConfig+0x44e>
 8006004:	a201      	add	r2, pc, #4	; (adr r2, 800600c <UART_SetConfig+0x404>)
 8006006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600a:	bf00      	nop
 800600c:	08006031 	.word	0x08006031
 8006010:	08006039 	.word	0x08006039
 8006014:	08006041 	.word	0x08006041
 8006018:	08006057 	.word	0x08006057
 800601c:	08006047 	.word	0x08006047
 8006020:	08006057 	.word	0x08006057
 8006024:	08006057 	.word	0x08006057
 8006028:	08006057 	.word	0x08006057
 800602c:	0800604f 	.word	0x0800604f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006030:	f7fe fe4c 	bl	8004ccc <HAL_RCC_GetPCLK1Freq>
 8006034:	6178      	str	r0, [r7, #20]
        break;
 8006036:	e013      	b.n	8006060 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006038:	f7fe fe5c 	bl	8004cf4 <HAL_RCC_GetPCLK2Freq>
 800603c:	6178      	str	r0, [r7, #20]
        break;
 800603e:	e00f      	b.n	8006060 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006040:	4b57      	ldr	r3, [pc, #348]	; (80061a0 <UART_SetConfig+0x598>)
 8006042:	617b      	str	r3, [r7, #20]
        break;
 8006044:	e00c      	b.n	8006060 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006046:	f7fe fd8f 	bl	8004b68 <HAL_RCC_GetSysClockFreq>
 800604a:	6178      	str	r0, [r7, #20]
        break;
 800604c:	e008      	b.n	8006060 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800604e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006052:	617b      	str	r3, [r7, #20]
        break;
 8006054:	e004      	b.n	8006060 <UART_SetConfig+0x458>
      default:
        pclk = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	76bb      	strb	r3, [r7, #26]
        break;
 800605e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 8086 	beq.w	8006174 <UART_SetConfig+0x56c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	4a4b      	ldr	r2, [pc, #300]	; (800619c <UART_SetConfig+0x594>)
 800606e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006072:	461a      	mov	r2, r3
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	fbb3 f3f2 	udiv	r3, r3, r2
 800607a:	005a      	lsls	r2, r3, #1
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	441a      	add	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	fbb2 f3f3 	udiv	r3, r2, r3
 800608c:	b29b      	uxth	r3, r3
 800608e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	2b0f      	cmp	r3, #15
 8006094:	d916      	bls.n	80060c4 <UART_SetConfig+0x4bc>
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800609c:	d212      	bcs.n	80060c4 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f023 030f 	bic.w	r3, r3, #15
 80060a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	085b      	lsrs	r3, r3, #1
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	89fb      	ldrh	r3, [r7, #14]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	89fa      	ldrh	r2, [r7, #14]
 80060c0:	60da      	str	r2, [r3, #12]
 80060c2:	e057      	b.n	8006174 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	76bb      	strb	r3, [r7, #26]
 80060c8:	e054      	b.n	8006174 <UART_SetConfig+0x56c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060ca:	7efb      	ldrb	r3, [r7, #27]
 80060cc:	2b08      	cmp	r3, #8
 80060ce:	d828      	bhi.n	8006122 <UART_SetConfig+0x51a>
 80060d0:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <UART_SetConfig+0x4d0>)
 80060d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d6:	bf00      	nop
 80060d8:	080060fd 	.word	0x080060fd
 80060dc:	08006105 	.word	0x08006105
 80060e0:	0800610d 	.word	0x0800610d
 80060e4:	08006123 	.word	0x08006123
 80060e8:	08006113 	.word	0x08006113
 80060ec:	08006123 	.word	0x08006123
 80060f0:	08006123 	.word	0x08006123
 80060f4:	08006123 	.word	0x08006123
 80060f8:	0800611b 	.word	0x0800611b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060fc:	f7fe fde6 	bl	8004ccc <HAL_RCC_GetPCLK1Freq>
 8006100:	6178      	str	r0, [r7, #20]
        break;
 8006102:	e013      	b.n	800612c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006104:	f7fe fdf6 	bl	8004cf4 <HAL_RCC_GetPCLK2Freq>
 8006108:	6178      	str	r0, [r7, #20]
        break;
 800610a:	e00f      	b.n	800612c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800610c:	4b24      	ldr	r3, [pc, #144]	; (80061a0 <UART_SetConfig+0x598>)
 800610e:	617b      	str	r3, [r7, #20]
        break;
 8006110:	e00c      	b.n	800612c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006112:	f7fe fd29 	bl	8004b68 <HAL_RCC_GetSysClockFreq>
 8006116:	6178      	str	r0, [r7, #20]
        break;
 8006118:	e008      	b.n	800612c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800611a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800611e:	617b      	str	r3, [r7, #20]
        break;
 8006120:	e004      	b.n	800612c <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	76bb      	strb	r3, [r7, #26]
        break;
 800612a:	bf00      	nop
    }

    if (pclk != 0U)
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d020      	beq.n	8006174 <UART_SetConfig+0x56c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	4a19      	ldr	r2, [pc, #100]	; (800619c <UART_SetConfig+0x594>)
 8006138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800613c:	461a      	mov	r2, r3
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	fbb3 f2f2 	udiv	r2, r3, r2
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	085b      	lsrs	r3, r3, #1
 800614a:	441a      	add	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	fbb2 f3f3 	udiv	r3, r2, r3
 8006154:	b29b      	uxth	r3, r3
 8006156:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	2b0f      	cmp	r3, #15
 800615c:	d908      	bls.n	8006170 <UART_SetConfig+0x568>
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006164:	d204      	bcs.n	8006170 <UART_SetConfig+0x568>
      {
        huart->Instance->BRR = usartdiv;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	60da      	str	r2, [r3, #12]
 800616e:	e001      	b.n	8006174 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006190:	7ebb      	ldrb	r3, [r7, #26]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3720      	adds	r7, #32
 8006196:	46bd      	mov	sp, r7
 8006198:	bdb0      	pop	{r4, r5, r7, pc}
 800619a:	bf00      	nop
 800619c:	0800afd4 	.word	0x0800afd4
 80061a0:	00f42400 	.word	0x00f42400

080061a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00a      	beq.n	8006212 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00a      	beq.n	8006256 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625a:	f003 0320 	and.w	r3, r3, #32
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006280:	2b00      	cmp	r3, #0
 8006282:	d01a      	beq.n	80062ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a2:	d10a      	bne.n	80062ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	605a      	str	r2, [r3, #4]
  }
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062f8:	f7fa fe68 	bl	8000fcc <HAL_GetTick>
 80062fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0308 	and.w	r3, r3, #8
 8006308:	2b08      	cmp	r3, #8
 800630a:	d10e      	bne.n	800632a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800630c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f82f 	bl	800637e <UART_WaitOnFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e025      	b.n	8006376 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b04      	cmp	r3, #4
 8006336:	d10e      	bne.n	8006356 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f819 	bl	800637e <UART_WaitOnFlagUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e00f      	b.n	8006376 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	60f8      	str	r0, [r7, #12]
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	603b      	str	r3, [r7, #0]
 800638a:	4613      	mov	r3, r2
 800638c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638e:	e062      	b.n	8006456 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006396:	d05e      	beq.n	8006456 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006398:	f7fa fe18 	bl	8000fcc <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d302      	bcc.n	80063ae <UART_WaitOnFlagUntilTimeout+0x30>
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d11d      	bne.n	80063ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0201 	bic.w	r2, r2, #1
 80063cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2220      	movs	r2, #32
 80063da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e045      	b.n	8006476 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d02e      	beq.n	8006456 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006406:	d126      	bne.n	8006456 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006410:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006420:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0201 	bic.w	r2, r2, #1
 8006430:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2220      	movs	r2, #32
 8006436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2220      	movs	r2, #32
 800643e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2220      	movs	r2, #32
 8006446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e00f      	b.n	8006476 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	4013      	ands	r3, r2
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	429a      	cmp	r2, r3
 8006464:	bf0c      	ite	eq
 8006466:	2301      	moveq	r3, #1
 8006468:	2300      	movne	r3, #0
 800646a:	b2db      	uxtb	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	79fb      	ldrb	r3, [r7, #7]
 8006470:	429a      	cmp	r2, r3
 8006472:	d08d      	beq.n	8006390 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800647e:	b480      	push	{r7}
 8006480:	b085      	sub	sp, #20
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_UARTEx_DisableFifoMode+0x16>
 8006490:	2302      	movs	r3, #2
 8006492:	e027      	b.n	80064e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2224      	movs	r2, #36	; 0x24
 80064a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0201 	bic.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006504:	2302      	movs	r3, #2
 8006506:	e02d      	b.n	8006564 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2224      	movs	r2, #36	; 0x24
 8006514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0201 	bic.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f84f 	bl	80065e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2220      	movs	r2, #32
 8006556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006580:	2302      	movs	r3, #2
 8006582:	e02d      	b.n	80065e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2224      	movs	r2, #36	; 0x24
 8006590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 0201 	bic.w	r2, r2, #1
 80065aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f811 	bl	80065e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d108      	bne.n	800660a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006608:	e031      	b.n	800666e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800660a:	2308      	movs	r3, #8
 800660c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800660e:	2308      	movs	r3, #8
 8006610:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	0e5b      	lsrs	r3, r3, #25
 800661a:	b2db      	uxtb	r3, r3
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	0f5b      	lsrs	r3, r3, #29
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006632:	7bbb      	ldrb	r3, [r7, #14]
 8006634:	7b3a      	ldrb	r2, [r7, #12]
 8006636:	4911      	ldr	r1, [pc, #68]	; (800667c <UARTEx_SetNbDataToProcess+0x94>)
 8006638:	5c8a      	ldrb	r2, [r1, r2]
 800663a:	fb02 f303 	mul.w	r3, r2, r3
 800663e:	7b3a      	ldrb	r2, [r7, #12]
 8006640:	490f      	ldr	r1, [pc, #60]	; (8006680 <UARTEx_SetNbDataToProcess+0x98>)
 8006642:	5c8a      	ldrb	r2, [r1, r2]
 8006644:	fb93 f3f2 	sdiv	r3, r3, r2
 8006648:	b29a      	uxth	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	7b7a      	ldrb	r2, [r7, #13]
 8006654:	4909      	ldr	r1, [pc, #36]	; (800667c <UARTEx_SetNbDataToProcess+0x94>)
 8006656:	5c8a      	ldrb	r2, [r1, r2]
 8006658:	fb02 f303 	mul.w	r3, r2, r3
 800665c:	7b7a      	ldrb	r2, [r7, #13]
 800665e:	4908      	ldr	r1, [pc, #32]	; (8006680 <UARTEx_SetNbDataToProcess+0x98>)
 8006660:	5c8a      	ldrb	r2, [r1, r2]
 8006662:	fb93 f3f2 	sdiv	r3, r3, r2
 8006666:	b29a      	uxth	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	0800afec 	.word	0x0800afec
 8006680:	0800aff4 	.word	0x0800aff4

08006684 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006684:	b480      	push	{r7}
 8006686:	b08b      	sub	sp, #44	; 0x2c
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	fa93 f3a3 	rbit	r3, r3
 800669e:	613b      	str	r3, [r7, #16]
  return result;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80066aa:	2320      	movs	r3, #32
 80066ac:	e003      	b.n	80066b6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	fab3 f383 	clz	r3, r3
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	2103      	movs	r1, #3
 80066ba:	fa01 f303 	lsl.w	r3, r1, r3
 80066be:	43db      	mvns	r3, r3
 80066c0:	401a      	ands	r2, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	fa93 f3a3 	rbit	r3, r3
 80066cc:	61fb      	str	r3, [r7, #28]
  return result;
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80066d8:	2320      	movs	r3, #32
 80066da:	e003      	b.n	80066e4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	fab3 f383 	clz	r3, r3
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	fa01 f303 	lsl.w	r3, r1, r3
 80066ec:	431a      	orrs	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	601a      	str	r2, [r3, #0]
}
 80066f2:	bf00      	nop
 80066f4:	372c      	adds	r7, #44	; 0x2c
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	43db      	mvns	r3, r3
 8006712:	401a      	ands	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	6879      	ldr	r1, [r7, #4]
 8006718:	fb01 f303 	mul.w	r3, r1, r3
 800671c:	431a      	orrs	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	605a      	str	r2, [r3, #4]
}
 8006722:	bf00      	nop
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800672e:	b480      	push	{r7}
 8006730:	b08b      	sub	sp, #44	; 0x2c
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	fa93 f3a3 	rbit	r3, r3
 8006748:	613b      	str	r3, [r7, #16]
  return result;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006754:	2320      	movs	r3, #32
 8006756:	e003      	b.n	8006760 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	fab3 f383 	clz	r3, r3
 800675e:	b2db      	uxtb	r3, r3
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	2103      	movs	r1, #3
 8006764:	fa01 f303 	lsl.w	r3, r1, r3
 8006768:	43db      	mvns	r3, r3
 800676a:	401a      	ands	r2, r3
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	fa93 f3a3 	rbit	r3, r3
 8006776:	61fb      	str	r3, [r7, #28]
  return result;
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006782:	2320      	movs	r3, #32
 8006784:	e003      	b.n	800678e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	fab3 f383 	clz	r3, r3
 800678c:	b2db      	uxtb	r3, r3
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	6879      	ldr	r1, [r7, #4]
 8006792:	fa01 f303 	lsl.w	r3, r1, r3
 8006796:	431a      	orrs	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800679c:	bf00      	nop
 800679e:	372c      	adds	r7, #44	; 0x2c
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b08b      	sub	sp, #44	; 0x2c
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	fa93 f3a3 	rbit	r3, r3
 80067c2:	613b      	str	r3, [r7, #16]
  return result;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80067ce:	2320      	movs	r3, #32
 80067d0:	e003      	b.n	80067da <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	fab3 f383 	clz	r3, r3
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	2103      	movs	r1, #3
 80067de:	fa01 f303 	lsl.w	r3, r1, r3
 80067e2:	43db      	mvns	r3, r3
 80067e4:	401a      	ands	r2, r3
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	fa93 f3a3 	rbit	r3, r3
 80067f0:	61fb      	str	r3, [r7, #28]
  return result;
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80067fc:	2320      	movs	r3, #32
 80067fe:	e003      	b.n	8006808 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	fab3 f383 	clz	r3, r3
 8006806:	b2db      	uxtb	r3, r3
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	fa01 f303 	lsl.w	r3, r1, r3
 8006810:	431a      	orrs	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	60da      	str	r2, [r3, #12]
}
 8006816:	bf00      	nop
 8006818:	372c      	adds	r7, #44	; 0x2c
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006822:	b480      	push	{r7}
 8006824:	b08b      	sub	sp, #44	; 0x2c
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a1a      	ldr	r2, [r3, #32]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	fa93 f3a3 	rbit	r3, r3
 800683c:	613b      	str	r3, [r7, #16]
  return result;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006848:	2320      	movs	r3, #32
 800684a:	e003      	b.n	8006854 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	fab3 f383 	clz	r3, r3
 8006852:	b2db      	uxtb	r3, r3
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	210f      	movs	r1, #15
 8006858:	fa01 f303 	lsl.w	r3, r1, r3
 800685c:	43db      	mvns	r3, r3
 800685e:	401a      	ands	r2, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	fa93 f3a3 	rbit	r3, r3
 800686a:	61fb      	str	r3, [r7, #28]
  return result;
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006876:	2320      	movs	r3, #32
 8006878:	e003      	b.n	8006882 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	fab3 f383 	clz	r3, r3
 8006880:	b2db      	uxtb	r3, r3
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	fa01 f303 	lsl.w	r3, r1, r3
 800688a:	431a      	orrs	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006890:	bf00      	nop
 8006892:	372c      	adds	r7, #44	; 0x2c
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800689c:	b480      	push	{r7}
 800689e:	b08b      	sub	sp, #44	; 0x2c
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	0a1b      	lsrs	r3, r3, #8
 80068b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	fa93 f3a3 	rbit	r3, r3
 80068b8:	613b      	str	r3, [r7, #16]
  return result;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80068c4:	2320      	movs	r3, #32
 80068c6:	e003      	b.n	80068d0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	fab3 f383 	clz	r3, r3
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	210f      	movs	r1, #15
 80068d4:	fa01 f303 	lsl.w	r3, r1, r3
 80068d8:	43db      	mvns	r3, r3
 80068da:	401a      	ands	r2, r3
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	0a1b      	lsrs	r3, r3, #8
 80068e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	fa93 f3a3 	rbit	r3, r3
 80068e8:	61fb      	str	r3, [r7, #28]
  return result;
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80068f4:	2320      	movs	r3, #32
 80068f6:	e003      	b.n	8006900 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	fab3 f383 	clz	r3, r3
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	6879      	ldr	r1, [r7, #4]
 8006904:	fa01 f303 	lsl.w	r3, r1, r3
 8006908:	431a      	orrs	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800690e:	bf00      	nop
 8006910:	372c      	adds	r7, #44	; 0x2c
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b088      	sub	sp, #32
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	fa93 f3a3 	rbit	r3, r3
 8006930:	60fb      	str	r3, [r7, #12]
  return result;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <LL_GPIO_Init+0x26>
    return 32U;
 800693c:	2320      	movs	r3, #32
 800693e:	e003      	b.n	8006948 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	fab3 f383 	clz	r3, r3
 8006946:	b2db      	uxtb	r3, r3
 8006948:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800694a:	e047      	b.n	80069dc <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	2101      	movs	r1, #1
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	fa01 f303 	lsl.w	r3, r1, r3
 8006958:	4013      	ands	r3, r2
 800695a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d039      	beq.n	80069d6 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d003      	beq.n	8006972 <LL_GPIO_Init+0x58>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b02      	cmp	r3, #2
 8006970:	d10d      	bne.n	800698e <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	461a      	mov	r2, r3
 8006978:	69b9      	ldr	r1, [r7, #24]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff fed7 	bl	800672e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	461a      	mov	r2, r3
 8006986:	69b9      	ldr	r1, [r7, #24]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff feb8 	bl	80066fe <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	461a      	mov	r2, r3
 8006994:	69b9      	ldr	r1, [r7, #24]
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7ff ff06 	bl	80067a8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d111      	bne.n	80069c8 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	2bff      	cmp	r3, #255	; 0xff
 80069a8:	d807      	bhi.n	80069ba <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	461a      	mov	r2, r3
 80069b0:	69b9      	ldr	r1, [r7, #24]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7ff ff35 	bl	8006822 <LL_GPIO_SetAFPin_0_7>
 80069b8:	e006      	b.n	80069c8 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	461a      	mov	r2, r3
 80069c0:	69b9      	ldr	r1, [r7, #24]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff ff6a 	bl	800689c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	461a      	mov	r2, r3
 80069ce:	69b9      	ldr	r1, [r7, #24]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff fe57 	bl	8006684 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	3301      	adds	r3, #1
 80069da:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	fa22 f303 	lsr.w	r3, r2, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1b0      	bne.n	800694c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3720      	adds	r7, #32
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a04:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006a08:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b085      	sub	sp, #20
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a2a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006a2e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	43db      	mvns	r3, r3
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	4013      	ands	r3, r2
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a58:	b084      	sub	sp, #16
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	f107 0014 	add.w	r0, r7, #20
 8006a66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	b004      	add	sp, #16
 8006a98:	4770      	bx	lr
	...

08006a9c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b09b      	sub	sp, #108	; 0x6c
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	78db      	ldrb	r3, [r3, #3]
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d81f      	bhi.n	8006b0e <USB_ActivateEndpoint+0x72>
 8006ace:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <USB_ActivateEndpoint+0x38>)
 8006ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad4:	08006ae5 	.word	0x08006ae5
 8006ad8:	08006b01 	.word	0x08006b01
 8006adc:	08006b17 	.word	0x08006b17
 8006ae0:	08006af3 	.word	0x08006af3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006ae4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006ae8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006af0:	e012      	b.n	8006b18 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006af2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006af6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006afa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006afe:	e00b      	b.n	8006b18 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006b00:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b08:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006b0c:	e004      	b.n	8006b18 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006b14:	e000      	b.n	8006b18 <USB_ActivateEndpoint+0x7c>
      break;
 8006b16:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	441a      	add	r2, r3
 8006b22:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	b21b      	sxth	r3, r3
 8006b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b52:	b21a      	sxth	r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	b21b      	sxth	r3, r3
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	b21b      	sxth	r3, r3
 8006b5e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	441a      	add	r2, r3
 8006b6c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	7b1b      	ldrb	r3, [r3, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f040 8149 	bne.w	8006e20 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	785b      	ldrb	r3, [r3, #1]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 8084 	beq.w	8006ca0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	4413      	add	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	00da      	lsls	r2, r3, #3
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	88db      	ldrh	r3, [r3, #6]
 8006bc0:	085b      	lsrs	r3, r3, #1
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	81fb      	strh	r3, [r7, #14]
 8006bda:	89fb      	ldrh	r3, [r7, #14]
 8006bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d01b      	beq.n	8006c1c <USB_ActivateEndpoint+0x180>
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfa:	81bb      	strh	r3, [r7, #12]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	441a      	add	r2, r3
 8006c06:	89bb      	ldrh	r3, [r7, #12]
 8006c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	78db      	ldrb	r3, [r3, #3]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d020      	beq.n	8006c66 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c3a:	813b      	strh	r3, [r7, #8]
 8006c3c:	893b      	ldrh	r3, [r7, #8]
 8006c3e:	f083 0320 	eor.w	r3, r3, #32
 8006c42:	813b      	strh	r3, [r7, #8]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	441a      	add	r2, r3
 8006c4e:	893b      	ldrh	r3, [r7, #8]
 8006c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	8013      	strh	r3, [r2, #0]
 8006c64:	e27f      	b.n	8007166 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c7c:	817b      	strh	r3, [r7, #10]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	441a      	add	r2, r3
 8006c88:	897b      	ldrh	r3, [r7, #10]
 8006c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	8013      	strh	r3, [r2, #0]
 8006c9e:	e262      	b.n	8007166 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	461a      	mov	r2, r3
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	4413      	add	r3, r2
 8006cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	00da      	lsls	r2, r3, #3
 8006cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	88db      	ldrh	r3, [r3, #6]
 8006cc8:	085b      	lsrs	r3, r3, #1
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	4413      	add	r3, r2
 8006ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	00da      	lsls	r2, r3, #3
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cf6:	623b      	str	r3, [r7, #32]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d112      	bne.n	8006d26 <USB_ActivateEndpoint+0x28a>
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	801a      	strh	r2, [r3, #0]
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	801a      	strh	r2, [r3, #0]
 8006d24:	e02f      	b.n	8006d86 <USB_ActivateEndpoint+0x2ea>
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d2c:	d813      	bhi.n	8006d56 <USB_ActivateEndpoint+0x2ba>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	085b      	lsrs	r3, r3, #1
 8006d34:	663b      	str	r3, [r7, #96]	; 0x60
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <USB_ActivateEndpoint+0x2ac>
 8006d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d44:	3301      	adds	r3, #1
 8006d46:	663b      	str	r3, [r7, #96]	; 0x60
 8006d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	029b      	lsls	r3, r3, #10
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	801a      	strh	r2, [r3, #0]
 8006d54:	e017      	b.n	8006d86 <USB_ActivateEndpoint+0x2ea>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	095b      	lsrs	r3, r3, #5
 8006d5c:	663b      	str	r3, [r7, #96]	; 0x60
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d102      	bne.n	8006d70 <USB_ActivateEndpoint+0x2d4>
 8006d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	663b      	str	r3, [r7, #96]	; 0x60
 8006d70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	029b      	lsls	r3, r3, #10
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	83fb      	strh	r3, [r7, #30]
 8006d94:	8bfb      	ldrh	r3, [r7, #30]
 8006d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d01b      	beq.n	8006dd6 <USB_ActivateEndpoint+0x33a>
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db4:	83bb      	strh	r3, [r7, #28]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	441a      	add	r2, r3
 8006dc0:	8bbb      	ldrh	r3, [r7, #28]
 8006dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dec:	837b      	strh	r3, [r7, #26]
 8006dee:	8b7b      	ldrh	r3, [r7, #26]
 8006df0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006df4:	837b      	strh	r3, [r7, #26]
 8006df6:	8b7b      	ldrh	r3, [r7, #26]
 8006df8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006dfc:	837b      	strh	r3, [r7, #26]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	441a      	add	r2, r3
 8006e08:	8b7b      	ldrh	r3, [r7, #26]
 8006e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	8013      	strh	r3, [r2, #0]
 8006e1e:	e1a2      	b.n	8007166 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e36:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	441a      	add	r2, r3
 8006e44:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e50:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e6c:	4413      	add	r3, r2
 8006e6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	00da      	lsls	r2, r3, #3
 8006e76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e7e:	657b      	str	r3, [r7, #84]	; 0x54
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	891b      	ldrh	r3, [r3, #8]
 8006e84:	085b      	lsrs	r3, r3, #1
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e8e:	801a      	strh	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	653b      	str	r3, [r7, #80]	; 0x50
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea0:	4413      	add	r3, r2
 8006ea2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	00da      	lsls	r2, r3, #3
 8006eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eac:	4413      	add	r3, r2
 8006eae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	895b      	ldrh	r3, [r3, #10]
 8006eb8:	085b      	lsrs	r3, r3, #1
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	785b      	ldrb	r3, [r3, #1]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f040 8091 	bne.w	8006ff0 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006edc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d01b      	beq.n	8006f1e <USB_ActivateEndpoint+0x482>
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	441a      	add	r2, r3
 8006f08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	873b      	strh	r3, [r7, #56]	; 0x38
 8006f2c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d01b      	beq.n	8006f6e <USB_ActivateEndpoint+0x4d2>
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	441a      	add	r2, r3
 8006f58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f84:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006f86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006f88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f8c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006f8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006f90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f94:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	441a      	add	r2, r3
 8006fa0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fcc:	867b      	strh	r3, [r7, #50]	; 0x32
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	441a      	add	r2, r3
 8006fd8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	8013      	strh	r3, [r2, #0]
 8006fee:	e0ba      	b.n	8007166 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007000:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01d      	beq.n	8007048 <USB_ActivateEndpoint+0x5ac>
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	b29b      	uxth	r3, r3
 800701a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007022:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	441a      	add	r2, r3
 8007030:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800703c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007044:	b29b      	uxth	r3, r3
 8007046:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007058:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800705c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01d      	beq.n	80070a0 <USB_ActivateEndpoint+0x604>
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	b29b      	uxth	r3, r3
 8007072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	441a      	add	r2, r3
 8007088:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800708c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007098:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800709c:	b29b      	uxth	r3, r3
 800709e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	78db      	ldrb	r3, [r3, #3]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d024      	beq.n	80070f2 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80070c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070c6:	f083 0320 	eor.w	r3, r3, #32
 80070ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	441a      	add	r2, r3
 80070d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	8013      	strh	r3, [r2, #0]
 80070f0:	e01d      	b.n	800712e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007108:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	441a      	add	r2, r3
 8007116:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800711a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800711e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800712a:	b29b      	uxth	r3, r3
 800712c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007144:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	441a      	add	r2, r3
 8007150:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800715a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800715e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007162:	b29b      	uxth	r3, r3
 8007164:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007166:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800716a:	4618      	mov	r0, r3
 800716c:	376c      	adds	r7, #108	; 0x6c
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop

08007178 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007178:	b480      	push	{r7}
 800717a:	b08d      	sub	sp, #52	; 0x34
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	7b1b      	ldrb	r3, [r3, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	f040 808e 	bne.w	80072a8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	785b      	ldrb	r3, [r3, #1]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d044      	beq.n	800721e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	81bb      	strh	r3, [r7, #12]
 80071a2:	89bb      	ldrh	r3, [r7, #12]
 80071a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01b      	beq.n	80071e4 <USB_DeactivateEndpoint+0x6c>
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c2:	817b      	strh	r3, [r7, #10]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	441a      	add	r2, r3
 80071ce:	897b      	ldrh	r3, [r7, #10]
 80071d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fa:	813b      	strh	r3, [r7, #8]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	441a      	add	r2, r3
 8007206:	893b      	ldrh	r3, [r7, #8]
 8007208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800720c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007218:	b29b      	uxth	r3, r3
 800721a:	8013      	strh	r3, [r2, #0]
 800721c:	e192      	b.n	8007544 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	827b      	strh	r3, [r7, #18]
 800722c:	8a7b      	ldrh	r3, [r7, #18]
 800722e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d01b      	beq.n	800726e <USB_DeactivateEndpoint+0xf6>
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b29b      	uxth	r3, r3
 8007244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724c:	823b      	strh	r3, [r7, #16]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	441a      	add	r2, r3
 8007258:	8a3b      	ldrh	r3, [r7, #16]
 800725a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800725e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726a:	b29b      	uxth	r3, r3
 800726c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007284:	81fb      	strh	r3, [r7, #14]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	441a      	add	r2, r3
 8007290:	89fb      	ldrh	r3, [r7, #14]
 8007292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800729e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	8013      	strh	r3, [r2, #0]
 80072a6:	e14d      	b.n	8007544 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f040 80a5 	bne.w	80073fc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	843b      	strh	r3, [r7, #32]
 80072c0:	8c3b      	ldrh	r3, [r7, #32]
 80072c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d01b      	beq.n	8007302 <USB_DeactivateEndpoint+0x18a>
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e0:	83fb      	strh	r3, [r7, #30]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	441a      	add	r2, r3
 80072ec:	8bfb      	ldrh	r3, [r7, #30]
 80072ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072fe:	b29b      	uxth	r3, r3
 8007300:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	83bb      	strh	r3, [r7, #28]
 8007310:	8bbb      	ldrh	r3, [r7, #28]
 8007312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	d01b      	beq.n	8007352 <USB_DeactivateEndpoint+0x1da>
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	b29b      	uxth	r3, r3
 8007328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800732c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007330:	837b      	strh	r3, [r7, #26]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	441a      	add	r2, r3
 800733c:	8b7b      	ldrh	r3, [r7, #26]
 800733e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800734a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800734e:	b29b      	uxth	r3, r3
 8007350:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007368:	833b      	strh	r3, [r7, #24]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	441a      	add	r2, r3
 8007374:	8b3b      	ldrh	r3, [r7, #24]
 8007376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800737a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800737e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007382:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007386:	b29b      	uxth	r3, r3
 8007388:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800739c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a0:	82fb      	strh	r3, [r7, #22]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	441a      	add	r2, r3
 80073ac:	8afb      	ldrh	r3, [r7, #22]
 80073ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073be:	b29b      	uxth	r3, r3
 80073c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d8:	82bb      	strh	r3, [r7, #20]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	441a      	add	r2, r3
 80073e4:	8abb      	ldrh	r3, [r7, #20]
 80073e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	8013      	strh	r3, [r2, #0]
 80073fa:	e0a3      	b.n	8007544 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800740a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800740c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d01b      	beq.n	800744c <USB_DeactivateEndpoint+0x2d4>
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29b      	uxth	r3, r3
 8007422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	441a      	add	r2, r3
 8007436:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800743c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007448:	b29b      	uxth	r3, r3
 800744a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	857b      	strh	r3, [r7, #42]	; 0x2a
 800745a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800745c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007460:	2b00      	cmp	r3, #0
 8007462:	d01b      	beq.n	800749c <USB_DeactivateEndpoint+0x324>
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29b      	uxth	r3, r3
 8007472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747a:	853b      	strh	r3, [r7, #40]	; 0x28
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	441a      	add	r2, r3
 8007486:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800748c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007494:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007498:	b29b      	uxth	r3, r3
 800749a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	441a      	add	r2, r3
 80074be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	441a      	add	r2, r3
 80074f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007508:	b29b      	uxth	r3, r3
 800750a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800751e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007522:	847b      	strh	r3, [r7, #34]	; 0x22
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	441a      	add	r2, r3
 800752e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800753c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007540:	b29b      	uxth	r3, r3
 8007542:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3734      	adds	r7, #52	; 0x34
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b0cc      	sub	sp, #304	; 0x130
 8007556:	af00      	add	r7, sp, #0
 8007558:	1d3b      	adds	r3, r7, #4
 800755a:	6018      	str	r0, [r3, #0]
 800755c:	463b      	mov	r3, r7
 800755e:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007560:	463b      	mov	r3, r7
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	785b      	ldrb	r3, [r3, #1]
 8007566:	2b01      	cmp	r3, #1
 8007568:	f040 872e 	bne.w	80083c8 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800756c:	463b      	mov	r3, r7
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	463b      	mov	r3, r7
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	429a      	cmp	r2, r3
 800757a:	d905      	bls.n	8007588 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800757c:	463b      	mov	r3, r7
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007586:	e004      	b.n	8007592 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007588:	463b      	mov	r3, r7
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007592:	463b      	mov	r3, r7
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	7b1b      	ldrb	r3, [r3, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d134      	bne.n	8007606 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800759c:	463b      	mov	r3, r7
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6959      	ldr	r1, [r3, #20]
 80075a2:	463b      	mov	r3, r7
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	88da      	ldrh	r2, [r3, #6]
 80075a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	1d38      	adds	r0, r7, #4
 80075b0:	6800      	ldr	r0, [r0, #0]
 80075b2:	f001 fbff 	bl	8008db4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075b6:	f107 0310 	add.w	r3, r7, #16
 80075ba:	1d3a      	adds	r2, r7, #4
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	1d3b      	adds	r3, r7, #4
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	4619      	mov	r1, r3
 80075cc:	f107 0310 	add.w	r3, r7, #16
 80075d0:	f107 0210 	add.w	r2, r7, #16
 80075d4:	6812      	ldr	r2, [r2, #0]
 80075d6:	440a      	add	r2, r1
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	463b      	mov	r3, r7
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	00da      	lsls	r2, r3, #3
 80075e2:	f107 0310 	add.w	r3, r7, #16
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4413      	add	r3, r2
 80075ea:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80075ee:	f107 030c 	add.w	r3, r7, #12
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	f107 030c 	add.w	r3, r7, #12
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	801a      	strh	r2, [r3, #0]
 8007602:	f000 beac 	b.w	800835e <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007606:	463b      	mov	r3, r7
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	78db      	ldrb	r3, [r3, #3]
 800760c:	2b02      	cmp	r3, #2
 800760e:	f040 838c 	bne.w	8007d2a <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007612:	463b      	mov	r3, r7
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6a1a      	ldr	r2, [r3, #32]
 8007618:	463b      	mov	r3, r7
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	429a      	cmp	r2, r3
 8007620:	f240 8330 	bls.w	8007c84 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007624:	1d3b      	adds	r3, r7, #4
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	463b      	mov	r3, r7
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800763a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800763e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007642:	1d3b      	adds	r3, r7, #4
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	463b      	mov	r3, r7
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	441a      	add	r2, r3
 8007650:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800765c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007664:	b29b      	uxth	r3, r3
 8007666:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007668:	463b      	mov	r3, r7
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6a1a      	ldr	r2, [r3, #32]
 800766e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007672:	1ad2      	subs	r2, r2, r3
 8007674:	463b      	mov	r3, r7
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800767a:	1d3b      	adds	r3, r7, #4
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	463b      	mov	r3, r7
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 819e 	beq.w	80079d2 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007696:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800769a:	1d3a      	adds	r2, r7, #4
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	463b      	mov	r3, r7
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	785b      	ldrb	r3, [r3, #1]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d17a      	bne.n	80077a0 <USB_EPStartXfer+0x24e>
 80076aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076ae:	1d3a      	adds	r2, r7, #4
 80076b0:	6812      	ldr	r2, [r2, #0]
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	1d3b      	adds	r3, r7, #4
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076bc:	b29b      	uxth	r3, r3
 80076be:	4619      	mov	r1, r3
 80076c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80076c8:	6812      	ldr	r2, [r2, #0]
 80076ca:	440a      	add	r2, r1
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	463b      	mov	r3, r7
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	00da      	lsls	r2, r3, #3
 80076d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4413      	add	r3, r2
 80076de:	f203 4206 	addw	r2, r3, #1030	; 0x406
 80076e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d11a      	bne.n	8007726 <USB_EPStartXfer+0x1d4>
 80076f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076fe:	b29a      	uxth	r2, r3
 8007700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	801a      	strh	r2, [r3, #0]
 8007708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	b29b      	uxth	r3, r3
 8007712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800771a:	b29a      	uxth	r2, r3
 800771c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	801a      	strh	r2, [r3, #0]
 8007724:	e062      	b.n	80077ec <USB_EPStartXfer+0x29a>
 8007726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800772a:	2b3e      	cmp	r3, #62	; 0x3e
 800772c:	d819      	bhi.n	8007762 <USB_EPStartXfer+0x210>
 800772e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007732:	085b      	lsrs	r3, r3, #1
 8007734:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b00      	cmp	r3, #0
 8007742:	d004      	beq.n	800774e <USB_EPStartXfer+0x1fc>
 8007744:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007748:	3301      	adds	r3, #1
 800774a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800774e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007752:	b29b      	uxth	r3, r3
 8007754:	029b      	lsls	r3, r3, #10
 8007756:	b29a      	uxth	r2, r3
 8007758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	801a      	strh	r2, [r3, #0]
 8007760:	e044      	b.n	80077ec <USB_EPStartXfer+0x29a>
 8007762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007766:	095b      	lsrs	r3, r3, #5
 8007768:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800776c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007770:	f003 031f 	and.w	r3, r3, #31
 8007774:	2b00      	cmp	r3, #0
 8007776:	d104      	bne.n	8007782 <USB_EPStartXfer+0x230>
 8007778:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800777c:	3b01      	subs	r3, #1
 800777e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007782:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007786:	b29b      	uxth	r3, r3
 8007788:	029b      	lsls	r3, r3, #10
 800778a:	b29b      	uxth	r3, r3
 800778c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007794:	b29a      	uxth	r2, r3
 8007796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	801a      	strh	r2, [r3, #0]
 800779e:	e025      	b.n	80077ec <USB_EPStartXfer+0x29a>
 80077a0:	463b      	mov	r3, r7
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d120      	bne.n	80077ec <USB_EPStartXfer+0x29a>
 80077aa:	1d3b      	adds	r3, r7, #4
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	4619      	mov	r1, r3
 80077b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077ba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80077be:	6812      	ldr	r2, [r2, #0]
 80077c0:	440a      	add	r2, r1
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	463b      	mov	r3, r7
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	00da      	lsls	r2, r3, #3
 80077cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4413      	add	r3, r2
 80077d4:	f203 4206 	addw	r2, r3, #1030	; 0x406
 80077d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80077ec:	463b      	mov	r3, r7
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	895b      	ldrh	r3, [r3, #10]
 80077f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077f6:	463b      	mov	r3, r7
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6959      	ldr	r1, [r3, #20]
 80077fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007800:	b29b      	uxth	r3, r3
 8007802:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007806:	1d38      	adds	r0, r7, #4
 8007808:	6800      	ldr	r0, [r0, #0]
 800780a:	f001 fad3 	bl	8008db4 <USB_WritePMA>
            ep->xfer_buff += len;
 800780e:	463b      	mov	r3, r7
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	695a      	ldr	r2, [r3, #20]
 8007814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007818:	441a      	add	r2, r3
 800781a:	463b      	mov	r3, r7
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007820:	463b      	mov	r3, r7
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6a1a      	ldr	r2, [r3, #32]
 8007826:	463b      	mov	r3, r7
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	429a      	cmp	r2, r3
 800782e:	d909      	bls.n	8007844 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8007830:	463b      	mov	r3, r7
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6a1a      	ldr	r2, [r3, #32]
 8007836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783a:	1ad2      	subs	r2, r2, r3
 800783c:	463b      	mov	r3, r7
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	621a      	str	r2, [r3, #32]
 8007842:	e008      	b.n	8007856 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8007844:	463b      	mov	r3, r7
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800784e:	463b      	mov	r3, r7
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2200      	movs	r2, #0
 8007854:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007856:	463b      	mov	r3, r7
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	785b      	ldrb	r3, [r3, #1]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d17a      	bne.n	8007956 <USB_EPStartXfer+0x404>
 8007860:	f107 0318 	add.w	r3, r7, #24
 8007864:	1d3a      	adds	r2, r7, #4
 8007866:	6812      	ldr	r2, [r2, #0]
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	1d3b      	adds	r3, r7, #4
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007872:	b29b      	uxth	r3, r3
 8007874:	4619      	mov	r1, r3
 8007876:	f107 0318 	add.w	r3, r7, #24
 800787a:	f107 0218 	add.w	r2, r7, #24
 800787e:	6812      	ldr	r2, [r2, #0]
 8007880:	440a      	add	r2, r1
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	463b      	mov	r3, r7
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	00da      	lsls	r2, r3, #3
 800788c:	f107 0318 	add.w	r3, r7, #24
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4413      	add	r3, r2
 8007894:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8007898:	f107 0314 	add.w	r3, r7, #20
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d11a      	bne.n	80078dc <USB_EPStartXfer+0x38a>
 80078a6:	f107 0314 	add.w	r3, r7, #20
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	f107 0314 	add.w	r3, r7, #20
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	801a      	strh	r2, [r3, #0]
 80078be:	f107 0314 	add.w	r3, r7, #20
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	f107 0314 	add.w	r3, r7, #20
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	801a      	strh	r2, [r3, #0]
 80078da:	e067      	b.n	80079ac <USB_EPStartXfer+0x45a>
 80078dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e0:	2b3e      	cmp	r3, #62	; 0x3e
 80078e2:	d819      	bhi.n	8007918 <USB_EPStartXfer+0x3c6>
 80078e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e8:	085b      	lsrs	r3, r3, #1
 80078ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80078ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d004      	beq.n	8007904 <USB_EPStartXfer+0x3b2>
 80078fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80078fe:	3301      	adds	r3, #1
 8007900:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007904:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007908:	b29b      	uxth	r3, r3
 800790a:	029b      	lsls	r3, r3, #10
 800790c:	b29a      	uxth	r2, r3
 800790e:	f107 0314 	add.w	r3, r7, #20
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	801a      	strh	r2, [r3, #0]
 8007916:	e049      	b.n	80079ac <USB_EPStartXfer+0x45a>
 8007918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800791c:	095b      	lsrs	r3, r3, #5
 800791e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007926:	f003 031f 	and.w	r3, r3, #31
 800792a:	2b00      	cmp	r3, #0
 800792c:	d104      	bne.n	8007938 <USB_EPStartXfer+0x3e6>
 800792e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007932:	3b01      	subs	r3, #1
 8007934:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007938:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800793c:	b29b      	uxth	r3, r3
 800793e:	029b      	lsls	r3, r3, #10
 8007940:	b29b      	uxth	r3, r3
 8007942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794a:	b29a      	uxth	r2, r3
 800794c:	f107 0314 	add.w	r3, r7, #20
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	801a      	strh	r2, [r3, #0]
 8007954:	e02a      	b.n	80079ac <USB_EPStartXfer+0x45a>
 8007956:	463b      	mov	r3, r7
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	785b      	ldrb	r3, [r3, #1]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d125      	bne.n	80079ac <USB_EPStartXfer+0x45a>
 8007960:	f107 0320 	add.w	r3, r7, #32
 8007964:	1d3a      	adds	r2, r7, #4
 8007966:	6812      	ldr	r2, [r2, #0]
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	1d3b      	adds	r3, r7, #4
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007972:	b29b      	uxth	r3, r3
 8007974:	4619      	mov	r1, r3
 8007976:	f107 0320 	add.w	r3, r7, #32
 800797a:	f107 0220 	add.w	r2, r7, #32
 800797e:	6812      	ldr	r2, [r2, #0]
 8007980:	440a      	add	r2, r1
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	463b      	mov	r3, r7
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	00da      	lsls	r2, r3, #3
 800798c:	f107 0320 	add.w	r3, r7, #32
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4413      	add	r3, r2
 8007994:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8007998:	f107 031c 	add.w	r3, r7, #28
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	f107 031c 	add.w	r3, r7, #28
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80079ac:	463b      	mov	r3, r7
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	891b      	ldrh	r3, [r3, #8]
 80079b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079b6:	463b      	mov	r3, r7
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6959      	ldr	r1, [r3, #20]
 80079bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80079c6:	1d38      	adds	r0, r7, #4
 80079c8:	6800      	ldr	r0, [r0, #0]
 80079ca:	f001 f9f3 	bl	8008db4 <USB_WritePMA>
 80079ce:	f000 bcc6 	b.w	800835e <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079d2:	463b      	mov	r3, r7
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	785b      	ldrb	r3, [r3, #1]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d164      	bne.n	8007aa6 <USB_EPStartXfer+0x554>
 80079dc:	1d3b      	adds	r3, r7, #4
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80079e2:	1d3b      	adds	r3, r7, #4
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	461a      	mov	r2, r3
 80079ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079f0:	4413      	add	r3, r2
 80079f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079f4:	463b      	mov	r3, r7
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	00da      	lsls	r2, r3, #3
 80079fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079fe:	4413      	add	r3, r2
 8007a00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a04:	647b      	str	r3, [r7, #68]	; 0x44
 8007a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d112      	bne.n	8007a34 <USB_EPStartXfer+0x4e2>
 8007a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a1c:	801a      	strh	r2, [r3, #0]
 8007a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a30:	801a      	strh	r2, [r3, #0]
 8007a32:	e057      	b.n	8007ae4 <USB_EPStartXfer+0x592>
 8007a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a38:	2b3e      	cmp	r3, #62	; 0x3e
 8007a3a:	d817      	bhi.n	8007a6c <USB_EPStartXfer+0x51a>
 8007a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a40:	085b      	lsrs	r3, r3, #1
 8007a42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d004      	beq.n	8007a5c <USB_EPStartXfer+0x50a>
 8007a52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a56:	3301      	adds	r3, #1
 8007a58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	029b      	lsls	r3, r3, #10
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a68:	801a      	strh	r2, [r3, #0]
 8007a6a:	e03b      	b.n	8007ae4 <USB_EPStartXfer+0x592>
 8007a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a70:	095b      	lsrs	r3, r3, #5
 8007a72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a7a:	f003 031f 	and.w	r3, r3, #31
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d104      	bne.n	8007a8c <USB_EPStartXfer+0x53a>
 8007a82:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a86:	3b01      	subs	r3, #1
 8007a88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	029b      	lsls	r3, r3, #10
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aa2:	801a      	strh	r2, [r3, #0]
 8007aa4:	e01e      	b.n	8007ae4 <USB_EPStartXfer+0x592>
 8007aa6:	463b      	mov	r3, r7
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	785b      	ldrb	r3, [r3, #1]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d119      	bne.n	8007ae4 <USB_EPStartXfer+0x592>
 8007ab0:	1d3b      	adds	r3, r7, #4
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	653b      	str	r3, [r7, #80]	; 0x50
 8007ab6:	1d3b      	adds	r3, r7, #4
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ac4:	4413      	add	r3, r2
 8007ac6:	653b      	str	r3, [r7, #80]	; 0x50
 8007ac8:	463b      	mov	r3, r7
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	00da      	lsls	r2, r3, #3
 8007ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007ae4:	463b      	mov	r3, r7
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	891b      	ldrh	r3, [r3, #8]
 8007aea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aee:	463b      	mov	r3, r7
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6959      	ldr	r1, [r3, #20]
 8007af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007afe:	1d38      	adds	r0, r7, #4
 8007b00:	6800      	ldr	r0, [r0, #0]
 8007b02:	f001 f957 	bl	8008db4 <USB_WritePMA>
            ep->xfer_buff += len;
 8007b06:	463b      	mov	r3, r7
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	695a      	ldr	r2, [r3, #20]
 8007b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b10:	441a      	add	r2, r3
 8007b12:	463b      	mov	r3, r7
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007b18:	463b      	mov	r3, r7
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6a1a      	ldr	r2, [r3, #32]
 8007b1e:	463b      	mov	r3, r7
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d909      	bls.n	8007b3c <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8007b28:	463b      	mov	r3, r7
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6a1a      	ldr	r2, [r3, #32]
 8007b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b32:	1ad2      	subs	r2, r2, r3
 8007b34:	463b      	mov	r3, r7
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	621a      	str	r2, [r3, #32]
 8007b3a:	e008      	b.n	8007b4e <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8007b3c:	463b      	mov	r3, r7
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007b46:	463b      	mov	r3, r7
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b4e:	1d3b      	adds	r3, r7, #4
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	643b      	str	r3, [r7, #64]	; 0x40
 8007b54:	463b      	mov	r3, r7
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	785b      	ldrb	r3, [r3, #1]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d164      	bne.n	8007c28 <USB_EPStartXfer+0x6d6>
 8007b5e:	1d3b      	adds	r3, r7, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b64:	1d3b      	adds	r3, r7, #4
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	461a      	mov	r2, r3
 8007b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b72:	4413      	add	r3, r2
 8007b74:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b76:	463b      	mov	r3, r7
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	00da      	lsls	r2, r3, #3
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b80:	4413      	add	r3, r2
 8007b82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b86:	637b      	str	r3, [r7, #52]	; 0x34
 8007b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d112      	bne.n	8007bb6 <USB_EPStartXfer+0x664>
 8007b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9e:	801a      	strh	r2, [r3, #0]
 8007ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba2:	881b      	ldrh	r3, [r3, #0]
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb2:	801a      	strh	r2, [r3, #0]
 8007bb4:	e054      	b.n	8007c60 <USB_EPStartXfer+0x70e>
 8007bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bba:	2b3e      	cmp	r3, #62	; 0x3e
 8007bbc:	d817      	bhi.n	8007bee <USB_EPStartXfer+0x69c>
 8007bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc2:	085b      	lsrs	r3, r3, #1
 8007bc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d004      	beq.n	8007bde <USB_EPStartXfer+0x68c>
 8007bd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007bd8:	3301      	adds	r3, #1
 8007bda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007bde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	029b      	lsls	r3, r3, #10
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bea:	801a      	strh	r2, [r3, #0]
 8007bec:	e038      	b.n	8007c60 <USB_EPStartXfer+0x70e>
 8007bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf2:	095b      	lsrs	r3, r3, #5
 8007bf4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bfc:	f003 031f 	and.w	r3, r3, #31
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d104      	bne.n	8007c0e <USB_EPStartXfer+0x6bc>
 8007c04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	029b      	lsls	r3, r3, #10
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c24:	801a      	strh	r2, [r3, #0]
 8007c26:	e01b      	b.n	8007c60 <USB_EPStartXfer+0x70e>
 8007c28:	463b      	mov	r3, r7
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	785b      	ldrb	r3, [r3, #1]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d116      	bne.n	8007c60 <USB_EPStartXfer+0x70e>
 8007c32:	1d3b      	adds	r3, r7, #4
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c40:	4413      	add	r3, r2
 8007c42:	643b      	str	r3, [r7, #64]	; 0x40
 8007c44:	463b      	mov	r3, r7
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	00da      	lsls	r2, r3, #3
 8007c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c4e:	4413      	add	r3, r2
 8007c50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c60:	463b      	mov	r3, r7
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	895b      	ldrh	r3, [r3, #10]
 8007c66:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c6a:	463b      	mov	r3, r7
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6959      	ldr	r1, [r3, #20]
 8007c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c7a:	1d38      	adds	r0, r7, #4
 8007c7c:	6800      	ldr	r0, [r0, #0]
 8007c7e:	f001 f899 	bl	8008db4 <USB_WritePMA>
 8007c82:	e36c      	b.n	800835e <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007c84:	463b      	mov	r3, r7
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007c8e:	1d3b      	adds	r3, r7, #4
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	463b      	mov	r3, r7
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007cac:	1d3b      	adds	r3, r7, #4
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	463b      	mov	r3, r7
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	441a      	add	r2, r3
 8007cba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007cd2:	1d3b      	adds	r3, r7, #4
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cd8:	1d3b      	adds	r3, r7, #4
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ce6:	4413      	add	r3, r2
 8007ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cea:	463b      	mov	r3, r7
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	00da      	lsls	r2, r3, #3
 8007cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d04:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d06:	463b      	mov	r3, r7
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	891b      	ldrh	r3, [r3, #8]
 8007d0c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d10:	463b      	mov	r3, r7
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6959      	ldr	r1, [r3, #20]
 8007d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d20:	1d38      	adds	r0, r7, #4
 8007d22:	6800      	ldr	r0, [r0, #0]
 8007d24:	f001 f846 	bl	8008db4 <USB_WritePMA>
 8007d28:	e319      	b.n	800835e <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007d2a:	1d3b      	adds	r3, r7, #4
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	463b      	mov	r3, r7
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d44:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007d48:	1d3b      	adds	r3, r7, #4
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	463b      	mov	r3, r7
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	441a      	add	r2, r3
 8007d56:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d62:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007d6e:	463b      	mov	r3, r7
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6a1a      	ldr	r2, [r3, #32]
 8007d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d78:	1ad2      	subs	r2, r2, r3
 8007d7a:	463b      	mov	r3, r7
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007d80:	1d3b      	adds	r3, r7, #4
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	463b      	mov	r3, r7
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 8162 	beq.w	8008060 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d9c:	1d3b      	adds	r3, r7, #4
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007da4:	463b      	mov	r3, r7
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	785b      	ldrb	r3, [r3, #1]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d164      	bne.n	8007e78 <USB_EPStartXfer+0x926>
 8007dae:	1d3b      	adds	r3, r7, #4
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	67bb      	str	r3, [r7, #120]	; 0x78
 8007db4:	1d3b      	adds	r3, r7, #4
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dc2:	4413      	add	r3, r2
 8007dc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dc6:	463b      	mov	r3, r7
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	00da      	lsls	r2, r3, #3
 8007dce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007dd6:	677b      	str	r3, [r7, #116]	; 0x74
 8007dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d112      	bne.n	8007e06 <USB_EPStartXfer+0x8b4>
 8007de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dee:	801a      	strh	r2, [r3, #0]
 8007df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e02:	801a      	strh	r2, [r3, #0]
 8007e04:	e057      	b.n	8007eb6 <USB_EPStartXfer+0x964>
 8007e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8007e0c:	d817      	bhi.n	8007e3e <USB_EPStartXfer+0x8ec>
 8007e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e12:	085b      	lsrs	r3, r3, #1
 8007e14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d004      	beq.n	8007e2e <USB_EPStartXfer+0x8dc>
 8007e24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e28:	3301      	adds	r3, #1
 8007e2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007e2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	029b      	lsls	r3, r3, #10
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e3a:	801a      	strh	r2, [r3, #0]
 8007e3c:	e03b      	b.n	8007eb6 <USB_EPStartXfer+0x964>
 8007e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e42:	095b      	lsrs	r3, r3, #5
 8007e44:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e4c:	f003 031f 	and.w	r3, r3, #31
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d104      	bne.n	8007e5e <USB_EPStartXfer+0x90c>
 8007e54:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007e5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	029b      	lsls	r3, r3, #10
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e74:	801a      	strh	r2, [r3, #0]
 8007e76:	e01e      	b.n	8007eb6 <USB_EPStartXfer+0x964>
 8007e78:	463b      	mov	r3, r7
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	785b      	ldrb	r3, [r3, #1]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d119      	bne.n	8007eb6 <USB_EPStartXfer+0x964>
 8007e82:	1d3b      	adds	r3, r7, #4
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e92:	4413      	add	r3, r2
 8007e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e98:	463b      	mov	r3, r7
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	00da      	lsls	r2, r3, #3
 8007ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007eaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007eb4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007eb6:	463b      	mov	r3, r7
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	895b      	ldrh	r3, [r3, #10]
 8007ebc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ec0:	463b      	mov	r3, r7
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6959      	ldr	r1, [r3, #20]
 8007ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ed0:	1d38      	adds	r0, r7, #4
 8007ed2:	6800      	ldr	r0, [r0, #0]
 8007ed4:	f000 ff6e 	bl	8008db4 <USB_WritePMA>
          ep->xfer_buff += len;
 8007ed8:	463b      	mov	r3, r7
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	695a      	ldr	r2, [r3, #20]
 8007ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee2:	441a      	add	r2, r3
 8007ee4:	463b      	mov	r3, r7
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007eea:	463b      	mov	r3, r7
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6a1a      	ldr	r2, [r3, #32]
 8007ef0:	463b      	mov	r3, r7
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d909      	bls.n	8007f0e <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8007efa:	463b      	mov	r3, r7
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6a1a      	ldr	r2, [r3, #32]
 8007f00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f04:	1ad2      	subs	r2, r2, r3
 8007f06:	463b      	mov	r3, r7
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	621a      	str	r2, [r3, #32]
 8007f0c:	e008      	b.n	8007f20 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8007f0e:	463b      	mov	r3, r7
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6a1b      	ldr	r3, [r3, #32]
 8007f14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007f18:	463b      	mov	r3, r7
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 821a 	beq.w	800835e <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f2a:	463b      	mov	r3, r7
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	785b      	ldrb	r3, [r3, #1]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d164      	bne.n	8007ffe <USB_EPStartXfer+0xaac>
 8007f34:	1d3b      	adds	r3, r7, #4
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f3a:	1d3b      	adds	r3, r7, #4
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	461a      	mov	r2, r3
 8007f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f48:	4413      	add	r3, r2
 8007f4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f4c:	463b      	mov	r3, r7
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	00da      	lsls	r2, r3, #3
 8007f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f56:	4413      	add	r3, r2
 8007f58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f5c:	667b      	str	r3, [r7, #100]	; 0x64
 8007f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d112      	bne.n	8007f8c <USB_EPStartXfer+0xa3a>
 8007f66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f74:	801a      	strh	r2, [r3, #0]
 8007f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f88:	801a      	strh	r2, [r3, #0]
 8007f8a:	e057      	b.n	800803c <USB_EPStartXfer+0xaea>
 8007f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f90:	2b3e      	cmp	r3, #62	; 0x3e
 8007f92:	d817      	bhi.n	8007fc4 <USB_EPStartXfer+0xa72>
 8007f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f98:	085b      	lsrs	r3, r3, #1
 8007f9a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d004      	beq.n	8007fb4 <USB_EPStartXfer+0xa62>
 8007faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fae:	3301      	adds	r3, #1
 8007fb0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	029b      	lsls	r3, r3, #10
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fc0:	801a      	strh	r2, [r3, #0]
 8007fc2:	e03b      	b.n	800803c <USB_EPStartXfer+0xaea>
 8007fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc8:	095b      	lsrs	r3, r3, #5
 8007fca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd2:	f003 031f 	and.w	r3, r3, #31
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d104      	bne.n	8007fe4 <USB_EPStartXfer+0xa92>
 8007fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	029b      	lsls	r3, r3, #10
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ffa:	801a      	strh	r2, [r3, #0]
 8007ffc:	e01e      	b.n	800803c <USB_EPStartXfer+0xaea>
 8007ffe:	463b      	mov	r3, r7
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	785b      	ldrb	r3, [r3, #1]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d119      	bne.n	800803c <USB_EPStartXfer+0xaea>
 8008008:	1d3b      	adds	r3, r7, #4
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	673b      	str	r3, [r7, #112]	; 0x70
 800800e:	1d3b      	adds	r3, r7, #4
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008016:	b29b      	uxth	r3, r3
 8008018:	461a      	mov	r2, r3
 800801a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800801c:	4413      	add	r3, r2
 800801e:	673b      	str	r3, [r7, #112]	; 0x70
 8008020:	463b      	mov	r3, r7
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	00da      	lsls	r2, r3, #3
 8008028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800802a:	4413      	add	r3, r2
 800802c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008030:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008036:	b29a      	uxth	r2, r3
 8008038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800803a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800803c:	463b      	mov	r3, r7
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	891b      	ldrh	r3, [r3, #8]
 8008042:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008046:	463b      	mov	r3, r7
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6959      	ldr	r1, [r3, #20]
 800804c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008050:	b29b      	uxth	r3, r3
 8008052:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008056:	1d38      	adds	r0, r7, #4
 8008058:	6800      	ldr	r0, [r0, #0]
 800805a:	f000 feab 	bl	8008db4 <USB_WritePMA>
 800805e:	e17e      	b.n	800835e <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008060:	463b      	mov	r3, r7
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	785b      	ldrb	r3, [r3, #1]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d16f      	bne.n	800814a <USB_EPStartXfer+0xbf8>
 800806a:	1d3b      	adds	r3, r7, #4
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008072:	1d3b      	adds	r3, r7, #4
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800807a:	b29b      	uxth	r3, r3
 800807c:	461a      	mov	r2, r3
 800807e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008082:	4413      	add	r3, r2
 8008084:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008088:	463b      	mov	r3, r7
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	00da      	lsls	r2, r3, #3
 8008090:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008094:	4413      	add	r3, r2
 8008096:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800809a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800809e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d116      	bne.n	80080d4 <USB_EPStartXfer+0xb82>
 80080a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080b8:	801a      	strh	r2, [r3, #0]
 80080ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080d0:	801a      	strh	r2, [r3, #0]
 80080d2:	e05f      	b.n	8008194 <USB_EPStartXfer+0xc42>
 80080d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d8:	2b3e      	cmp	r3, #62	; 0x3e
 80080da:	d818      	bhi.n	800810e <USB_EPStartXfer+0xbbc>
 80080dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e0:	085b      	lsrs	r3, r3, #1
 80080e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80080e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d004      	beq.n	80080fc <USB_EPStartXfer+0xbaa>
 80080f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80080f6:	3301      	adds	r3, #1
 80080f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80080fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008100:	b29b      	uxth	r3, r3
 8008102:	029b      	lsls	r3, r3, #10
 8008104:	b29a      	uxth	r2, r3
 8008106:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800810a:	801a      	strh	r2, [r3, #0]
 800810c:	e042      	b.n	8008194 <USB_EPStartXfer+0xc42>
 800810e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008112:	095b      	lsrs	r3, r3, #5
 8008114:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800811c:	f003 031f 	and.w	r3, r3, #31
 8008120:	2b00      	cmp	r3, #0
 8008122:	d104      	bne.n	800812e <USB_EPStartXfer+0xbdc>
 8008124:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008128:	3b01      	subs	r3, #1
 800812a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800812e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008132:	b29b      	uxth	r3, r3
 8008134:	029b      	lsls	r3, r3, #10
 8008136:	b29b      	uxth	r3, r3
 8008138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800813c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008140:	b29a      	uxth	r2, r3
 8008142:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008146:	801a      	strh	r2, [r3, #0]
 8008148:	e024      	b.n	8008194 <USB_EPStartXfer+0xc42>
 800814a:	463b      	mov	r3, r7
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	785b      	ldrb	r3, [r3, #1]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d11f      	bne.n	8008194 <USB_EPStartXfer+0xc42>
 8008154:	1d3b      	adds	r3, r7, #4
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800815c:	1d3b      	adds	r3, r7, #4
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008164:	b29b      	uxth	r3, r3
 8008166:	461a      	mov	r2, r3
 8008168:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800816c:	4413      	add	r3, r2
 800816e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008172:	463b      	mov	r3, r7
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	00da      	lsls	r2, r3, #3
 800817a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800817e:	4413      	add	r3, r2
 8008180:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008184:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800818c:	b29a      	uxth	r2, r3
 800818e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008192:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008194:	463b      	mov	r3, r7
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	891b      	ldrh	r3, [r3, #8]
 800819a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800819e:	463b      	mov	r3, r7
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6959      	ldr	r1, [r3, #20]
 80081a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80081ae:	1d38      	adds	r0, r7, #4
 80081b0:	6800      	ldr	r0, [r0, #0]
 80081b2:	f000 fdff 	bl	8008db4 <USB_WritePMA>
          ep->xfer_buff += len;
 80081b6:	463b      	mov	r3, r7
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	695a      	ldr	r2, [r3, #20]
 80081bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081c0:	441a      	add	r2, r3
 80081c2:	463b      	mov	r3, r7
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80081c8:	463b      	mov	r3, r7
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6a1a      	ldr	r2, [r3, #32]
 80081ce:	463b      	mov	r3, r7
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d909      	bls.n	80081ec <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80081d8:	463b      	mov	r3, r7
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6a1a      	ldr	r2, [r3, #32]
 80081de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e2:	1ad2      	subs	r2, r2, r3
 80081e4:	463b      	mov	r3, r7
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	621a      	str	r2, [r3, #32]
 80081ea:	e008      	b.n	80081fe <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80081ec:	463b      	mov	r3, r7
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80081f6:	463b      	mov	r3, r7
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2200      	movs	r2, #0
 80081fc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80081fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008202:	2b00      	cmp	r3, #0
 8008204:	f000 80ab 	beq.w	800835e <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008208:	1d3b      	adds	r3, r7, #4
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008210:	463b      	mov	r3, r7
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	785b      	ldrb	r3, [r3, #1]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d16f      	bne.n	80082fa <USB_EPStartXfer+0xda8>
 800821a:	1d3b      	adds	r3, r7, #4
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008222:	1d3b      	adds	r3, r7, #4
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800822a:	b29b      	uxth	r3, r3
 800822c:	461a      	mov	r2, r3
 800822e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008232:	4413      	add	r3, r2
 8008234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008238:	463b      	mov	r3, r7
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	00da      	lsls	r2, r3, #3
 8008240:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008244:	4413      	add	r3, r2
 8008246:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800824a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800824e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008252:	2b00      	cmp	r3, #0
 8008254:	d116      	bne.n	8008284 <USB_EPStartXfer+0xd32>
 8008256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800825a:	881b      	ldrh	r3, [r3, #0]
 800825c:	b29b      	uxth	r3, r3
 800825e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008262:	b29a      	uxth	r2, r3
 8008264:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008268:	801a      	strh	r2, [r3, #0]
 800826a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	b29b      	uxth	r3, r3
 8008272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800827a:	b29a      	uxth	r2, r3
 800827c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008280:	801a      	strh	r2, [r3, #0]
 8008282:	e05b      	b.n	800833c <USB_EPStartXfer+0xdea>
 8008284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008288:	2b3e      	cmp	r3, #62	; 0x3e
 800828a:	d818      	bhi.n	80082be <USB_EPStartXfer+0xd6c>
 800828c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008290:	085b      	lsrs	r3, r3, #1
 8008292:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d004      	beq.n	80082ac <USB_EPStartXfer+0xd5a>
 80082a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082a6:	3301      	adds	r3, #1
 80082a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80082ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	029b      	lsls	r3, r3, #10
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082ba:	801a      	strh	r2, [r3, #0]
 80082bc:	e03e      	b.n	800833c <USB_EPStartXfer+0xdea>
 80082be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c2:	095b      	lsrs	r3, r3, #5
 80082c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80082c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082cc:	f003 031f 	and.w	r3, r3, #31
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d104      	bne.n	80082de <USB_EPStartXfer+0xd8c>
 80082d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082d8:	3b01      	subs	r3, #1
 80082da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80082de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	029b      	lsls	r3, r3, #10
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082f6:	801a      	strh	r2, [r3, #0]
 80082f8:	e020      	b.n	800833c <USB_EPStartXfer+0xdea>
 80082fa:	463b      	mov	r3, r7
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	785b      	ldrb	r3, [r3, #1]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d11b      	bne.n	800833c <USB_EPStartXfer+0xdea>
 8008304:	1d3b      	adds	r3, r7, #4
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800830c:	b29b      	uxth	r3, r3
 800830e:	461a      	mov	r2, r3
 8008310:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008314:	4413      	add	r3, r2
 8008316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800831a:	463b      	mov	r3, r7
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	00da      	lsls	r2, r3, #3
 8008322:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008326:	4413      	add	r3, r2
 8008328:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800832c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008330:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008334:	b29a      	uxth	r2, r3
 8008336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800833a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800833c:	463b      	mov	r3, r7
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	895b      	ldrh	r3, [r3, #10]
 8008342:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008346:	463b      	mov	r3, r7
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6959      	ldr	r1, [r3, #20]
 800834c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008350:	b29b      	uxth	r3, r3
 8008352:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008356:	1d38      	adds	r0, r7, #4
 8008358:	6800      	ldr	r0, [r0, #0]
 800835a:	f000 fd2b 	bl	8008db4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800835e:	1d3b      	adds	r3, r7, #4
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	463b      	mov	r3, r7
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	b29b      	uxth	r3, r3
 8008370:	f107 020a 	add.w	r2, r7, #10
 8008374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800837c:	8013      	strh	r3, [r2, #0]
 800837e:	f107 030a 	add.w	r3, r7, #10
 8008382:	f107 020a 	add.w	r2, r7, #10
 8008386:	8812      	ldrh	r2, [r2, #0]
 8008388:	f082 0210 	eor.w	r2, r2, #16
 800838c:	801a      	strh	r2, [r3, #0]
 800838e:	f107 030a 	add.w	r3, r7, #10
 8008392:	f107 020a 	add.w	r2, r7, #10
 8008396:	8812      	ldrh	r2, [r2, #0]
 8008398:	f082 0220 	eor.w	r2, r2, #32
 800839c:	801a      	strh	r2, [r3, #0]
 800839e:	1d3b      	adds	r3, r7, #4
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	463b      	mov	r3, r7
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	441a      	add	r2, r3
 80083ac:	f107 030a 	add.w	r3, r7, #10
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	8013      	strh	r3, [r2, #0]
 80083c6:	e3b5      	b.n	8008b34 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80083c8:	463b      	mov	r3, r7
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	7b1b      	ldrb	r3, [r3, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f040 8090 	bne.w	80084f4 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80083d4:	463b      	mov	r3, r7
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	699a      	ldr	r2, [r3, #24]
 80083da:	463b      	mov	r3, r7
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d90e      	bls.n	8008402 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80083e4:	463b      	mov	r3, r7
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80083ee:	463b      	mov	r3, r7
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	699a      	ldr	r2, [r3, #24]
 80083f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083f8:	1ad2      	subs	r2, r2, r3
 80083fa:	463b      	mov	r3, r7
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	619a      	str	r2, [r3, #24]
 8008400:	e008      	b.n	8008414 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8008402:	463b      	mov	r3, r7
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800840c:	463b      	mov	r3, r7
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2200      	movs	r2, #0
 8008412:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008414:	1d3b      	adds	r3, r7, #4
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800841c:	1d3b      	adds	r3, r7, #4
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008424:	b29b      	uxth	r3, r3
 8008426:	461a      	mov	r2, r3
 8008428:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800842c:	4413      	add	r3, r2
 800842e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008432:	463b      	mov	r3, r7
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	00da      	lsls	r2, r3, #3
 800843a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800843e:	4413      	add	r3, r2
 8008440:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800844c:	2b00      	cmp	r3, #0
 800844e:	d116      	bne.n	800847e <USB_EPStartXfer+0xf2c>
 8008450:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	b29b      	uxth	r3, r3
 8008458:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800845c:	b29a      	uxth	r2, r3
 800845e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008462:	801a      	strh	r2, [r3, #0]
 8008464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	b29b      	uxth	r3, r3
 800846c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008474:	b29a      	uxth	r2, r3
 8008476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800847a:	801a      	strh	r2, [r3, #0]
 800847c:	e32c      	b.n	8008ad8 <USB_EPStartXfer+0x1586>
 800847e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008482:	2b3e      	cmp	r3, #62	; 0x3e
 8008484:	d818      	bhi.n	80084b8 <USB_EPStartXfer+0xf66>
 8008486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800848a:	085b      	lsrs	r3, r3, #1
 800848c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	2b00      	cmp	r3, #0
 800849a:	d004      	beq.n	80084a6 <USB_EPStartXfer+0xf54>
 800849c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084a0:	3301      	adds	r3, #1
 80084a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	029b      	lsls	r3, r3, #10
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084b4:	801a      	strh	r2, [r3, #0]
 80084b6:	e30f      	b.n	8008ad8 <USB_EPStartXfer+0x1586>
 80084b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084bc:	095b      	lsrs	r3, r3, #5
 80084be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084c6:	f003 031f 	and.w	r3, r3, #31
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d104      	bne.n	80084d8 <USB_EPStartXfer+0xf86>
 80084ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084d2:	3b01      	subs	r3, #1
 80084d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084dc:	b29b      	uxth	r3, r3
 80084de:	029b      	lsls	r3, r3, #10
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084f0:	801a      	strh	r2, [r3, #0]
 80084f2:	e2f1      	b.n	8008ad8 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80084f4:	463b      	mov	r3, r7
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	78db      	ldrb	r3, [r3, #3]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	f040 818f 	bne.w	800881e <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008500:	463b      	mov	r3, r7
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	785b      	ldrb	r3, [r3, #1]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d175      	bne.n	80085f6 <USB_EPStartXfer+0x10a4>
 800850a:	1d3b      	adds	r3, r7, #4
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008512:	1d3b      	adds	r3, r7, #4
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800851a:	b29b      	uxth	r3, r3
 800851c:	461a      	mov	r2, r3
 800851e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008522:	4413      	add	r3, r2
 8008524:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008528:	463b      	mov	r3, r7
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	00da      	lsls	r2, r3, #3
 8008530:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008534:	4413      	add	r3, r2
 8008536:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800853a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800853e:	463b      	mov	r3, r7
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d116      	bne.n	8008576 <USB_EPStartXfer+0x1024>
 8008548:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	b29b      	uxth	r3, r3
 8008550:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008554:	b29a      	uxth	r2, r3
 8008556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800855a:	801a      	strh	r2, [r3, #0]
 800855c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	b29b      	uxth	r3, r3
 8008564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800856c:	b29a      	uxth	r2, r3
 800856e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008572:	801a      	strh	r2, [r3, #0]
 8008574:	e065      	b.n	8008642 <USB_EPStartXfer+0x10f0>
 8008576:	463b      	mov	r3, r7
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	2b3e      	cmp	r3, #62	; 0x3e
 800857e:	d81a      	bhi.n	80085b6 <USB_EPStartXfer+0x1064>
 8008580:	463b      	mov	r3, r7
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	085b      	lsrs	r3, r3, #1
 8008588:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800858c:	463b      	mov	r3, r7
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	d004      	beq.n	80085a4 <USB_EPStartXfer+0x1052>
 800859a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800859e:	3301      	adds	r3, #1
 80085a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80085a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	029b      	lsls	r3, r3, #10
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085b2:	801a      	strh	r2, [r3, #0]
 80085b4:	e045      	b.n	8008642 <USB_EPStartXfer+0x10f0>
 80085b6:	463b      	mov	r3, r7
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	095b      	lsrs	r3, r3, #5
 80085be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80085c2:	463b      	mov	r3, r7
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	f003 031f 	and.w	r3, r3, #31
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d104      	bne.n	80085da <USB_EPStartXfer+0x1088>
 80085d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085d4:	3b01      	subs	r3, #1
 80085d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80085da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085de:	b29b      	uxth	r3, r3
 80085e0:	029b      	lsls	r3, r3, #10
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085f2:	801a      	strh	r2, [r3, #0]
 80085f4:	e025      	b.n	8008642 <USB_EPStartXfer+0x10f0>
 80085f6:	463b      	mov	r3, r7
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	785b      	ldrb	r3, [r3, #1]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d120      	bne.n	8008642 <USB_EPStartXfer+0x10f0>
 8008600:	1d3b      	adds	r3, r7, #4
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008608:	1d3b      	adds	r3, r7, #4
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008610:	b29b      	uxth	r3, r3
 8008612:	461a      	mov	r2, r3
 8008614:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008618:	4413      	add	r3, r2
 800861a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800861e:	463b      	mov	r3, r7
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	00da      	lsls	r2, r3, #3
 8008626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800862a:	4413      	add	r3, r2
 800862c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008634:	463b      	mov	r3, r7
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	b29a      	uxth	r2, r3
 800863c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008640:	801a      	strh	r2, [r3, #0]
 8008642:	1d3b      	adds	r3, r7, #4
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800864a:	463b      	mov	r3, r7
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	785b      	ldrb	r3, [r3, #1]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d175      	bne.n	8008740 <USB_EPStartXfer+0x11ee>
 8008654:	1d3b      	adds	r3, r7, #4
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800865c:	1d3b      	adds	r3, r7, #4
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008664:	b29b      	uxth	r3, r3
 8008666:	461a      	mov	r2, r3
 8008668:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800866c:	4413      	add	r3, r2
 800866e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008672:	463b      	mov	r3, r7
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	00da      	lsls	r2, r3, #3
 800867a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800867e:	4413      	add	r3, r2
 8008680:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008688:	463b      	mov	r3, r7
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d116      	bne.n	80086c0 <USB_EPStartXfer+0x116e>
 8008692:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008696:	881b      	ldrh	r3, [r3, #0]
 8008698:	b29b      	uxth	r3, r3
 800869a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800869e:	b29a      	uxth	r2, r3
 80086a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086a4:	801a      	strh	r2, [r3, #0]
 80086a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086bc:	801a      	strh	r2, [r3, #0]
 80086be:	e061      	b.n	8008784 <USB_EPStartXfer+0x1232>
 80086c0:	463b      	mov	r3, r7
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	2b3e      	cmp	r3, #62	; 0x3e
 80086c8:	d81a      	bhi.n	8008700 <USB_EPStartXfer+0x11ae>
 80086ca:	463b      	mov	r3, r7
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	085b      	lsrs	r3, r3, #1
 80086d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086d6:	463b      	mov	r3, r7
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d004      	beq.n	80086ee <USB_EPStartXfer+0x119c>
 80086e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086e8:	3301      	adds	r3, #1
 80086ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	029b      	lsls	r3, r3, #10
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086fc:	801a      	strh	r2, [r3, #0]
 80086fe:	e041      	b.n	8008784 <USB_EPStartXfer+0x1232>
 8008700:	463b      	mov	r3, r7
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	095b      	lsrs	r3, r3, #5
 8008708:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800870c:	463b      	mov	r3, r7
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	f003 031f 	and.w	r3, r3, #31
 8008716:	2b00      	cmp	r3, #0
 8008718:	d104      	bne.n	8008724 <USB_EPStartXfer+0x11d2>
 800871a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800871e:	3b01      	subs	r3, #1
 8008720:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008724:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008728:	b29b      	uxth	r3, r3
 800872a:	029b      	lsls	r3, r3, #10
 800872c:	b29b      	uxth	r3, r3
 800872e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008736:	b29a      	uxth	r2, r3
 8008738:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800873c:	801a      	strh	r2, [r3, #0]
 800873e:	e021      	b.n	8008784 <USB_EPStartXfer+0x1232>
 8008740:	463b      	mov	r3, r7
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	785b      	ldrb	r3, [r3, #1]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d11c      	bne.n	8008784 <USB_EPStartXfer+0x1232>
 800874a:	1d3b      	adds	r3, r7, #4
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008752:	b29b      	uxth	r3, r3
 8008754:	461a      	mov	r2, r3
 8008756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800875a:	4413      	add	r3, r2
 800875c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008760:	463b      	mov	r3, r7
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	00da      	lsls	r2, r3, #3
 8008768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800876c:	4413      	add	r3, r2
 800876e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008772:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008776:	463b      	mov	r3, r7
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	b29a      	uxth	r2, r3
 800877e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008782:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008784:	463b      	mov	r3, r7
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	2b00      	cmp	r3, #0
 800878c:	f000 81a4 	beq.w	8008ad8 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008790:	1d3b      	adds	r3, r7, #4
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	463b      	mov	r3, r7
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087a4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d005      	beq.n	80087bc <USB_EPStartXfer+0x126a>
 80087b0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10d      	bne.n	80087d8 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80087bc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f040 8187 	bne.w	8008ad8 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80087ca:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f040 8180 	bne.w	8008ad8 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80087d8:	1d3b      	adds	r3, r7, #4
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	463b      	mov	r3, r7
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4413      	add	r3, r2
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80087f6:	1d3b      	adds	r3, r7, #4
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	463b      	mov	r3, r7
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	441a      	add	r2, r3
 8008804:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800880c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008814:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008818:	b29b      	uxth	r3, r3
 800881a:	8013      	strh	r3, [r2, #0]
 800881c:	e15c      	b.n	8008ad8 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800881e:	463b      	mov	r3, r7
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	78db      	ldrb	r3, [r3, #3]
 8008824:	2b01      	cmp	r3, #1
 8008826:	f040 8155 	bne.w	8008ad4 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800882a:	463b      	mov	r3, r7
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	699a      	ldr	r2, [r3, #24]
 8008830:	463b      	mov	r3, r7
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	429a      	cmp	r2, r3
 8008838:	d90e      	bls.n	8008858 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800883a:	463b      	mov	r3, r7
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008844:	463b      	mov	r3, r7
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	699a      	ldr	r2, [r3, #24]
 800884a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800884e:	1ad2      	subs	r2, r2, r3
 8008850:	463b      	mov	r3, r7
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	619a      	str	r2, [r3, #24]
 8008856:	e008      	b.n	800886a <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8008858:	463b      	mov	r3, r7
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008862:	463b      	mov	r3, r7
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2200      	movs	r2, #0
 8008868:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800886a:	463b      	mov	r3, r7
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	785b      	ldrb	r3, [r3, #1]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d16f      	bne.n	8008954 <USB_EPStartXfer+0x1402>
 8008874:	1d3b      	adds	r3, r7, #4
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800887c:	1d3b      	adds	r3, r7, #4
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008884:	b29b      	uxth	r3, r3
 8008886:	461a      	mov	r2, r3
 8008888:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800888c:	4413      	add	r3, r2
 800888e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008892:	463b      	mov	r3, r7
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	00da      	lsls	r2, r3, #3
 800889a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800889e:	4413      	add	r3, r2
 80088a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80088a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d116      	bne.n	80088de <USB_EPStartXfer+0x138c>
 80088b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088bc:	b29a      	uxth	r2, r3
 80088be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088c2:	801a      	strh	r2, [r3, #0]
 80088c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088c8:	881b      	ldrh	r3, [r3, #0]
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088da:	801a      	strh	r2, [r3, #0]
 80088dc:	e05f      	b.n	800899e <USB_EPStartXfer+0x144c>
 80088de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088e2:	2b3e      	cmp	r3, #62	; 0x3e
 80088e4:	d818      	bhi.n	8008918 <USB_EPStartXfer+0x13c6>
 80088e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ea:	085b      	lsrs	r3, r3, #1
 80088ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d004      	beq.n	8008906 <USB_EPStartXfer+0x13b4>
 80088fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008900:	3301      	adds	r3, #1
 8008902:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800890a:	b29b      	uxth	r3, r3
 800890c:	029b      	lsls	r3, r3, #10
 800890e:	b29a      	uxth	r2, r3
 8008910:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008914:	801a      	strh	r2, [r3, #0]
 8008916:	e042      	b.n	800899e <USB_EPStartXfer+0x144c>
 8008918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800891c:	095b      	lsrs	r3, r3, #5
 800891e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008926:	f003 031f 	and.w	r3, r3, #31
 800892a:	2b00      	cmp	r3, #0
 800892c:	d104      	bne.n	8008938 <USB_EPStartXfer+0x13e6>
 800892e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008932:	3b01      	subs	r3, #1
 8008934:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800893c:	b29b      	uxth	r3, r3
 800893e:	029b      	lsls	r3, r3, #10
 8008940:	b29b      	uxth	r3, r3
 8008942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800894a:	b29a      	uxth	r2, r3
 800894c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008950:	801a      	strh	r2, [r3, #0]
 8008952:	e024      	b.n	800899e <USB_EPStartXfer+0x144c>
 8008954:	463b      	mov	r3, r7
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	785b      	ldrb	r3, [r3, #1]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d11f      	bne.n	800899e <USB_EPStartXfer+0x144c>
 800895e:	1d3b      	adds	r3, r7, #4
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008966:	1d3b      	adds	r3, r7, #4
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800896e:	b29b      	uxth	r3, r3
 8008970:	461a      	mov	r2, r3
 8008972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008976:	4413      	add	r3, r2
 8008978:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800897c:	463b      	mov	r3, r7
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	00da      	lsls	r2, r3, #3
 8008984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008988:	4413      	add	r3, r2
 800898a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800898e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008996:	b29a      	uxth	r2, r3
 8008998:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800899c:	801a      	strh	r2, [r3, #0]
 800899e:	1d3b      	adds	r3, r7, #4
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80089a6:	463b      	mov	r3, r7
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	785b      	ldrb	r3, [r3, #1]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d16f      	bne.n	8008a90 <USB_EPStartXfer+0x153e>
 80089b0:	1d3b      	adds	r3, r7, #4
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089b8:	1d3b      	adds	r3, r7, #4
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	461a      	mov	r2, r3
 80089c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089c8:	4413      	add	r3, r2
 80089ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089ce:	463b      	mov	r3, r7
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	00da      	lsls	r2, r3, #3
 80089d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089da:	4413      	add	r3, r2
 80089dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d116      	bne.n	8008a1a <USB_EPStartXfer+0x14c8>
 80089ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089fe:	801a      	strh	r2, [r3, #0]
 8008a00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a16:	801a      	strh	r2, [r3, #0]
 8008a18:	e05e      	b.n	8008ad8 <USB_EPStartXfer+0x1586>
 8008a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a1e:	2b3e      	cmp	r3, #62	; 0x3e
 8008a20:	d818      	bhi.n	8008a54 <USB_EPStartXfer+0x1502>
 8008a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a26:	085b      	lsrs	r3, r3, #1
 8008a28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d004      	beq.n	8008a42 <USB_EPStartXfer+0x14f0>
 8008a38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	029b      	lsls	r3, r3, #10
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a50:	801a      	strh	r2, [r3, #0]
 8008a52:	e041      	b.n	8008ad8 <USB_EPStartXfer+0x1586>
 8008a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a58:	095b      	lsrs	r3, r3, #5
 8008a5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a62:	f003 031f 	and.w	r3, r3, #31
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d104      	bne.n	8008a74 <USB_EPStartXfer+0x1522>
 8008a6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	029b      	lsls	r3, r3, #10
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a8c:	801a      	strh	r2, [r3, #0]
 8008a8e:	e023      	b.n	8008ad8 <USB_EPStartXfer+0x1586>
 8008a90:	463b      	mov	r3, r7
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	785b      	ldrb	r3, [r3, #1]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d11e      	bne.n	8008ad8 <USB_EPStartXfer+0x1586>
 8008a9a:	1d3b      	adds	r3, r7, #4
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aaa:	4413      	add	r3, r2
 8008aac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ab0:	463b      	mov	r3, r7
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	00da      	lsls	r2, r3, #3
 8008ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008abc:	4413      	add	r3, r2
 8008abe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ac2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ad0:	801a      	strh	r2, [r3, #0]
 8008ad2:	e001      	b.n	8008ad8 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e02e      	b.n	8008b36 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ad8:	1d3b      	adds	r3, r7, #4
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	463b      	mov	r3, r7
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	881b      	ldrh	r3, [r3, #0]
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008af6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008afa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008afe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b02:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b0a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b0e:	1d3b      	adds	r3, r7, #4
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	463b      	mov	r3, r7
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	441a      	add	r2, r3
 8008b1c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	785b      	ldrb	r3, [r3, #1]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d020      	beq.n	8008b94 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b68:	81bb      	strh	r3, [r7, #12]
 8008b6a:	89bb      	ldrh	r3, [r7, #12]
 8008b6c:	f083 0310 	eor.w	r3, r3, #16
 8008b70:	81bb      	strh	r3, [r7, #12]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	441a      	add	r2, r3
 8008b7c:	89bb      	ldrh	r3, [r7, #12]
 8008b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	8013      	strh	r3, [r2, #0]
 8008b92:	e01f      	b.n	8008bd4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008baa:	81fb      	strh	r3, [r7, #14]
 8008bac:	89fb      	ldrh	r3, [r7, #14]
 8008bae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008bb2:	81fb      	strh	r3, [r7, #14]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	441a      	add	r2, r3
 8008bbe:	89fb      	ldrh	r3, [r7, #14]
 8008bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b087      	sub	sp, #28
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	7b1b      	ldrb	r3, [r3, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f040 809d 	bne.w	8008d30 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	785b      	ldrb	r3, [r3, #1]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d04c      	beq.n	8008c98 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	823b      	strh	r3, [r7, #16]
 8008c0c:	8a3b      	ldrh	r3, [r7, #16]
 8008c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d01b      	beq.n	8008c4e <USB_EPClearStall+0x6c>
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	881b      	ldrh	r3, [r3, #0]
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c2c:	81fb      	strh	r3, [r7, #14]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	441a      	add	r2, r3
 8008c38:	89fb      	ldrh	r3, [r7, #14]
 8008c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	78db      	ldrb	r3, [r3, #3]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d06c      	beq.n	8008d30 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c6c:	81bb      	strh	r3, [r7, #12]
 8008c6e:	89bb      	ldrh	r3, [r7, #12]
 8008c70:	f083 0320 	eor.w	r3, r3, #32
 8008c74:	81bb      	strh	r3, [r7, #12]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	441a      	add	r2, r3
 8008c80:	89bb      	ldrh	r3, [r7, #12]
 8008c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	8013      	strh	r3, [r2, #0]
 8008c96:	e04b      	b.n	8008d30 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	881b      	ldrh	r3, [r3, #0]
 8008ca4:	82fb      	strh	r3, [r7, #22]
 8008ca6:	8afb      	ldrh	r3, [r7, #22]
 8008ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d01b      	beq.n	8008ce8 <USB_EPClearStall+0x106>
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc6:	82bb      	strh	r3, [r7, #20]
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	441a      	add	r2, r3
 8008cd2:	8abb      	ldrh	r3, [r7, #20]
 8008cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	881b      	ldrh	r3, [r3, #0]
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cfe:	827b      	strh	r3, [r7, #18]
 8008d00:	8a7b      	ldrh	r3, [r7, #18]
 8008d02:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d06:	827b      	strh	r3, [r7, #18]
 8008d08:	8a7b      	ldrh	r3, [r7, #18]
 8008d0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d0e:	827b      	strh	r3, [r7, #18]
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	441a      	add	r2, r3
 8008d1a:	8a7b      	ldrh	r3, [r7, #18]
 8008d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	371c      	adds	r7, #28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b083      	sub	sp, #12
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	460b      	mov	r3, r1
 8008d48:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008d4a:	78fb      	ldrb	r3, [r7, #3]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d103      	bne.n	8008d58 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2280      	movs	r2, #128	; 0x80
 8008d54:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b083      	sub	sp, #12
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008da6:	68fb      	ldr	r3, [r7, #12]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b08d      	sub	sp, #52	; 0x34
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	80fb      	strh	r3, [r7, #6]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008dca:	88bb      	ldrh	r3, [r7, #4]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	085b      	lsrs	r3, r3, #1
 8008dd0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008dda:	88fa      	ldrh	r2, [r7, #6]
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008de4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dea:	e01b      	b.n	8008e24 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	3301      	adds	r3, #1
 8008df6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	021b      	lsls	r3, r3, #8
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	461a      	mov	r2, r3
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e10:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e14:	3302      	adds	r3, #2
 8008e16:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e20:	3b01      	subs	r3, #1
 8008e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1e0      	bne.n	8008dec <USB_WritePMA+0x38>
  }
}
 8008e2a:	bf00      	nop
 8008e2c:	bf00      	nop
 8008e2e:	3734      	adds	r7, #52	; 0x34
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b08b      	sub	sp, #44	; 0x2c
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	4611      	mov	r1, r2
 8008e44:	461a      	mov	r2, r3
 8008e46:	460b      	mov	r3, r1
 8008e48:	80fb      	strh	r3, [r7, #6]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008e4e:	88bb      	ldrh	r3, [r7, #4]
 8008e50:	085b      	lsrs	r3, r3, #1
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e5e:	88fa      	ldrh	r2, [r7, #6]
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e68:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e6e:	e018      	b.n	8008ea2 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	3302      	adds	r3, #2
 8008e7c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	0a1b      	lsrs	r3, r3, #8
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1e3      	bne.n	8008e70 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008ea8:	88bb      	ldrh	r3, [r7, #4]
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d007      	beq.n	8008ec4 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	701a      	strb	r2, [r3, #0]
  }
}
 8008ec4:	bf00      	nop
 8008ec6:	372c      	adds	r7, #44	; 0x2c
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008edc:	2054      	movs	r0, #84	; 0x54
 8008ede:	f001 ff9b 	bl	800ae18 <USBD_static_malloc>
 8008ee2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d105      	bne.n	8008ef6 <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	e039      	b.n	8008f6a <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	7c1b      	ldrb	r3, [r3, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d107      	bne.n	8008f16 <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2205      	movs	r2, #5
 8008f0a:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2205      	movs	r2, #5
 8008f10:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8008f14:	e006      	b.n	8008f24 <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2205      	movs	r2, #5
 8008f1a:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2205      	movs	r2, #5
 8008f20:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008f24:	2340      	movs	r3, #64	; 0x40
 8008f26:	2203      	movs	r2, #3
 8008f28:	2181      	movs	r1, #129	; 0x81
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f001 fe2d 	bl	800ab8a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008f36:	2340      	movs	r3, #64	; 0x40
 8008f38:	2203      	movs	r2, #3
 8008f3a:	2101      	movs	r1, #1
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f001 fe24 	bl	800ab8a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	2340      	movs	r3, #64	; 0x40
 8008f60:	2101      	movs	r1, #1
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f001 ff01 	bl	800ad6a <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b082      	sub	sp, #8
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008f7e:	2181      	movs	r1, #129	; 0x81
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f001 fe28 	bl	800abd6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008f92:	2101      	movs	r1, #1
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f001 fe1e 	bl	800abd6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00e      	beq.n	8008fd2 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f001 ff35 	bl	800ae34 <USBD_static_free>
    pdev->pClassData = NULL;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b088      	sub	sp, #32
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fec:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009004:	2303      	movs	r3, #3
 8009006:	e0ed      	b.n	80091e4 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009010:	2b00      	cmp	r3, #0
 8009012:	d052      	beq.n	80090ba <USBD_CUSTOM_HID_Setup+0xde>
 8009014:	2b20      	cmp	r3, #32
 8009016:	f040 80dd 	bne.w	80091d4 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	785b      	ldrb	r3, [r3, #1]
 800901e:	3b02      	subs	r3, #2
 8009020:	2b09      	cmp	r3, #9
 8009022:	d842      	bhi.n	80090aa <USBD_CUSTOM_HID_Setup+0xce>
 8009024:	a201      	add	r2, pc, #4	; (adr r2, 800902c <USBD_CUSTOM_HID_Setup+0x50>)
 8009026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902a:	bf00      	nop
 800902c:	08009085 	.word	0x08009085
 8009030:	08009063 	.word	0x08009063
 8009034:	080090ab 	.word	0x080090ab
 8009038:	080090ab 	.word	0x080090ab
 800903c:	080090ab 	.word	0x080090ab
 8009040:	080090ab 	.word	0x080090ab
 8009044:	080090ab 	.word	0x080090ab
 8009048:	08009095 	.word	0x08009095
 800904c:	08009073 	.word	0x08009073
 8009050:	08009055 	.word	0x08009055
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	885b      	ldrh	r3, [r3, #2]
 8009058:	b2db      	uxtb	r3, r3
 800905a:	461a      	mov	r2, r3
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8009060:	e02a      	b.n	80090b8 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	3340      	adds	r3, #64	; 0x40
 8009066:	2201      	movs	r2, #1
 8009068:	4619      	mov	r1, r3
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f001 fa25 	bl	800a4ba <USBD_CtlSendData>
          break;
 8009070:	e022      	b.n	80090b8 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	885b      	ldrh	r3, [r3, #2]
 8009076:	0a1b      	lsrs	r3, r3, #8
 8009078:	b29b      	uxth	r3, r3
 800907a:	b2db      	uxtb	r3, r3
 800907c:	461a      	mov	r2, r3
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8009082:	e019      	b.n	80090b8 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	3344      	adds	r3, #68	; 0x44
 8009088:	2201      	movs	r2, #1
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 fa14 	bl	800a4ba <USBD_CtlSendData>
          break;
 8009092:	e011      	b.n	80090b8 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	2201      	movs	r2, #1
 8009098:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800909a:	6939      	ldr	r1, [r7, #16]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	88db      	ldrh	r3, [r3, #6]
 80090a0:	461a      	mov	r2, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f001 fa35 	bl	800a512 <USBD_CtlPrepareRx>
          break;
 80090a8:	e006      	b.n	80090b8 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 f993 	bl	800a3d8 <USBD_CtlError>
          ret = USBD_FAIL;
 80090b2:	2303      	movs	r3, #3
 80090b4:	75fb      	strb	r3, [r7, #23]
          break;
 80090b6:	bf00      	nop
      }
      break;
 80090b8:	e093      	b.n	80091e2 <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	785b      	ldrb	r3, [r3, #1]
 80090be:	2b0b      	cmp	r3, #11
 80090c0:	d87f      	bhi.n	80091c2 <USBD_CUSTOM_HID_Setup+0x1e6>
 80090c2:	a201      	add	r2, pc, #4	; (adr r2, 80090c8 <USBD_CUSTOM_HID_Setup+0xec>)
 80090c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c8:	080090f9 	.word	0x080090f9
 80090cc:	080091d1 	.word	0x080091d1
 80090d0:	080091c3 	.word	0x080091c3
 80090d4:	080091c3 	.word	0x080091c3
 80090d8:	080091c3 	.word	0x080091c3
 80090dc:	080091c3 	.word	0x080091c3
 80090e0:	08009123 	.word	0x08009123
 80090e4:	080091c3 	.word	0x080091c3
 80090e8:	080091c3 	.word	0x080091c3
 80090ec:	080091c3 	.word	0x080091c3
 80090f0:	08009171 	.word	0x08009171
 80090f4:	0800919b 	.word	0x0800919b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	2b03      	cmp	r3, #3
 8009102:	d107      	bne.n	8009114 <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009104:	f107 030e 	add.w	r3, r7, #14
 8009108:	2202      	movs	r2, #2
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 f9d4 	bl	800a4ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009112:	e05e      	b.n	80091d2 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f001 f95e 	bl	800a3d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800911c:	2303      	movs	r3, #3
 800911e:	75fb      	strb	r3, [r7, #23]
          break;
 8009120:	e057      	b.n	80091d2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	885b      	ldrh	r3, [r3, #2]
 8009126:	0a1b      	lsrs	r3, r3, #8
 8009128:	b29b      	uxth	r3, r3
 800912a:	2b22      	cmp	r3, #34	; 0x22
 800912c:	d10b      	bne.n	8009146 <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	88db      	ldrh	r3, [r3, #6]
 8009132:	2b15      	cmp	r3, #21
 8009134:	bf28      	it	cs
 8009136:	2315      	movcs	r3, #21
 8009138:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	61bb      	str	r3, [r7, #24]
 8009144:	e00d      	b.n	8009162 <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	885b      	ldrh	r3, [r3, #2]
 800914a:	0a1b      	lsrs	r3, r3, #8
 800914c:	b29b      	uxth	r3, r3
 800914e:	2b21      	cmp	r3, #33	; 0x21
 8009150:	d107      	bne.n	8009162 <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8009152:	4b26      	ldr	r3, [pc, #152]	; (80091ec <USBD_CUSTOM_HID_Setup+0x210>)
 8009154:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	88db      	ldrh	r3, [r3, #6]
 800915a:	2b09      	cmp	r3, #9
 800915c:	bf28      	it	cs
 800915e:	2309      	movcs	r3, #9
 8009160:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009162:	8bfb      	ldrh	r3, [r7, #30]
 8009164:	461a      	mov	r2, r3
 8009166:	69b9      	ldr	r1, [r7, #24]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 f9a6 	bl	800a4ba <USBD_CtlSendData>
          break;
 800916e:	e030      	b.n	80091d2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b03      	cmp	r3, #3
 800917a:	d107      	bne.n	800918c <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	3348      	adds	r3, #72	; 0x48
 8009180:	2201      	movs	r2, #1
 8009182:	4619      	mov	r1, r3
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 f998 	bl	800a4ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800918a:	e022      	b.n	80091d2 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f001 f922 	bl	800a3d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009194:	2303      	movs	r3, #3
 8009196:	75fb      	strb	r3, [r7, #23]
          break;
 8009198:	e01b      	b.n	80091d2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	d106      	bne.n	80091b4 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	885b      	ldrh	r3, [r3, #2]
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	461a      	mov	r2, r3
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091b2:	e00e      	b.n	80091d2 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 f90e 	bl	800a3d8 <USBD_CtlError>
            ret = USBD_FAIL;
 80091bc:	2303      	movs	r3, #3
 80091be:	75fb      	strb	r3, [r7, #23]
          break;
 80091c0:	e007      	b.n	80091d2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 f907 	bl	800a3d8 <USBD_CtlError>
          ret = USBD_FAIL;
 80091ca:	2303      	movs	r3, #3
 80091cc:	75fb      	strb	r3, [r7, #23]
          break;
 80091ce:	e000      	b.n	80091d2 <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 80091d0:	bf00      	nop
      }
      break;
 80091d2:	e006      	b.n	80091e2 <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f001 f8fe 	bl	800a3d8 <USBD_CtlError>
      ret = USBD_FAIL;
 80091dc:	2303      	movs	r3, #3
 80091de:	75fb      	strb	r3, [r7, #23]
      break;
 80091e0:	bf00      	nop
  }
  return (uint8_t)ret;
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3720      	adds	r7, #32
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	200000c8 	.word	0x200000c8

080091f0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2229      	movs	r2, #41	; 0x29
 80091fc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 80091fe:	4b03      	ldr	r3, [pc, #12]	; (800920c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	20000044 	.word	0x20000044

08009210 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2229      	movs	r2, #41	; 0x29
 800921c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800921e:	4b03      	ldr	r3, [pc, #12]	; (800922c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8009220:	4618      	mov	r0, r3
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	20000070 	.word	0x20000070

08009230 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2229      	movs	r2, #41	; 0x29
 800923c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800923e:	4b03      	ldr	r3, [pc, #12]	; (800924c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009240:	4618      	mov	r0, r3
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr
 800924c:	2000009c 	.word	0x2000009c

08009250 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009262:	2200      	movs	r2, #0
 8009264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	370c      	adds	r7, #12
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	460b      	mov	r3, r1
 8009280:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800928c:	2303      	movs	r3, #3
 800928e:	e00e      	b.n	80092ae <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009296:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	7810      	ldrb	r0, [r2, #0]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	7852      	ldrb	r2, [r2, #1]
 80092a8:	4611      	mov	r1, r2
 80092aa:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d101      	bne.n	80092cc <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e00a      	b.n	80092e2 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	2340      	movs	r3, #64	; 0x40
 80092d8:	2101      	movs	r1, #1
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f001 fd45 	bl	800ad6a <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b084      	sub	sp, #16
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092f8:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009300:	2303      	movs	r3, #3
 8009302:	e011      	b.n	8009328 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009308:	2b01      	cmp	r3, #1
 800930a:	d10c      	bne.n	8009326 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	7810      	ldrb	r0, [r2, #0]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	7852      	ldrb	r2, [r2, #1]
 800931c:	4611      	mov	r1, r2
 800931e:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	220a      	movs	r2, #10
 800933c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800933e:	4b03      	ldr	r3, [pc, #12]	; (800934c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009340:	4618      	mov	r0, r3
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	200000d4 	.word	0x200000d4

08009350 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009360:	2303      	movs	r3, #3
 8009362:	e004      	b.n	800936e <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	370c      	adds	r7, #12
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b086      	sub	sp, #24
 800937e:	af00      	add	r7, sp, #0
 8009380:	60f8      	str	r0, [r7, #12]
 8009382:	60b9      	str	r1, [r7, #8]
 8009384:	4613      	mov	r3, r2
 8009386:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800938e:	2303      	movs	r3, #3
 8009390:	e01f      	b.n	80093d2 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	79fa      	ldrb	r2, [r7, #7]
 80093c4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f001 fb6c 	bl	800aaa4 <USBD_LL_Init>
 80093cc:	4603      	mov	r3, r0
 80093ce:	75fb      	strb	r3, [r7, #23]

  return ret;
 80093d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093e4:	2300      	movs	r3, #0
 80093e6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d101      	bne.n	80093f2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e016      	b.n	8009420 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	683a      	ldr	r2, [r7, #0]
 80093f6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00b      	beq.n	800941e <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940e:	f107 020e 	add.w	r2, r7, #14
 8009412:	4610      	mov	r0, r2
 8009414:	4798      	blx	r3
 8009416:	4602      	mov	r2, r0
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f001 fb8f 	bl	800ab54 <USBD_LL_Start>
 8009436:	4603      	mov	r3, r0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	370c      	adds	r7, #12
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009462:	2303      	movs	r3, #3
 8009464:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800946c:	2b00      	cmp	r3, #0
 800946e:	d009      	beq.n	8009484 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	78fa      	ldrb	r2, [r7, #3]
 800947a:	4611      	mov	r1, r2
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	4798      	blx	r3
 8009480:	4603      	mov	r3, r0
 8009482:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009484:	7bfb      	ldrb	r3, [r7, #15]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b082      	sub	sp, #8
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	460b      	mov	r3, r1
 8009498:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d007      	beq.n	80094b4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	78fa      	ldrb	r2, [r7, #3]
 80094ae:	4611      	mov	r1, r2
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	4798      	blx	r3
  }

  return USBD_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	4618      	mov	r0, r3
 80094d2:	f000 ff47 	bl	800a364 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2201      	movs	r2, #1
 80094da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80094e4:	461a      	mov	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80094f2:	f003 031f 	and.w	r3, r3, #31
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d01a      	beq.n	8009530 <USBD_LL_SetupStage+0x72>
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d822      	bhi.n	8009544 <USBD_LL_SetupStage+0x86>
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d002      	beq.n	8009508 <USBD_LL_SetupStage+0x4a>
 8009502:	2b01      	cmp	r3, #1
 8009504:	d00a      	beq.n	800951c <USBD_LL_SetupStage+0x5e>
 8009506:	e01d      	b.n	8009544 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800950e:	4619      	mov	r1, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f9ef 	bl	80098f4 <USBD_StdDevReq>
 8009516:	4603      	mov	r3, r0
 8009518:	73fb      	strb	r3, [r7, #15]
      break;
 800951a:	e020      	b.n	800955e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fa53 	bl	80099d0 <USBD_StdItfReq>
 800952a:	4603      	mov	r3, r0
 800952c:	73fb      	strb	r3, [r7, #15]
      break;
 800952e:	e016      	b.n	800955e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fa92 	bl	8009a62 <USBD_StdEPReq>
 800953e:	4603      	mov	r3, r0
 8009540:	73fb      	strb	r3, [r7, #15]
      break;
 8009542:	e00c      	b.n	800955e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800954a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800954e:	b2db      	uxtb	r3, r3
 8009550:	4619      	mov	r1, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f001 fb5e 	bl	800ac14 <USBD_LL_StallEP>
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]
      break;
 800955c:	bf00      	nop
  }

  return ret;
 800955e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	460b      	mov	r3, r1
 8009572:	607a      	str	r2, [r7, #4]
 8009574:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009576:	7afb      	ldrb	r3, [r7, #11]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d138      	bne.n	80095ee <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009582:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800958a:	2b03      	cmp	r3, #3
 800958c:	d14a      	bne.n	8009624 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	429a      	cmp	r2, r3
 8009598:	d913      	bls.n	80095c2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	689a      	ldr	r2, [r3, #8]
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	1ad2      	subs	r2, r2, r3
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	68da      	ldr	r2, [r3, #12]
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	4293      	cmp	r3, r2
 80095b2:	bf28      	it	cs
 80095b4:	4613      	movcs	r3, r2
 80095b6:	461a      	mov	r2, r3
 80095b8:	6879      	ldr	r1, [r7, #4]
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f000 ffc6 	bl	800a54c <USBD_CtlContinueRx>
 80095c0:	e030      	b.n	8009624 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	2b03      	cmp	r3, #3
 80095cc:	d10b      	bne.n	80095e6 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d005      	beq.n	80095e6 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f000 ffc1 	bl	800a56e <USBD_CtlSendStatus>
 80095ec:	e01a      	b.n	8009624 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d114      	bne.n	8009624 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00e      	beq.n	8009624 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800960c:	699b      	ldr	r3, [r3, #24]
 800960e:	7afa      	ldrb	r2, [r7, #11]
 8009610:	4611      	mov	r1, r2
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	4798      	blx	r3
 8009616:	4603      	mov	r3, r0
 8009618:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800961a:	7dfb      	ldrb	r3, [r7, #23]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d001      	beq.n	8009624 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009620:	7dfb      	ldrb	r3, [r7, #23]
 8009622:	e000      	b.n	8009626 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3718      	adds	r7, #24
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b086      	sub	sp, #24
 8009632:	af00      	add	r7, sp, #0
 8009634:	60f8      	str	r0, [r7, #12]
 8009636:	460b      	mov	r3, r1
 8009638:	607a      	str	r2, [r7, #4]
 800963a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800963c:	7afb      	ldrb	r3, [r7, #11]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d16b      	bne.n	800971a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	3314      	adds	r3, #20
 8009646:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800964e:	2b02      	cmp	r3, #2
 8009650:	d156      	bne.n	8009700 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	689a      	ldr	r2, [r3, #8]
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	429a      	cmp	r2, r3
 800965c:	d914      	bls.n	8009688 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	689a      	ldr	r2, [r3, #8]
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	1ad2      	subs	r2, r2, r3
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	461a      	mov	r2, r3
 8009672:	6879      	ldr	r1, [r7, #4]
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f000 ff3b 	bl	800a4f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800967a:	2300      	movs	r3, #0
 800967c:	2200      	movs	r2, #0
 800967e:	2100      	movs	r1, #0
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f001 fb72 	bl	800ad6a <USBD_LL_PrepareReceive>
 8009686:	e03b      	b.n	8009700 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	68da      	ldr	r2, [r3, #12]
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	429a      	cmp	r2, r3
 8009692:	d11c      	bne.n	80096ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	685a      	ldr	r2, [r3, #4]
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800969c:	429a      	cmp	r2, r3
 800969e:	d316      	bcc.n	80096ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	685a      	ldr	r2, [r3, #4]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d20f      	bcs.n	80096ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80096ae:	2200      	movs	r2, #0
 80096b0:	2100      	movs	r1, #0
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 ff1c 	bl	800a4f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096c0:	2300      	movs	r3, #0
 80096c2:	2200      	movs	r2, #0
 80096c4:	2100      	movs	r1, #0
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f001 fb4f 	bl	800ad6a <USBD_LL_PrepareReceive>
 80096cc:	e018      	b.n	8009700 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d10b      	bne.n	80096f2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d005      	beq.n	80096f2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80096f2:	2180      	movs	r1, #128	; 0x80
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f001 fa8d 	bl	800ac14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 ff4a 	bl	800a594 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009706:	2b01      	cmp	r3, #1
 8009708:	d122      	bne.n	8009750 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f7ff fe98 	bl	8009440 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009718:	e01a      	b.n	8009750 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b03      	cmp	r3, #3
 8009724:	d114      	bne.n	8009750 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00e      	beq.n	8009750 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	7afa      	ldrb	r2, [r7, #11]
 800973c:	4611      	mov	r1, r2
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	4798      	blx	r3
 8009742:	4603      	mov	r3, r0
 8009744:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800974c:	7dfb      	ldrb	r3, [r7, #23]
 800974e:	e000      	b.n	8009752 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3718      	adds	r7, #24
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b082      	sub	sp, #8
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800978a:	2303      	movs	r3, #3
 800978c:	e02f      	b.n	80097ee <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00f      	beq.n	80097b8 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d009      	beq.n	80097b8 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	6852      	ldr	r2, [r2, #4]
 80097b0:	b2d2      	uxtb	r2, r2
 80097b2:	4611      	mov	r1, r2
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097b8:	2340      	movs	r3, #64	; 0x40
 80097ba:	2200      	movs	r2, #0
 80097bc:	2100      	movs	r1, #0
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f001 f9e3 	bl	800ab8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2240      	movs	r2, #64	; 0x40
 80097d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097d4:	2340      	movs	r3, #64	; 0x40
 80097d6:	2200      	movs	r2, #0
 80097d8:	2180      	movs	r1, #128	; 0x80
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f001 f9d5 	bl	800ab8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2240      	movs	r2, #64	; 0x40
 80097ea:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	460b      	mov	r3, r1
 8009800:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	78fa      	ldrb	r2, [r7, #3]
 8009806:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009816:	b480      	push	{r7}
 8009818:	b083      	sub	sp, #12
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009824:	b2da      	uxtb	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2204      	movs	r2, #4
 8009830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	370c      	adds	r7, #12
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr

08009842 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009842:	b480      	push	{r7}
 8009844:	b083      	sub	sp, #12
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009850:	b2db      	uxtb	r3, r3
 8009852:	2b04      	cmp	r3, #4
 8009854:	d106      	bne.n	8009864 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800985c:	b2da      	uxtb	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b082      	sub	sp, #8
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009880:	2b00      	cmp	r3, #0
 8009882:	d101      	bne.n	8009888 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009884:	2303      	movs	r3, #3
 8009886:	e012      	b.n	80098ae <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b03      	cmp	r3, #3
 8009892:	d10b      	bne.n	80098ac <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989a:	69db      	ldr	r3, [r3, #28]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d005      	beq.n	80098ac <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a6:	69db      	ldr	r3, [r3, #28]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b087      	sub	sp, #28
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	3301      	adds	r3, #1
 80098cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80098d4:	8a3b      	ldrh	r3, [r7, #16]
 80098d6:	021b      	lsls	r3, r3, #8
 80098d8:	b21a      	sxth	r2, r3
 80098da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098de:	4313      	orrs	r3, r2
 80098e0:	b21b      	sxth	r3, r3
 80098e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80098e4:	89fb      	ldrh	r3, [r7, #14]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	371c      	adds	r7, #28
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
	...

080098f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800990a:	2b40      	cmp	r3, #64	; 0x40
 800990c:	d005      	beq.n	800991a <USBD_StdDevReq+0x26>
 800990e:	2b40      	cmp	r3, #64	; 0x40
 8009910:	d853      	bhi.n	80099ba <USBD_StdDevReq+0xc6>
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00b      	beq.n	800992e <USBD_StdDevReq+0x3a>
 8009916:	2b20      	cmp	r3, #32
 8009918:	d14f      	bne.n	80099ba <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	4798      	blx	r3
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]
      break;
 800992c:	e04a      	b.n	80099c4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	785b      	ldrb	r3, [r3, #1]
 8009932:	2b09      	cmp	r3, #9
 8009934:	d83b      	bhi.n	80099ae <USBD_StdDevReq+0xba>
 8009936:	a201      	add	r2, pc, #4	; (adr r2, 800993c <USBD_StdDevReq+0x48>)
 8009938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993c:	08009991 	.word	0x08009991
 8009940:	080099a5 	.word	0x080099a5
 8009944:	080099af 	.word	0x080099af
 8009948:	0800999b 	.word	0x0800999b
 800994c:	080099af 	.word	0x080099af
 8009950:	0800996f 	.word	0x0800996f
 8009954:	08009965 	.word	0x08009965
 8009958:	080099af 	.word	0x080099af
 800995c:	08009987 	.word	0x08009987
 8009960:	08009979 	.word	0x08009979
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f9de 	bl	8009d28 <USBD_GetDescriptor>
          break;
 800996c:	e024      	b.n	80099b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fb6d 	bl	800a050 <USBD_SetAddress>
          break;
 8009976:	e01f      	b.n	80099b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fbac 	bl	800a0d8 <USBD_SetConfig>
 8009980:	4603      	mov	r3, r0
 8009982:	73fb      	strb	r3, [r7, #15]
          break;
 8009984:	e018      	b.n	80099b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fc4b 	bl	800a224 <USBD_GetConfig>
          break;
 800998e:	e013      	b.n	80099b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fc7c 	bl	800a290 <USBD_GetStatus>
          break;
 8009998:	e00e      	b.n	80099b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fcab 	bl	800a2f8 <USBD_SetFeature>
          break;
 80099a2:	e009      	b.n	80099b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fcba 	bl	800a320 <USBD_ClrFeature>
          break;
 80099ac:	e004      	b.n	80099b8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fd11 	bl	800a3d8 <USBD_CtlError>
          break;
 80099b6:	bf00      	nop
      }
      break;
 80099b8:	e004      	b.n	80099c4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fd0b 	bl	800a3d8 <USBD_CtlError>
      break;
 80099c2:	bf00      	nop
  }

  return ret;
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop

080099d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099e6:	2b40      	cmp	r3, #64	; 0x40
 80099e8:	d005      	beq.n	80099f6 <USBD_StdItfReq+0x26>
 80099ea:	2b40      	cmp	r3, #64	; 0x40
 80099ec:	d82f      	bhi.n	8009a4e <USBD_StdItfReq+0x7e>
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <USBD_StdItfReq+0x26>
 80099f2:	2b20      	cmp	r3, #32
 80099f4:	d12b      	bne.n	8009a4e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	3b01      	subs	r3, #1
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d81d      	bhi.n	8009a40 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	889b      	ldrh	r3, [r3, #4]
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d813      	bhi.n	8009a36 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	4798      	blx	r3
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	88db      	ldrh	r3, [r3, #6]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d110      	bne.n	8009a4a <USBD_StdItfReq+0x7a>
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10d      	bne.n	8009a4a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fd9d 	bl	800a56e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a34:	e009      	b.n	8009a4a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009a36:	6839      	ldr	r1, [r7, #0]
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fccd 	bl	800a3d8 <USBD_CtlError>
          break;
 8009a3e:	e004      	b.n	8009a4a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fcc8 	bl	800a3d8 <USBD_CtlError>
          break;
 8009a48:	e000      	b.n	8009a4c <USBD_StdItfReq+0x7c>
          break;
 8009a4a:	bf00      	nop
      }
      break;
 8009a4c:	e004      	b.n	8009a58 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fcc1 	bl	800a3d8 <USBD_CtlError>
      break;
 8009a56:	bf00      	nop
  }

  return ret;
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b084      	sub	sp, #16
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	889b      	ldrh	r3, [r3, #4]
 8009a74:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a7e:	2b40      	cmp	r3, #64	; 0x40
 8009a80:	d007      	beq.n	8009a92 <USBD_StdEPReq+0x30>
 8009a82:	2b40      	cmp	r3, #64	; 0x40
 8009a84:	f200 8145 	bhi.w	8009d12 <USBD_StdEPReq+0x2b0>
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00c      	beq.n	8009aa6 <USBD_StdEPReq+0x44>
 8009a8c:	2b20      	cmp	r3, #32
 8009a8e:	f040 8140 	bne.w	8009d12 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	4798      	blx	r3
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8009aa4:	e13a      	b.n	8009d1c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	785b      	ldrb	r3, [r3, #1]
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	d007      	beq.n	8009abe <USBD_StdEPReq+0x5c>
 8009aae:	2b03      	cmp	r3, #3
 8009ab0:	f300 8129 	bgt.w	8009d06 <USBD_StdEPReq+0x2a4>
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d07f      	beq.n	8009bb8 <USBD_StdEPReq+0x156>
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d03c      	beq.n	8009b36 <USBD_StdEPReq+0xd4>
 8009abc:	e123      	b.n	8009d06 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d002      	beq.n	8009ad0 <USBD_StdEPReq+0x6e>
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d016      	beq.n	8009afc <USBD_StdEPReq+0x9a>
 8009ace:	e02c      	b.n	8009b2a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ad0:	7bbb      	ldrb	r3, [r7, #14]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00d      	beq.n	8009af2 <USBD_StdEPReq+0x90>
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
 8009ad8:	2b80      	cmp	r3, #128	; 0x80
 8009ada:	d00a      	beq.n	8009af2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009adc:	7bbb      	ldrb	r3, [r7, #14]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f001 f897 	bl	800ac14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ae6:	2180      	movs	r1, #128	; 0x80
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f001 f893 	bl	800ac14 <USBD_LL_StallEP>
 8009aee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009af0:	e020      	b.n	8009b34 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fc6f 	bl	800a3d8 <USBD_CtlError>
              break;
 8009afa:	e01b      	b.n	8009b34 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	885b      	ldrh	r3, [r3, #2]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10e      	bne.n	8009b22 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b04:	7bbb      	ldrb	r3, [r7, #14]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00b      	beq.n	8009b22 <USBD_StdEPReq+0xc0>
 8009b0a:	7bbb      	ldrb	r3, [r7, #14]
 8009b0c:	2b80      	cmp	r3, #128	; 0x80
 8009b0e:	d008      	beq.n	8009b22 <USBD_StdEPReq+0xc0>
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	88db      	ldrh	r3, [r3, #6]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d104      	bne.n	8009b22 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f001 f879 	bl	800ac14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fd23 	bl	800a56e <USBD_CtlSendStatus>

              break;
 8009b28:	e004      	b.n	8009b34 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009b2a:	6839      	ldr	r1, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fc53 	bl	800a3d8 <USBD_CtlError>
              break;
 8009b32:	bf00      	nop
          }
          break;
 8009b34:	e0ec      	b.n	8009d10 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d002      	beq.n	8009b48 <USBD_StdEPReq+0xe6>
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d016      	beq.n	8009b74 <USBD_StdEPReq+0x112>
 8009b46:	e030      	b.n	8009baa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b48:	7bbb      	ldrb	r3, [r7, #14]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00d      	beq.n	8009b6a <USBD_StdEPReq+0x108>
 8009b4e:	7bbb      	ldrb	r3, [r7, #14]
 8009b50:	2b80      	cmp	r3, #128	; 0x80
 8009b52:	d00a      	beq.n	8009b6a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
 8009b56:	4619      	mov	r1, r3
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f001 f85b 	bl	800ac14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b5e:	2180      	movs	r1, #128	; 0x80
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f001 f857 	bl	800ac14 <USBD_LL_StallEP>
 8009b66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b68:	e025      	b.n	8009bb6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fc33 	bl	800a3d8 <USBD_CtlError>
              break;
 8009b72:	e020      	b.n	8009bb6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	885b      	ldrh	r3, [r3, #2]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d11b      	bne.n	8009bb4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d004      	beq.n	8009b90 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b86:	7bbb      	ldrb	r3, [r7, #14]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f001 f861 	bl	800ac52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fcec 	bl	800a56e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	4798      	blx	r3
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009ba8:	e004      	b.n	8009bb4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fc13 	bl	800a3d8 <USBD_CtlError>
              break;
 8009bb2:	e000      	b.n	8009bb6 <USBD_StdEPReq+0x154>
              break;
 8009bb4:	bf00      	nop
          }
          break;
 8009bb6:	e0ab      	b.n	8009d10 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d002      	beq.n	8009bca <USBD_StdEPReq+0x168>
 8009bc4:	2b03      	cmp	r3, #3
 8009bc6:	d032      	beq.n	8009c2e <USBD_StdEPReq+0x1cc>
 8009bc8:	e097      	b.n	8009cfa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bca:	7bbb      	ldrb	r3, [r7, #14]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d007      	beq.n	8009be0 <USBD_StdEPReq+0x17e>
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
 8009bd2:	2b80      	cmp	r3, #128	; 0x80
 8009bd4:	d004      	beq.n	8009be0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fbfd 	bl	800a3d8 <USBD_CtlError>
                break;
 8009bde:	e091      	b.n	8009d04 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009be0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	da0b      	bge.n	8009c00 <USBD_StdEPReq+0x19e>
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bee:	4613      	mov	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4413      	add	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	3310      	adds	r3, #16
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	e00b      	b.n	8009c18 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
 8009c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	4413      	add	r3, r2
 8009c16:	3304      	adds	r3, #4
 8009c18:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2202      	movs	r2, #2
 8009c24:	4619      	mov	r1, r3
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fc47 	bl	800a4ba <USBD_CtlSendData>
              break;
 8009c2c:	e06a      	b.n	8009d04 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	da11      	bge.n	8009c5a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c36:	7bbb      	ldrb	r3, [r7, #14]
 8009c38:	f003 020f 	and.w	r2, r3, #15
 8009c3c:	6879      	ldr	r1, [r7, #4]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4413      	add	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	440b      	add	r3, r1
 8009c48:	3324      	adds	r3, #36	; 0x24
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d117      	bne.n	8009c80 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fbc0 	bl	800a3d8 <USBD_CtlError>
                  break;
 8009c58:	e054      	b.n	8009d04 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c5a:	7bbb      	ldrb	r3, [r7, #14]
 8009c5c:	f003 020f 	and.w	r2, r3, #15
 8009c60:	6879      	ldr	r1, [r7, #4]
 8009c62:	4613      	mov	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	440b      	add	r3, r1
 8009c6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d104      	bne.n	8009c80 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009c76:	6839      	ldr	r1, [r7, #0]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fbad 	bl	800a3d8 <USBD_CtlError>
                  break;
 8009c7e:	e041      	b.n	8009d04 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	da0b      	bge.n	8009ca0 <USBD_StdEPReq+0x23e>
 8009c88:	7bbb      	ldrb	r3, [r7, #14]
 8009c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c8e:	4613      	mov	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	3310      	adds	r3, #16
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	e00b      	b.n	8009cb8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ca0:	7bbb      	ldrb	r3, [r7, #14]
 8009ca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009cba:	7bbb      	ldrb	r3, [r7, #14]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d002      	beq.n	8009cc6 <USBD_StdEPReq+0x264>
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	2b80      	cmp	r3, #128	; 0x80
 8009cc4:	d103      	bne.n	8009cce <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	e00e      	b.n	8009cec <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009cce:	7bbb      	ldrb	r3, [r7, #14]
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 ffdc 	bl	800ac90 <USBD_LL_IsStallEP>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	e002      	b.n	8009cec <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	2202      	movs	r2, #2
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fbe1 	bl	800a4ba <USBD_CtlSendData>
              break;
 8009cf8:	e004      	b.n	8009d04 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009cfa:	6839      	ldr	r1, [r7, #0]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 fb6b 	bl	800a3d8 <USBD_CtlError>
              break;
 8009d02:	bf00      	nop
          }
          break;
 8009d04:	e004      	b.n	8009d10 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009d06:	6839      	ldr	r1, [r7, #0]
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fb65 	bl	800a3d8 <USBD_CtlError>
          break;
 8009d0e:	bf00      	nop
      }
      break;
 8009d10:	e004      	b.n	8009d1c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fb5f 	bl	800a3d8 <USBD_CtlError>
      break;
 8009d1a:	bf00      	nop
  }

  return ret;
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d32:	2300      	movs	r3, #0
 8009d34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	885b      	ldrh	r3, [r3, #2]
 8009d42:	0a1b      	lsrs	r3, r3, #8
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	3b01      	subs	r3, #1
 8009d48:	2b0e      	cmp	r3, #14
 8009d4a:	f200 8152 	bhi.w	8009ff2 <USBD_GetDescriptor+0x2ca>
 8009d4e:	a201      	add	r2, pc, #4	; (adr r2, 8009d54 <USBD_GetDescriptor+0x2c>)
 8009d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d54:	08009dc5 	.word	0x08009dc5
 8009d58:	08009ddd 	.word	0x08009ddd
 8009d5c:	08009e1d 	.word	0x08009e1d
 8009d60:	08009ff3 	.word	0x08009ff3
 8009d64:	08009ff3 	.word	0x08009ff3
 8009d68:	08009f93 	.word	0x08009f93
 8009d6c:	08009fbf 	.word	0x08009fbf
 8009d70:	08009ff3 	.word	0x08009ff3
 8009d74:	08009ff3 	.word	0x08009ff3
 8009d78:	08009ff3 	.word	0x08009ff3
 8009d7c:	08009ff3 	.word	0x08009ff3
 8009d80:	08009ff3 	.word	0x08009ff3
 8009d84:	08009ff3 	.word	0x08009ff3
 8009d88:	08009ff3 	.word	0x08009ff3
 8009d8c:	08009d91 	.word	0x08009d91
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d96:	69db      	ldr	r3, [r3, #28]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00b      	beq.n	8009db4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009da2:	69db      	ldr	r3, [r3, #28]
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	7c12      	ldrb	r2, [r2, #16]
 8009da8:	f107 0108 	add.w	r1, r7, #8
 8009dac:	4610      	mov	r0, r2
 8009dae:	4798      	blx	r3
 8009db0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009db2:	e126      	b.n	800a002 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009db4:	6839      	ldr	r1, [r7, #0]
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fb0e 	bl	800a3d8 <USBD_CtlError>
        err++;
 8009dbc:	7afb      	ldrb	r3, [r7, #11]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	72fb      	strb	r3, [r7, #11]
      break;
 8009dc2:	e11e      	b.n	800a002 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	7c12      	ldrb	r2, [r2, #16]
 8009dd0:	f107 0108 	add.w	r1, r7, #8
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	4798      	blx	r3
 8009dd8:	60f8      	str	r0, [r7, #12]
      break;
 8009dda:	e112      	b.n	800a002 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	7c1b      	ldrb	r3, [r3, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10d      	bne.n	8009e00 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dec:	f107 0208 	add.w	r2, r7, #8
 8009df0:	4610      	mov	r0, r2
 8009df2:	4798      	blx	r3
 8009df4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009dfe:	e100      	b.n	800a002 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e08:	f107 0208 	add.w	r2, r7, #8
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	4798      	blx	r3
 8009e10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	3301      	adds	r3, #1
 8009e16:	2202      	movs	r2, #2
 8009e18:	701a      	strb	r2, [r3, #0]
      break;
 8009e1a:	e0f2      	b.n	800a002 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	885b      	ldrh	r3, [r3, #2]
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2b05      	cmp	r3, #5
 8009e24:	f200 80ac 	bhi.w	8009f80 <USBD_GetDescriptor+0x258>
 8009e28:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <USBD_GetDescriptor+0x108>)
 8009e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2e:	bf00      	nop
 8009e30:	08009e49 	.word	0x08009e49
 8009e34:	08009e7d 	.word	0x08009e7d
 8009e38:	08009eb1 	.word	0x08009eb1
 8009e3c:	08009ee5 	.word	0x08009ee5
 8009e40:	08009f19 	.word	0x08009f19
 8009e44:	08009f4d 	.word	0x08009f4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00b      	beq.n	8009e6c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	7c12      	ldrb	r2, [r2, #16]
 8009e60:	f107 0108 	add.w	r1, r7, #8
 8009e64:	4610      	mov	r0, r2
 8009e66:	4798      	blx	r3
 8009e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e6a:	e091      	b.n	8009f90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e6c:	6839      	ldr	r1, [r7, #0]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fab2 	bl	800a3d8 <USBD_CtlError>
            err++;
 8009e74:	7afb      	ldrb	r3, [r7, #11]
 8009e76:	3301      	adds	r3, #1
 8009e78:	72fb      	strb	r3, [r7, #11]
          break;
 8009e7a:	e089      	b.n	8009f90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00b      	beq.n	8009ea0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	7c12      	ldrb	r2, [r2, #16]
 8009e94:	f107 0108 	add.w	r1, r7, #8
 8009e98:	4610      	mov	r0, r2
 8009e9a:	4798      	blx	r3
 8009e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e9e:	e077      	b.n	8009f90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ea0:	6839      	ldr	r1, [r7, #0]
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fa98 	bl	800a3d8 <USBD_CtlError>
            err++;
 8009ea8:	7afb      	ldrb	r3, [r7, #11]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	72fb      	strb	r3, [r7, #11]
          break;
 8009eae:	e06f      	b.n	8009f90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00b      	beq.n	8009ed4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	7c12      	ldrb	r2, [r2, #16]
 8009ec8:	f107 0108 	add.w	r1, r7, #8
 8009ecc:	4610      	mov	r0, r2
 8009ece:	4798      	blx	r3
 8009ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ed2:	e05d      	b.n	8009f90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fa7e 	bl	800a3d8 <USBD_CtlError>
            err++;
 8009edc:	7afb      	ldrb	r3, [r7, #11]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ee2:	e055      	b.n	8009f90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00b      	beq.n	8009f08 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	7c12      	ldrb	r2, [r2, #16]
 8009efc:	f107 0108 	add.w	r1, r7, #8
 8009f00:	4610      	mov	r0, r2
 8009f02:	4798      	blx	r3
 8009f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f06:	e043      	b.n	8009f90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f08:	6839      	ldr	r1, [r7, #0]
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 fa64 	bl	800a3d8 <USBD_CtlError>
            err++;
 8009f10:	7afb      	ldrb	r3, [r7, #11]
 8009f12:	3301      	adds	r3, #1
 8009f14:	72fb      	strb	r3, [r7, #11]
          break;
 8009f16:	e03b      	b.n	8009f90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f1e:	695b      	ldr	r3, [r3, #20]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00b      	beq.n	8009f3c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	7c12      	ldrb	r2, [r2, #16]
 8009f30:	f107 0108 	add.w	r1, r7, #8
 8009f34:	4610      	mov	r0, r2
 8009f36:	4798      	blx	r3
 8009f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f3a:	e029      	b.n	8009f90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fa4a 	bl	800a3d8 <USBD_CtlError>
            err++;
 8009f44:	7afb      	ldrb	r3, [r7, #11]
 8009f46:	3301      	adds	r3, #1
 8009f48:	72fb      	strb	r3, [r7, #11]
          break;
 8009f4a:	e021      	b.n	8009f90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00b      	beq.n	8009f70 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	7c12      	ldrb	r2, [r2, #16]
 8009f64:	f107 0108 	add.w	r1, r7, #8
 8009f68:	4610      	mov	r0, r2
 8009f6a:	4798      	blx	r3
 8009f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f6e:	e00f      	b.n	8009f90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fa30 	bl	800a3d8 <USBD_CtlError>
            err++;
 8009f78:	7afb      	ldrb	r3, [r7, #11]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f7e:	e007      	b.n	8009f90 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fa28 	bl	800a3d8 <USBD_CtlError>
          err++;
 8009f88:	7afb      	ldrb	r3, [r7, #11]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009f8e:	bf00      	nop
      }
      break;
 8009f90:	e037      	b.n	800a002 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	7c1b      	ldrb	r3, [r3, #16]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d109      	bne.n	8009fae <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa2:	f107 0208 	add.w	r2, r7, #8
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	4798      	blx	r3
 8009faa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fac:	e029      	b.n	800a002 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 fa11 	bl	800a3d8 <USBD_CtlError>
        err++;
 8009fb6:	7afb      	ldrb	r3, [r7, #11]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	72fb      	strb	r3, [r7, #11]
      break;
 8009fbc:	e021      	b.n	800a002 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	7c1b      	ldrb	r3, [r3, #16]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10d      	bne.n	8009fe2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fce:	f107 0208 	add.w	r2, r7, #8
 8009fd2:	4610      	mov	r0, r2
 8009fd4:	4798      	blx	r3
 8009fd6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	2207      	movs	r2, #7
 8009fde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fe0:	e00f      	b.n	800a002 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f9f7 	bl	800a3d8 <USBD_CtlError>
        err++;
 8009fea:	7afb      	ldrb	r3, [r7, #11]
 8009fec:	3301      	adds	r3, #1
 8009fee:	72fb      	strb	r3, [r7, #11]
      break;
 8009ff0:	e007      	b.n	800a002 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f9ef 	bl	800a3d8 <USBD_CtlError>
      err++;
 8009ffa:	7afb      	ldrb	r3, [r7, #11]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	72fb      	strb	r3, [r7, #11]
      break;
 800a000:	bf00      	nop
  }

  if (err != 0U)
 800a002:	7afb      	ldrb	r3, [r7, #11]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d11e      	bne.n	800a046 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	88db      	ldrh	r3, [r3, #6]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d016      	beq.n	800a03e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a010:	893b      	ldrh	r3, [r7, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00e      	beq.n	800a034 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	88da      	ldrh	r2, [r3, #6]
 800a01a:	893b      	ldrh	r3, [r7, #8]
 800a01c:	4293      	cmp	r3, r2
 800a01e:	bf28      	it	cs
 800a020:	4613      	movcs	r3, r2
 800a022:	b29b      	uxth	r3, r3
 800a024:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a026:	893b      	ldrh	r3, [r7, #8]
 800a028:	461a      	mov	r2, r3
 800a02a:	68f9      	ldr	r1, [r7, #12]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 fa44 	bl	800a4ba <USBD_CtlSendData>
 800a032:	e009      	b.n	800a048 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f9ce 	bl	800a3d8 <USBD_CtlError>
 800a03c:	e004      	b.n	800a048 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fa95 	bl	800a56e <USBD_CtlSendStatus>
 800a044:	e000      	b.n	800a048 <USBD_GetDescriptor+0x320>
    return;
 800a046:	bf00      	nop
  }
}
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop

0800a050 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	889b      	ldrh	r3, [r3, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d131      	bne.n	800a0c6 <USBD_SetAddress+0x76>
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	88db      	ldrh	r3, [r3, #6]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d12d      	bne.n	800a0c6 <USBD_SetAddress+0x76>
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	885b      	ldrh	r3, [r3, #2]
 800a06e:	2b7f      	cmp	r3, #127	; 0x7f
 800a070:	d829      	bhi.n	800a0c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	885b      	ldrh	r3, [r3, #2]
 800a076:	b2db      	uxtb	r3, r3
 800a078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a07c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b03      	cmp	r3, #3
 800a088:	d104      	bne.n	800a094 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 f9a3 	bl	800a3d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a092:	e01d      	b.n	800a0d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	7bfa      	ldrb	r2, [r7, #15]
 800a098:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fe22 	bl	800acea <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fa61 	bl	800a56e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d004      	beq.n	800a0bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2202      	movs	r2, #2
 800a0b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ba:	e009      	b.n	800a0d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c4:	e004      	b.n	800a0d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a0c6:	6839      	ldr	r1, [r7, #0]
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 f985 	bl	800a3d8 <USBD_CtlError>
  }
}
 800a0ce:	bf00      	nop
 800a0d0:	bf00      	nop
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	885b      	ldrh	r3, [r3, #2]
 800a0ea:	b2da      	uxtb	r2, r3
 800a0ec:	4b4c      	ldr	r3, [pc, #304]	; (800a220 <USBD_SetConfig+0x148>)
 800a0ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0f0:	4b4b      	ldr	r3, [pc, #300]	; (800a220 <USBD_SetConfig+0x148>)
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d905      	bls.n	800a104 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f96c 	bl	800a3d8 <USBD_CtlError>
    return USBD_FAIL;
 800a100:	2303      	movs	r3, #3
 800a102:	e088      	b.n	800a216 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d002      	beq.n	800a116 <USBD_SetConfig+0x3e>
 800a110:	2b03      	cmp	r3, #3
 800a112:	d025      	beq.n	800a160 <USBD_SetConfig+0x88>
 800a114:	e071      	b.n	800a1fa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a116:	4b42      	ldr	r3, [pc, #264]	; (800a220 <USBD_SetConfig+0x148>)
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d01c      	beq.n	800a158 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a11e:	4b40      	ldr	r3, [pc, #256]	; (800a220 <USBD_SetConfig+0x148>)
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	461a      	mov	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a128:	4b3d      	ldr	r3, [pc, #244]	; (800a220 <USBD_SetConfig+0x148>)
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	4619      	mov	r1, r3
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7ff f991 	bl	8009456 <USBD_SetClassConfig>
 800a134:	4603      	mov	r3, r0
 800a136:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a138:	7bfb      	ldrb	r3, [r7, #15]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d004      	beq.n	800a148 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a13e:	6839      	ldr	r1, [r7, #0]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f949 	bl	800a3d8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a146:	e065      	b.n	800a214 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 fa10 	bl	800a56e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2203      	movs	r2, #3
 800a152:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a156:	e05d      	b.n	800a214 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fa08 	bl	800a56e <USBD_CtlSendStatus>
      break;
 800a15e:	e059      	b.n	800a214 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a160:	4b2f      	ldr	r3, [pc, #188]	; (800a220 <USBD_SetConfig+0x148>)
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d112      	bne.n	800a18e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2202      	movs	r2, #2
 800a16c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a170:	4b2b      	ldr	r3, [pc, #172]	; (800a220 <USBD_SetConfig+0x148>)
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	461a      	mov	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a17a:	4b29      	ldr	r3, [pc, #164]	; (800a220 <USBD_SetConfig+0x148>)
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	4619      	mov	r1, r3
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7ff f984 	bl	800948e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f9f1 	bl	800a56e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a18c:	e042      	b.n	800a214 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a18e:	4b24      	ldr	r3, [pc, #144]	; (800a220 <USBD_SetConfig+0x148>)
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	461a      	mov	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d02a      	beq.n	800a1f2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7ff f972 	bl	800948e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a1aa:	4b1d      	ldr	r3, [pc, #116]	; (800a220 <USBD_SetConfig+0x148>)
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1b4:	4b1a      	ldr	r3, [pc, #104]	; (800a220 <USBD_SetConfig+0x148>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7ff f94b 	bl	8009456 <USBD_SetClassConfig>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00f      	beq.n	800a1ea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 f903 	bl	800a3d8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	4619      	mov	r1, r3
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7ff f957 	bl	800948e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a1e8:	e014      	b.n	800a214 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f9bf 	bl	800a56e <USBD_CtlSendStatus>
      break;
 800a1f0:	e010      	b.n	800a214 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f9bb 	bl	800a56e <USBD_CtlSendStatus>
      break;
 800a1f8:	e00c      	b.n	800a214 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a1fa:	6839      	ldr	r1, [r7, #0]
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f8eb 	bl	800a3d8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a202:	4b07      	ldr	r3, [pc, #28]	; (800a220 <USBD_SetConfig+0x148>)
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff f940 	bl	800948e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a20e:	2303      	movs	r3, #3
 800a210:	73fb      	strb	r3, [r7, #15]
      break;
 800a212:	bf00      	nop
  }

  return ret;
 800a214:	7bfb      	ldrb	r3, [r7, #15]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20000178 	.word	0x20000178

0800a224 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	88db      	ldrh	r3, [r3, #6]
 800a232:	2b01      	cmp	r3, #1
 800a234:	d004      	beq.n	800a240 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a236:	6839      	ldr	r1, [r7, #0]
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 f8cd 	bl	800a3d8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a23e:	e023      	b.n	800a288 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a246:	b2db      	uxtb	r3, r3
 800a248:	2b02      	cmp	r3, #2
 800a24a:	dc02      	bgt.n	800a252 <USBD_GetConfig+0x2e>
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	dc03      	bgt.n	800a258 <USBD_GetConfig+0x34>
 800a250:	e015      	b.n	800a27e <USBD_GetConfig+0x5a>
 800a252:	2b03      	cmp	r3, #3
 800a254:	d00b      	beq.n	800a26e <USBD_GetConfig+0x4a>
 800a256:	e012      	b.n	800a27e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	3308      	adds	r3, #8
 800a262:	2201      	movs	r2, #1
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f927 	bl	800a4ba <USBD_CtlSendData>
        break;
 800a26c:	e00c      	b.n	800a288 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	3304      	adds	r3, #4
 800a272:	2201      	movs	r2, #1
 800a274:	4619      	mov	r1, r3
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 f91f 	bl	800a4ba <USBD_CtlSendData>
        break;
 800a27c:	e004      	b.n	800a288 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a27e:	6839      	ldr	r1, [r7, #0]
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 f8a9 	bl	800a3d8 <USBD_CtlError>
        break;
 800a286:	bf00      	nop
}
 800a288:	bf00      	nop
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d81e      	bhi.n	800a2e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	88db      	ldrh	r3, [r3, #6]
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d004      	beq.n	800a2ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f890 	bl	800a3d8 <USBD_CtlError>
        break;
 800a2b8:	e01a      	b.n	800a2f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d005      	beq.n	800a2d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	f043 0202 	orr.w	r2, r3, #2
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	330c      	adds	r3, #12
 800a2da:	2202      	movs	r2, #2
 800a2dc:	4619      	mov	r1, r3
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f8eb 	bl	800a4ba <USBD_CtlSendData>
      break;
 800a2e4:	e004      	b.n	800a2f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a2e6:	6839      	ldr	r1, [r7, #0]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 f875 	bl	800a3d8 <USBD_CtlError>
      break;
 800a2ee:	bf00      	nop
  }
}
 800a2f0:	bf00      	nop
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	885b      	ldrh	r3, [r3, #2]
 800a306:	2b01      	cmp	r3, #1
 800a308:	d106      	bne.n	800a318 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f92b 	bl	800a56e <USBD_CtlSendStatus>
  }
}
 800a318:	bf00      	nop
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a330:	b2db      	uxtb	r3, r3
 800a332:	3b01      	subs	r3, #1
 800a334:	2b02      	cmp	r3, #2
 800a336:	d80b      	bhi.n	800a350 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	885b      	ldrh	r3, [r3, #2]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d10c      	bne.n	800a35a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 f910 	bl	800a56e <USBD_CtlSendStatus>
      }
      break;
 800a34e:	e004      	b.n	800a35a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a350:	6839      	ldr	r1, [r7, #0]
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 f840 	bl	800a3d8 <USBD_CtlError>
      break;
 800a358:	e000      	b.n	800a35c <USBD_ClrFeature+0x3c>
      break;
 800a35a:	bf00      	nop
  }
}
 800a35c:	bf00      	nop
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	781a      	ldrb	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3301      	adds	r3, #1
 800a37e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	781a      	ldrb	r2, [r3, #0]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3301      	adds	r3, #1
 800a38c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f7ff fa91 	bl	80098b6 <SWAPBYTE>
 800a394:	4603      	mov	r3, r0
 800a396:	461a      	mov	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f7ff fa84 	bl	80098b6 <SWAPBYTE>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f7ff fa77 	bl	80098b6 <SWAPBYTE>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	80da      	strh	r2, [r3, #6]
}
 800a3d0:	bf00      	nop
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3e2:	2180      	movs	r1, #128	; 0x80
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 fc15 	bl	800ac14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fc11 	bl	800ac14 <USBD_LL_StallEP>
}
 800a3f2:	bf00      	nop
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b086      	sub	sp, #24
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	60f8      	str	r0, [r7, #12]
 800a402:	60b9      	str	r1, [r7, #8]
 800a404:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a406:	2300      	movs	r3, #0
 800a408:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d036      	beq.n	800a47e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a414:	6938      	ldr	r0, [r7, #16]
 800a416:	f000 f836 	bl	800a486 <USBD_GetLen>
 800a41a:	4603      	mov	r3, r0
 800a41c:	3301      	adds	r3, #1
 800a41e:	b29b      	uxth	r3, r3
 800a420:	005b      	lsls	r3, r3, #1
 800a422:	b29a      	uxth	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a428:	7dfb      	ldrb	r3, [r7, #23]
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	4413      	add	r3, r2
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	7812      	ldrb	r2, [r2, #0]
 800a432:	701a      	strb	r2, [r3, #0]
  idx++;
 800a434:	7dfb      	ldrb	r3, [r7, #23]
 800a436:	3301      	adds	r3, #1
 800a438:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	4413      	add	r3, r2
 800a440:	2203      	movs	r2, #3
 800a442:	701a      	strb	r2, [r3, #0]
  idx++;
 800a444:	7dfb      	ldrb	r3, [r7, #23]
 800a446:	3301      	adds	r3, #1
 800a448:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a44a:	e013      	b.n	800a474 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a44c:	7dfb      	ldrb	r3, [r7, #23]
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	4413      	add	r3, r2
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	7812      	ldrb	r2, [r2, #0]
 800a456:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	3301      	adds	r3, #1
 800a45c:	613b      	str	r3, [r7, #16]
    idx++;
 800a45e:	7dfb      	ldrb	r3, [r7, #23]
 800a460:	3301      	adds	r3, #1
 800a462:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	4413      	add	r3, r2
 800a46a:	2200      	movs	r2, #0
 800a46c:	701a      	strb	r2, [r3, #0]
    idx++;
 800a46e:	7dfb      	ldrb	r3, [r7, #23]
 800a470:	3301      	adds	r3, #1
 800a472:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1e7      	bne.n	800a44c <USBD_GetString+0x52>
 800a47c:	e000      	b.n	800a480 <USBD_GetString+0x86>
    return;
 800a47e:	bf00      	nop
  }
}
 800a480:	3718      	adds	r7, #24
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a486:	b480      	push	{r7}
 800a488:	b085      	sub	sp, #20
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a48e:	2300      	movs	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a496:	e005      	b.n	800a4a4 <USBD_GetLen+0x1e>
  {
    len++;
 800a498:	7bfb      	ldrb	r3, [r7, #15]
 800a49a:	3301      	adds	r3, #1
 800a49c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1f5      	bne.n	800a498 <USBD_GetLen+0x12>
  }

  return len;
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b084      	sub	sp, #16
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	60f8      	str	r0, [r7, #12]
 800a4c2:	60b9      	str	r1, [r7, #8]
 800a4c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	2100      	movs	r1, #0
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f000 fc21 	bl	800ad28 <USBD_LL_Transmit>

  return USBD_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	2100      	movs	r1, #0
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f000 fc10 	bl	800ad28 <USBD_LL_Transmit>

  return USBD_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	60f8      	str	r0, [r7, #12]
 800a51a:	60b9      	str	r1, [r7, #8]
 800a51c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2203      	movs	r2, #3
 800a522:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	68ba      	ldr	r2, [r7, #8]
 800a53a:	2100      	movs	r1, #0
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f000 fc14 	bl	800ad6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	2100      	movs	r1, #0
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f000 fc03 	bl	800ad6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b082      	sub	sp, #8
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2204      	movs	r2, #4
 800a57a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a57e:	2300      	movs	r3, #0
 800a580:	2200      	movs	r2, #0
 800a582:	2100      	movs	r1, #0
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 fbcf 	bl	800ad28 <USBD_LL_Transmit>

  return USBD_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2205      	movs	r2, #5
 800a5a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fbdd 	bl	800ad6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
	...

0800a5bc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CUSTOM_HID_Desc, DEVICE_FS) != USBD_OK) {
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	4912      	ldr	r1, [pc, #72]	; (800a60c <MX_USB_Device_Init+0x50>)
 800a5c4:	4812      	ldr	r0, [pc, #72]	; (800a610 <MX_USB_Device_Init+0x54>)
 800a5c6:	f7fe fed8 	bl	800937a <USBD_Init>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a5d0:	f7f6 fa52 	bl	8000a78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK) {
 800a5d4:	490f      	ldr	r1, [pc, #60]	; (800a614 <MX_USB_Device_Init+0x58>)
 800a5d6:	480e      	ldr	r0, [pc, #56]	; (800a610 <MX_USB_Device_Init+0x54>)
 800a5d8:	f7fe feff 	bl	80093da <USBD_RegisterClass>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a5e2:	f7f6 fa49 	bl	8000a78 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK) {
 800a5e6:	490c      	ldr	r1, [pc, #48]	; (800a618 <MX_USB_Device_Init+0x5c>)
 800a5e8:	4809      	ldr	r0, [pc, #36]	; (800a610 <MX_USB_Device_Init+0x54>)
 800a5ea:	f7fe feb1 	bl	8009350 <USBD_CUSTOM_HID_RegisterInterface>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d001      	beq.n	800a5f8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a5f4:	f7f6 fa40 	bl	8000a78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a5f8:	4805      	ldr	r0, [pc, #20]	; (800a610 <MX_USB_Device_Init+0x54>)
 800a5fa:	f7fe ff15 	bl	8009428 <USBD_Start>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d001      	beq.n	800a608 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a604:	f7f6 fa38 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a608:	bf00      	nop
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	20000108 	.word	0x20000108
 800a610:	200002f8 	.word	0x200002f8
 800a614:	2000000c 	.word	0x2000000c
 800a618:	200000f8 	.word	0x200000f8

0800a61c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800a61c:	b480      	push	{r7}
 800a61e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a620:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a622:	4618      	mov	r0, r3
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800a62c:	b480      	push	{r7}
 800a62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800a630:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a632:	4618      	mov	r0, r3
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	4603      	mov	r3, r0
 800a644:	460a      	mov	r2, r1
 800a646:	71fb      	strb	r3, [r7, #7]
 800a648:	4613      	mov	r3, r2
 800a64a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800a64c:	4803      	ldr	r0, [pc, #12]	; (800a65c <CUSTOM_HID_OutEvent_FS+0x20>)
 800a64e:	f7fe fe32 	bl	80092b6 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800a652:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a654:	4618      	mov	r0, r3
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	200002f8 	.word	0x200002f8

0800a660 <USBD_CUSTOM_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	4603      	mov	r3, r0
 800a668:	6039      	str	r1, [r7, #0]
 800a66a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CUSTOM_HID_DeviceDesc);
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	2212      	movs	r2, #18
 800a670:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceDesc;
 800a672:	4b03      	ldr	r3, [pc, #12]	; (800a680 <USBD_CUSTOM_HID_DeviceDescriptor+0x20>)
}
 800a674:	4618      	mov	r0, r3
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr
 800a680:	20000128 	.word	0x20000128

0800a684 <USBD_CUSTOM_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	4603      	mov	r3, r0
 800a68c:	6039      	str	r1, [r7, #0]
 800a68e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	2204      	movs	r2, #4
 800a694:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a696:	4b03      	ldr	r3, [pc, #12]	; (800a6a4 <USBD_CUSTOM_HID_LangIDStrDescriptor+0x20>)
}
 800a698:	4618      	mov	r0, r3
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	2000013c 	.word	0x2000013c

0800a6a8 <USBD_CUSTOM_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	6039      	str	r1, [r7, #0]
 800a6b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6b4:	79fb      	ldrb	r3, [r7, #7]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d105      	bne.n	800a6c6 <USBD_CUSTOM_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a6ba:	683a      	ldr	r2, [r7, #0]
 800a6bc:	4907      	ldr	r1, [pc, #28]	; (800a6dc <USBD_CUSTOM_HID_ProductStrDescriptor+0x34>)
 800a6be:	4808      	ldr	r0, [pc, #32]	; (800a6e0 <USBD_CUSTOM_HID_ProductStrDescriptor+0x38>)
 800a6c0:	f7ff fe9b 	bl	800a3fa <USBD_GetString>
 800a6c4:	e004      	b.n	800a6d0 <USBD_CUSTOM_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a6c6:	683a      	ldr	r2, [r7, #0]
 800a6c8:	4904      	ldr	r1, [pc, #16]	; (800a6dc <USBD_CUSTOM_HID_ProductStrDescriptor+0x34>)
 800a6ca:	4805      	ldr	r0, [pc, #20]	; (800a6e0 <USBD_CUSTOM_HID_ProductStrDescriptor+0x38>)
 800a6cc:	f7ff fe95 	bl	800a3fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6d0:	4b02      	ldr	r3, [pc, #8]	; (800a6dc <USBD_CUSTOM_HID_ProductStrDescriptor+0x34>)
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	200005c8 	.word	0x200005c8
 800a6e0:	0800af1c 	.word	0x0800af1c

0800a6e4 <USBD_CUSTOM_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	6039      	str	r1, [r7, #0]
 800a6ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	4904      	ldr	r1, [pc, #16]	; (800a704 <USBD_CUSTOM_HID_ManufacturerStrDescriptor+0x20>)
 800a6f4:	4804      	ldr	r0, [pc, #16]	; (800a708 <USBD_CUSTOM_HID_ManufacturerStrDescriptor+0x24>)
 800a6f6:	f7ff fe80 	bl	800a3fa <USBD_GetString>
  return USBD_StrDesc;
 800a6fa:	4b02      	ldr	r3, [pc, #8]	; (800a704 <USBD_CUSTOM_HID_ManufacturerStrDescriptor+0x20>)
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	200005c8 	.word	0x200005c8
 800a708:	0800af3c 	.word	0x0800af3c

0800a70c <USBD_CUSTOM_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	4603      	mov	r3, r0
 800a714:	6039      	str	r1, [r7, #0]
 800a716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	221a      	movs	r2, #26
 800a71c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a71e:	f000 f843 	bl	800a7a8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CUSTOM_HID_SerialStrDescriptor */

  /* USER CODE END USBD_CUSTOM_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a722:	4b02      	ldr	r3, [pc, #8]	; (800a72c <USBD_CUSTOM_HID_SerialStrDescriptor+0x20>)
}
 800a724:	4618      	mov	r0, r3
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	20000140 	.word	0x20000140

0800a730 <USBD_CUSTOM_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	4603      	mov	r3, r0
 800a738:	6039      	str	r1, [r7, #0]
 800a73a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a73c:	79fb      	ldrb	r3, [r7, #7]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d105      	bne.n	800a74e <USBD_CUSTOM_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	4907      	ldr	r1, [pc, #28]	; (800a764 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x34>)
 800a746:	4808      	ldr	r0, [pc, #32]	; (800a768 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x38>)
 800a748:	f7ff fe57 	bl	800a3fa <USBD_GetString>
 800a74c:	e004      	b.n	800a758 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a74e:	683a      	ldr	r2, [r7, #0]
 800a750:	4904      	ldr	r1, [pc, #16]	; (800a764 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x34>)
 800a752:	4805      	ldr	r0, [pc, #20]	; (800a768 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x38>)
 800a754:	f7ff fe51 	bl	800a3fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a758:	4b02      	ldr	r3, [pc, #8]	; (800a764 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x34>)
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	200005c8 	.word	0x200005c8
 800a768:	0800af50 	.word	0x0800af50

0800a76c <USBD_CUSTOM_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	4603      	mov	r3, r0
 800a774:	6039      	str	r1, [r7, #0]
 800a776:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a778:	79fb      	ldrb	r3, [r7, #7]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d105      	bne.n	800a78a <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	4907      	ldr	r1, [pc, #28]	; (800a7a0 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x34>)
 800a782:	4808      	ldr	r0, [pc, #32]	; (800a7a4 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x38>)
 800a784:	f7ff fe39 	bl	800a3fa <USBD_GetString>
 800a788:	e004      	b.n	800a794 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a78a:	683a      	ldr	r2, [r7, #0]
 800a78c:	4904      	ldr	r1, [pc, #16]	; (800a7a0 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x34>)
 800a78e:	4805      	ldr	r0, [pc, #20]	; (800a7a4 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x38>)
 800a790:	f7ff fe33 	bl	800a3fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a794:	4b02      	ldr	r3, [pc, #8]	; (800a7a0 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x34>)
}
 800a796:	4618      	mov	r0, r3
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	200005c8 	.word	0x200005c8
 800a7a4:	0800af64 	.word	0x0800af64

0800a7a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a7ae:	4b0f      	ldr	r3, [pc, #60]	; (800a7ec <Get_SerialNum+0x44>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a7b4:	4b0e      	ldr	r3, [pc, #56]	; (800a7f0 <Get_SerialNum+0x48>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a7ba:	4b0e      	ldr	r3, [pc, #56]	; (800a7f4 <Get_SerialNum+0x4c>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d009      	beq.n	800a7e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a7ce:	2208      	movs	r2, #8
 800a7d0:	4909      	ldr	r1, [pc, #36]	; (800a7f8 <Get_SerialNum+0x50>)
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 f814 	bl	800a800 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a7d8:	2204      	movs	r2, #4
 800a7da:	4908      	ldr	r1, [pc, #32]	; (800a7fc <Get_SerialNum+0x54>)
 800a7dc:	68b8      	ldr	r0, [r7, #8]
 800a7de:	f000 f80f 	bl	800a800 <IntToUnicode>
  }
}
 800a7e2:	bf00      	nop
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	0bfa0590 	.word	0x0bfa0590
 800a7f0:	0bfa0594 	.word	0x0bfa0594
 800a7f4:	0bfa0598 	.word	0x0bfa0598
 800a7f8:	20000142 	.word	0x20000142
 800a7fc:	20000152 	.word	0x20000152

0800a800 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a800:	b480      	push	{r7}
 800a802:	b087      	sub	sp, #28
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	4613      	mov	r3, r2
 800a80c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a80e:	2300      	movs	r3, #0
 800a810:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a812:	2300      	movs	r3, #0
 800a814:	75fb      	strb	r3, [r7, #23]
 800a816:	e027      	b.n	800a868 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	0f1b      	lsrs	r3, r3, #28
 800a81c:	2b09      	cmp	r3, #9
 800a81e:	d80b      	bhi.n	800a838 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	0f1b      	lsrs	r3, r3, #28
 800a824:	b2da      	uxtb	r2, r3
 800a826:	7dfb      	ldrb	r3, [r7, #23]
 800a828:	005b      	lsls	r3, r3, #1
 800a82a:	4619      	mov	r1, r3
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	440b      	add	r3, r1
 800a830:	3230      	adds	r2, #48	; 0x30
 800a832:	b2d2      	uxtb	r2, r2
 800a834:	701a      	strb	r2, [r3, #0]
 800a836:	e00a      	b.n	800a84e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	0f1b      	lsrs	r3, r3, #28
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	7dfb      	ldrb	r3, [r7, #23]
 800a840:	005b      	lsls	r3, r3, #1
 800a842:	4619      	mov	r1, r3
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	440b      	add	r3, r1
 800a848:	3237      	adds	r2, #55	; 0x37
 800a84a:	b2d2      	uxtb	r2, r2
 800a84c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	011b      	lsls	r3, r3, #4
 800a852:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a854:	7dfb      	ldrb	r3, [r7, #23]
 800a856:	005b      	lsls	r3, r3, #1
 800a858:	3301      	adds	r3, #1
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	4413      	add	r3, r2
 800a85e:	2200      	movs	r2, #0
 800a860:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a862:	7dfb      	ldrb	r3, [r7, #23]
 800a864:	3301      	adds	r3, #1
 800a866:	75fb      	strb	r3, [r7, #23]
 800a868:	7dfa      	ldrb	r2, [r7, #23]
 800a86a:	79fb      	ldrb	r3, [r7, #7]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d3d3      	bcc.n	800a818 <IntToUnicode+0x18>
  }
}
 800a870:	bf00      	nop
 800a872:	bf00      	nop
 800a874:	371c      	adds	r7, #28
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
	...

0800a880 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b0ae      	sub	sp, #184	; 0xb8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a888:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a88c:	2200      	movs	r2, #0
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	605a      	str	r2, [r3, #4]
 800a892:	609a      	str	r2, [r3, #8]
 800a894:	60da      	str	r2, [r3, #12]
 800a896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a898:	f107 0310 	add.w	r3, r7, #16
 800a89c:	2294      	movs	r2, #148	; 0x94
 800a89e:	2100      	movs	r1, #0
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 fb27 	bl	800aef4 <memset>
  if(pcdHandle->Instance==USB)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a26      	ldr	r2, [pc, #152]	; (800a944 <HAL_PCD_MspInit+0xc4>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d145      	bne.n	800a93c <HAL_PCD_MspInit+0xbc>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a8b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a8b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a8bc:	f107 0310 	add.w	r3, r7, #16
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fa fb09 	bl	8004ed8 <HAL_RCCEx_PeriphCLKConfig>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d001      	beq.n	800a8d0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800a8cc:	f7f6 f8d4 	bl	8000a78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8d0:	4b1d      	ldr	r3, [pc, #116]	; (800a948 <HAL_PCD_MspInit+0xc8>)
 800a8d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d4:	4a1c      	ldr	r2, [pc, #112]	; (800a948 <HAL_PCD_MspInit+0xc8>)
 800a8d6:	f043 0301 	orr.w	r3, r3, #1
 800a8da:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8dc:	4b1a      	ldr	r3, [pc, #104]	; (800a948 <HAL_PCD_MspInit+0xc8>)
 800a8de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8e0:	f003 0301 	and.w	r3, r3, #1
 800a8e4:	60fb      	str	r3, [r7, #12]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a8e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a8ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800a902:	230a      	movs	r3, #10
 800a904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a908:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a90c:	4619      	mov	r1, r3
 800a90e:	480f      	ldr	r0, [pc, #60]	; (800a94c <HAL_PCD_MspInit+0xcc>)
 800a910:	f7f7 fc1e 	bl	8002150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a914:	4b0c      	ldr	r3, [pc, #48]	; (800a948 <HAL_PCD_MspInit+0xc8>)
 800a916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a918:	4a0b      	ldr	r2, [pc, #44]	; (800a948 <HAL_PCD_MspInit+0xc8>)
 800a91a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a91e:	65d3      	str	r3, [r2, #92]	; 0x5c
 800a920:	4b09      	ldr	r3, [pc, #36]	; (800a948 <HAL_PCD_MspInit+0xc8>)
 800a922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a928:	60bb      	str	r3, [r7, #8]
 800a92a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_FS_IRQn, 0, 0);
 800a92c:	2200      	movs	r2, #0
 800a92e:	2100      	movs	r1, #0
 800a930:	2049      	movs	r0, #73	; 0x49
 800a932:	f7f7 fbd8 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_FS_IRQn);
 800a936:	2049      	movs	r0, #73	; 0x49
 800a938:	f7f7 fbef 	bl	800211a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a93c:	bf00      	nop
 800a93e:	37b8      	adds	r7, #184	; 0xb8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	4000d400 	.word	0x4000d400
 800a948:	40021000 	.word	0x40021000
 800a94c:	42020000 	.word	0x42020000

0800a950 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a964:	4619      	mov	r1, r3
 800a966:	4610      	mov	r0, r2
 800a968:	f7fe fda9 	bl	80094be <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a96c:	bf00      	nop
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	460b      	mov	r3, r1
 800a97e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a986:	78fa      	ldrb	r2, [r7, #3]
 800a988:	6879      	ldr	r1, [r7, #4]
 800a98a:	4613      	mov	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4413      	add	r3, r2
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	440b      	add	r3, r1
 800a994:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	78fb      	ldrb	r3, [r7, #3]
 800a99c:	4619      	mov	r1, r3
 800a99e:	f7fe fde3 	bl	8009568 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a9a2:	bf00      	nop
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b082      	sub	sp, #8
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a9bc:	78fa      	ldrb	r2, [r7, #3]
 800a9be:	6879      	ldr	r1, [r7, #4]
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	4413      	add	r3, r2
 800a9c6:	00db      	lsls	r3, r3, #3
 800a9c8:	440b      	add	r3, r1
 800a9ca:	333c      	adds	r3, #60	; 0x3c
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	78fb      	ldrb	r3, [r7, #3]
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	f7fe fe2c 	bl	800962e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a9d6:	bf00      	nop
 800a9d8:	3708      	adds	r7, #8
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b082      	sub	sp, #8
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fe ff40 	bl	8009872 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a9f2:	bf00      	nop
 800a9f4:	3708      	adds	r7, #8
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b084      	sub	sp, #16
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa02:	2301      	movs	r3, #1
 800aa04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d001      	beq.n	800aa12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aa0e:	f7f6 f833 	bl	8000a78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa18:	7bfa      	ldrb	r2, [r7, #15]
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fe feea 	bl	80097f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7fe fe96 	bl	800975a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800aa2e:	bf00      	nop
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fe fee5 	bl	8009816 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d005      	beq.n	800aa60 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa54:	4b04      	ldr	r3, [pc, #16]	; (800aa68 <HAL_PCD_SuspendCallback+0x30>)
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	4a03      	ldr	r2, [pc, #12]	; (800aa68 <HAL_PCD_SuspendCallback+0x30>)
 800aa5a:	f043 0306 	orr.w	r3, r3, #6
 800aa5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	e000ed00 	.word	0xe000ed00

0800aa6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d007      	beq.n	800aa8c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa7c:	4b08      	ldr	r3, [pc, #32]	; (800aaa0 <HAL_PCD_ResumeCallback+0x34>)
 800aa7e:	691b      	ldr	r3, [r3, #16]
 800aa80:	4a07      	ldr	r2, [pc, #28]	; (800aaa0 <HAL_PCD_ResumeCallback+0x34>)
 800aa82:	f023 0306 	bic.w	r3, r3, #6
 800aa86:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800aa88:	f000 f9de 	bl	800ae48 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fe fed5 	bl	8009842 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800aa98:	bf00      	nop
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	e000ed00 	.word	0xe000ed00

0800aaa4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800aaac:	4a27      	ldr	r2, [pc, #156]	; (800ab4c <USBD_LL_Init+0xa8>)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a25      	ldr	r2, [pc, #148]	; (800ab4c <USBD_LL_Init+0xa8>)
 800aab8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800aabc:	f7f9 fa06 	bl	8003ecc <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800aac0:	4b22      	ldr	r3, [pc, #136]	; (800ab4c <USBD_LL_Init+0xa8>)
 800aac2:	4a23      	ldr	r2, [pc, #140]	; (800ab50 <USBD_LL_Init+0xac>)
 800aac4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800aac6:	4b21      	ldr	r3, [pc, #132]	; (800ab4c <USBD_LL_Init+0xa8>)
 800aac8:	2208      	movs	r2, #8
 800aaca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800aacc:	4b1f      	ldr	r3, [pc, #124]	; (800ab4c <USBD_LL_Init+0xa8>)
 800aace:	2202      	movs	r2, #2
 800aad0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aad2:	4b1e      	ldr	r3, [pc, #120]	; (800ab4c <USBD_LL_Init+0xa8>)
 800aad4:	2202      	movs	r2, #2
 800aad6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800aad8:	4b1c      	ldr	r3, [pc, #112]	; (800ab4c <USBD_LL_Init+0xa8>)
 800aada:	2200      	movs	r2, #0
 800aadc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800aade:	4b1b      	ldr	r3, [pc, #108]	; (800ab4c <USBD_LL_Init+0xa8>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800aae4:	4b19      	ldr	r3, [pc, #100]	; (800ab4c <USBD_LL_Init+0xa8>)
 800aae6:	2200      	movs	r2, #0
 800aae8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800aaea:	4b18      	ldr	r3, [pc, #96]	; (800ab4c <USBD_LL_Init+0xa8>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aaf0:	4816      	ldr	r0, [pc, #88]	; (800ab4c <USBD_LL_Init+0xa8>)
 800aaf2:	f7f7 fcf5 	bl	80024e0 <HAL_PCD_Init>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d001      	beq.n	800ab00 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800aafc:	f7f5 ffbc 	bl	8000a78 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab06:	2318      	movs	r3, #24
 800ab08:	2200      	movs	r2, #0
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	f7f9 f8f7 	bl	8003cfe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab16:	2358      	movs	r3, #88	; 0x58
 800ab18:	2200      	movs	r2, #0
 800ab1a:	2180      	movs	r1, #128	; 0x80
 800ab1c:	f7f9 f8ef 	bl	8003cfe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab26:	2398      	movs	r3, #152	; 0x98
 800ab28:	2200      	movs	r2, #0
 800ab2a:	2181      	movs	r1, #129	; 0x81
 800ab2c:	f7f9 f8e7 	bl	8003cfe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab36:	23d8      	movs	r3, #216	; 0xd8
 800ab38:	2200      	movs	r2, #0
 800ab3a:	2101      	movs	r1, #1
 800ab3c:	f7f9 f8df 	bl	8003cfe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20000608 	.word	0x20000608
 800ab50:	4000d400 	.word	0x4000d400

0800ab54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7f7 fd9d 	bl	80026aa <HAL_PCD_Start>
 800ab70:	4603      	mov	r3, r0
 800ab72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 f96c 	bl	800ae54 <USBD_Get_USB_Status>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	4608      	mov	r0, r1
 800ab94:	4611      	mov	r1, r2
 800ab96:	461a      	mov	r2, r3
 800ab98:	4603      	mov	r3, r0
 800ab9a:	70fb      	strb	r3, [r7, #3]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	70bb      	strb	r3, [r7, #2]
 800aba0:	4613      	mov	r3, r2
 800aba2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aba4:	2300      	movs	r3, #0
 800aba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800abb2:	78bb      	ldrb	r3, [r7, #2]
 800abb4:	883a      	ldrh	r2, [r7, #0]
 800abb6:	78f9      	ldrb	r1, [r7, #3]
 800abb8:	f7f7 ff0c 	bl	80029d4 <HAL_PCD_EP_Open>
 800abbc:	4603      	mov	r3, r0
 800abbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 f946 	bl	800ae54 <USBD_Get_USB_Status>
 800abc8:	4603      	mov	r3, r0
 800abca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b084      	sub	sp, #16
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	460b      	mov	r3, r1
 800abe0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe6:	2300      	movs	r3, #0
 800abe8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800abf0:	78fa      	ldrb	r2, [r7, #3]
 800abf2:	4611      	mov	r1, r2
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7f7 ff53 	bl	8002aa0 <HAL_PCD_EP_Close>
 800abfa:	4603      	mov	r3, r0
 800abfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abfe:	7bfb      	ldrb	r3, [r7, #15]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 f927 	bl	800ae54 <USBD_Get_USB_Status>
 800ac06:	4603      	mov	r3, r0
 800ac08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac2e:	78fa      	ldrb	r2, [r7, #3]
 800ac30:	4611      	mov	r1, r2
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7f7 fffc 	bl	8002c30 <HAL_PCD_EP_SetStall>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 f908 	bl	800ae54 <USBD_Get_USB_Status>
 800ac44:	4603      	mov	r3, r0
 800ac46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b084      	sub	sp, #16
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac62:	2300      	movs	r3, #0
 800ac64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac6c:	78fa      	ldrb	r2, [r7, #3]
 800ac6e:	4611      	mov	r1, r2
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7f8 f82f 	bl	8002cd4 <HAL_PCD_EP_ClrStall>
 800ac76:	4603      	mov	r3, r0
 800ac78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac7a:	7bfb      	ldrb	r3, [r7, #15]
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f000 f8e9 	bl	800ae54 <USBD_Get_USB_Status>
 800ac82:	4603      	mov	r3, r0
 800ac84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aca2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	da0c      	bge.n	800acc6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800acac:	78fb      	ldrb	r3, [r7, #3]
 800acae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acb2:	68f9      	ldr	r1, [r7, #12]
 800acb4:	1c5a      	adds	r2, r3, #1
 800acb6:	4613      	mov	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	00db      	lsls	r3, r3, #3
 800acbe:	440b      	add	r3, r1
 800acc0:	3302      	adds	r3, #2
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	e00b      	b.n	800acde <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800acc6:	78fb      	ldrb	r3, [r7, #3]
 800acc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800accc:	68f9      	ldr	r1, [r7, #12]
 800acce:	4613      	mov	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	00db      	lsls	r3, r3, #3
 800acd6:	440b      	add	r3, r1
 800acd8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800acdc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b084      	sub	sp, #16
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	460b      	mov	r3, r1
 800acf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad04:	78fa      	ldrb	r2, [r7, #3]
 800ad06:	4611      	mov	r1, r2
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7f7 fe3e 	bl	800298a <HAL_PCD_SetAddress>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 f89d 	bl	800ae54 <USBD_Get_USB_Status>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	607a      	str	r2, [r7, #4]
 800ad32:	603b      	str	r3, [r7, #0]
 800ad34:	460b      	mov	r3, r1
 800ad36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ad46:	7af9      	ldrb	r1, [r7, #11]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	f7f7 ff2d 	bl	8002baa <HAL_PCD_EP_Transmit>
 800ad50:	4603      	mov	r3, r0
 800ad52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad54:	7dfb      	ldrb	r3, [r7, #23]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f000 f87c 	bl	800ae54 <USBD_Get_USB_Status>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad60:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3718      	adds	r7, #24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b086      	sub	sp, #24
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	60f8      	str	r0, [r7, #12]
 800ad72:	607a      	str	r2, [r7, #4]
 800ad74:	603b      	str	r3, [r7, #0]
 800ad76:	460b      	mov	r3, r1
 800ad78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ad88:	7af9      	ldrb	r1, [r7, #11]
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	f7f7 fecf 	bl	8002b30 <HAL_PCD_EP_Receive>
 800ad92:	4603      	mov	r3, r0
 800ad94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad96:	7dfb      	ldrb	r3, [r7, #23]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f000 f85b 	bl	800ae54 <USBD_Get_USB_Status>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ada2:	7dbb      	ldrb	r3, [r7, #22]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3718      	adds	r7, #24
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	460b      	mov	r3, r1
 800adb6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800adb8:	78fb      	ldrb	r3, [r7, #3]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d002      	beq.n	800adc4 <HAL_PCDEx_LPM_Callback+0x18>
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d013      	beq.n	800adea <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800adc2:	e023      	b.n	800ae0c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	699b      	ldr	r3, [r3, #24]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d007      	beq.n	800addc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800adcc:	f000 f83c 	bl	800ae48 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800add0:	4b10      	ldr	r3, [pc, #64]	; (800ae14 <HAL_PCDEx_LPM_Callback+0x68>)
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	4a0f      	ldr	r2, [pc, #60]	; (800ae14 <HAL_PCDEx_LPM_Callback+0x68>)
 800add6:	f023 0306 	bic.w	r3, r3, #6
 800adda:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fe fd2d 	bl	8009842 <USBD_LL_Resume>
    break;
 800ade8:	e010      	b.n	800ae0c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fe fd10 	bl	8009816 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d005      	beq.n	800ae0a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800adfe:	4b05      	ldr	r3, [pc, #20]	; (800ae14 <HAL_PCDEx_LPM_Callback+0x68>)
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	4a04      	ldr	r2, [pc, #16]	; (800ae14 <HAL_PCDEx_LPM_Callback+0x68>)
 800ae04:	f043 0306 	orr.w	r3, r3, #6
 800ae08:	6113      	str	r3, [r2, #16]
    break;
 800ae0a:	bf00      	nop
}
 800ae0c:	bf00      	nop
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	e000ed00 	.word	0xe000ed00

0800ae18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800ae20:	4b03      	ldr	r3, [pc, #12]	; (800ae30 <USBD_static_malloc+0x18>)
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	370c      	adds	r7, #12
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	2000017c 	.word	0x2000017c

0800ae34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]

}
 800ae3c:	bf00      	nop
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ae4c:	f7f5 fbc6 	bl	80005dc <SystemClock_Config>
}
 800ae50:	bf00      	nop
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae62:	79fb      	ldrb	r3, [r7, #7]
 800ae64:	2b03      	cmp	r3, #3
 800ae66:	d817      	bhi.n	800ae98 <USBD_Get_USB_Status+0x44>
 800ae68:	a201      	add	r2, pc, #4	; (adr r2, 800ae70 <USBD_Get_USB_Status+0x1c>)
 800ae6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae6e:	bf00      	nop
 800ae70:	0800ae81 	.word	0x0800ae81
 800ae74:	0800ae87 	.word	0x0800ae87
 800ae78:	0800ae8d 	.word	0x0800ae8d
 800ae7c:	0800ae93 	.word	0x0800ae93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae80:	2300      	movs	r3, #0
 800ae82:	73fb      	strb	r3, [r7, #15]
    break;
 800ae84:	e00b      	b.n	800ae9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae86:	2303      	movs	r3, #3
 800ae88:	73fb      	strb	r3, [r7, #15]
    break;
 800ae8a:	e008      	b.n	800ae9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae90:	e005      	b.n	800ae9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae92:	2303      	movs	r3, #3
 800ae94:	73fb      	strb	r3, [r7, #15]
    break;
 800ae96:	e002      	b.n	800ae9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae98:	2303      	movs	r3, #3
 800ae9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae9c:	bf00      	nop
  }
  return usb_status;
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3714      	adds	r7, #20
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <__libc_init_array>:
 800aeac:	b570      	push	{r4, r5, r6, lr}
 800aeae:	4d0d      	ldr	r5, [pc, #52]	; (800aee4 <__libc_init_array+0x38>)
 800aeb0:	2600      	movs	r6, #0
 800aeb2:	4c0d      	ldr	r4, [pc, #52]	; (800aee8 <__libc_init_array+0x3c>)
 800aeb4:	1b64      	subs	r4, r4, r5
 800aeb6:	10a4      	asrs	r4, r4, #2
 800aeb8:	42a6      	cmp	r6, r4
 800aeba:	d109      	bne.n	800aed0 <__libc_init_array+0x24>
 800aebc:	4d0b      	ldr	r5, [pc, #44]	; (800aeec <__libc_init_array+0x40>)
 800aebe:	2600      	movs	r6, #0
 800aec0:	4c0b      	ldr	r4, [pc, #44]	; (800aef0 <__libc_init_array+0x44>)
 800aec2:	f000 f81f 	bl	800af04 <_init>
 800aec6:	1b64      	subs	r4, r4, r5
 800aec8:	10a4      	asrs	r4, r4, #2
 800aeca:	42a6      	cmp	r6, r4
 800aecc:	d105      	bne.n	800aeda <__libc_init_array+0x2e>
 800aece:	bd70      	pop	{r4, r5, r6, pc}
 800aed0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aed4:	3601      	adds	r6, #1
 800aed6:	4798      	blx	r3
 800aed8:	e7ee      	b.n	800aeb8 <__libc_init_array+0xc>
 800aeda:	f855 3b04 	ldr.w	r3, [r5], #4
 800aede:	3601      	adds	r6, #1
 800aee0:	4798      	blx	r3
 800aee2:	e7f2      	b.n	800aeca <__libc_init_array+0x1e>
 800aee4:	0800b004 	.word	0x0800b004
 800aee8:	0800b004 	.word	0x0800b004
 800aeec:	0800b004 	.word	0x0800b004
 800aef0:	0800b008 	.word	0x0800b008

0800aef4 <memset>:
 800aef4:	4402      	add	r2, r0
 800aef6:	4603      	mov	r3, r0
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d100      	bne.n	800aefe <memset+0xa>
 800aefc:	4770      	bx	lr
 800aefe:	f803 1b01 	strb.w	r1, [r3], #1
 800af02:	e7f9      	b.n	800aef8 <memset+0x4>

0800af04 <_init>:
 800af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af06:	bf00      	nop
 800af08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af0a:	bc08      	pop	{r3}
 800af0c:	469e      	mov	lr, r3
 800af0e:	4770      	bx	lr

0800af10 <_fini>:
 800af10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af12:	bf00      	nop
 800af14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af16:	bc08      	pop	{r3}
 800af18:	469e      	mov	lr, r3
 800af1a:	4770      	bx	lr
